
eslinteslint˚îØ2014-12-16T05:44:35Z"2014-12-21T00:08:03Z*°With brace-style: [2, "stroustrup"], the following snippet:
if (foo) {
  baz();
} else if (bar) {
  baz();
}
else {
  qux();
}

does not report an error for the } else if {, but I believe it should, in the same way that:
if (foo) {
  bar();
} else {
  baz();
}

reports an error for the } else {.
I believe Stroustrup's rules for not "cuddling the else" should also apply to else if, as shown here (search "else if").2H
(d7f302f6c0ae9dc291226014ad109cffb8a8bf0c2014-12-20T22:54:41Z135977:g
2014-12-16T19:13:34ZOYeah, that seems like a bug. Can you verify the version of ESLint you're using?:F
2014-12-16T19:23:44Z.Sure - I just confirmed the behavior on 0.10.2:(
2014-12-20T08:09:30ZWorking on this.”ÂF2017-08-02T11:20:22Z"2018-01-10T01:06:22Z*•Tell us about your environment

ESLint Version: 4.3.0
Node Version: 8.1.3
npm Version: 5.0.3

What parser (default, Babel-ESLint, etc.) are you using?
I tried both default and babel-eslint. They're giving me same result.
Please show your full configuration:

Configuration

{
    "env": {
        "es6": true,
        "node": true
    },
    "extends": [
        "eslint:recommended"
    ],
    "rules": {
        "indent": ["error", 4]
    }
}


What did you do? Please include the actual source code causing the issue.

const f = (first, second) => {
    return second;
};

// works for multiline template strings
f(`
    multiline
    template
    string
`, `
    multiline
    template
    string
`);

// works for multiline objects
f({
    foo: 'foo',
    bar: 'bar',
}, {
    foo: 'foo',
    bar: 'bar',
});

// doesn't work for multiline template string and multiline object
f(`
    multiline
    template
    string
`, {
    foo: 'foo',
    bar: 'bar',
});


What did you expect to happen?
I expected all of the three examples will pass.
What actually happened? Please include the actual, raw output from ESLint.
  31:1  error  Expected indentation of 8 spaces but found 4  indent
  32:1  error  Expected indentation of 8 spaces but found 4  indent
  33:1  error  Expected indentation of 4 spaces but found 0  indent

I believe the eslint fix is incorrect
 const f = (first, second) => {
     return second;
 };
 
 // works for multiline template strings
 f(`
     multiline
     template
     string
 `, `
     multiline
     template
     string
 `);

 // works for multiline objects
 f({
     foo: 'foo',
     bar: 'bar',
 }, {
     foo: 'foo',
     bar: 'bar',
 });

 // doesn't work for multiline template string and multiline object
 f(`
     multiline
     template
     string
 `, {
-    foo: 'foo',
-    bar: 'bar',
-});
+        foo: 'foo',
+        bar: 'bar',
+    });
Could you please confirm this is an unintended behaviour? Thank you.2J
(133336e04edc59c7441fc0670b0b24dd15ded9b32018-01-10T01:06:16Z11638619:É
2017-08-02T18:25:15ZÍWe actually have a test asserting the current behavior, so I think this is working as intended. I don't recall if there was a specific reason why I added that test, though. I think I agree that your proposed behavior makes more sense.:h
2017-08-03T10:59:09ZPThank you for a quick response. Can I expect the behaviour will be changed then?:2
2017-08-28T10:45:47ZAny updates on this issue?:G
2017-12-26T20:24:41Z/@not-an-aardvark Where are we at on this issue?:+
2017-12-26T20:53:03ZMarked as accepted.:\
2018-01-04T20:29:38ZD@not-an-aardvark anything we can do to help get this moving forward?:.
2018-01-04T21:54:04ZYou could submit a PR.:É
2018-01-10T01:21:04Zk@not-an-aardvark thank you! I tried working on it, but was still trying to understand how eslint works hahaÈò°?2017-02-18T00:30:23Z"2017-02-18T20:35:11Z*ËWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:



What changes did you make? (Give an overview)
Ensure output is checked when errors is a number in RuleTester.
The change revealed a couple of tests in spaced-comments where the output was wrong (there is no output because there is a parsing error) so I fixed those, too.
Is there anything you'd like reviewers to focus on?
No.2G
(daf6f2690a4745f46709467d133cc21f80a5bb622017-02-18T20:35:10Z72561:
2017-02-18T00:30:24ZLGTM:ƒ
2017-02-18T00:30:25Z´@alberto, thanks for your PR! By analyzing the history of the files in this pull request, we identified @nzakas, @not-an-aardvark and @gyandeeps to be potential reviewers.:
2017-02-18T00:33:10ZLGTM≤ˆ‰2015-06-18T08:42:40Z"2015-07-11T03:35:33Z*êHi. When I have a code:
if (a) {
    // we really need to test it
    if (b) {
        c();
    }

    d();
}
The rule warns me: Block must not be padded by blank lines padded-blocks.
It should not since comment is not blank line.
When I remove a comment then rule passes.2H
(c6cd0cdc06becce66a3bc58f5e6c6e017b7b2d3c2015-07-07T20:55:26Z169170:_
2015-06-18T08:46:20ZGCan you share your eslint configuration? Do you use the default parser?:l
2015-06-18T08:47:04ZTDefault parser it is.
{
    "rules": {
        "padded-blocks": [2, "never"]
    }
}:Ÿ
2015-06-18T10:48:52Z¿You disabled the rule in your configuration. So it should never warn.
However, I've tried your example in the online demo and can‚Äôt reproduce the problem:
/* eslint padded-blocks: [2, "never"] */

if (a) {
    // we really need to test it
    if (b) {
        c();
    }

    d();
}
Which version of ESLint do you use?:À
2015-06-18T10:54:24Z≤"padded-blocks": 0, // S3: docelowo [2, "never"],
yeah, error occurs only with commented setting. I need to disable it due to that problem. Sorry for that.
ESLint version: 0.22.1:&
2015-06-18T11:01:04Zsame on 0.23.0:‘
2015-06-18T11:08:22ZªPlease try this
/* eslint padded-blocks: [2, "never"] */

var xxx = function () {
    // foo
    if (
        // bar
        a ||
        // baz
        b
    ) {
        return;
    }
};:¥
2015-06-18T12:02:26ZõNow I can reproduce it.
Here is more minimal example:
/* eslint padded-blocks: [2, "never"] */

{
    // comment
    if (// comment
        a) {}
}
This is a problem with the comment attachment algorithm of espree. Both comments are getting attached to the Identifier node inside the if condition. The current implementation of the rule would expect that the first comment gets attached to the IfStatement node.:3
2015-06-18T20:39:08ZCan you file an espree bug?:∞
2015-06-20T20:48:57ZóJust stumbled upon this too. Same issue with trailing comments.
function foo() {
  console.log("Hi")

  // Long text.
  // Long text.
  // Long text.
}:{
2015-06-20T22:42:31Zc@moll This is a different issue caused by the missing semicolon after console.log("Hi"), see #2336.:7
2015-07-05T21:09:45ZFor reference eslint/espree#155:T
2015-07-13T11:13:23Z<Great to have that fixed! Waiting for next stable release ;)ÖÜπ∫2015-08-25T16:14:26Z"2015-08-25T20:49:45Z*{I am having issues upgrading eslint from the ^0.24.1 version to 1.2.1.
I could not figure out a way to solve a strange indentation issue.
var foo = 'foo',
  bar = 'bar',
  baz = function() {

  }

function hello () { // <-- eslint complains about this line

}
This is my .eslintrc file
env:

    ###########################################################################
    #                                                                         #
    #   ENVIRONMENT: if you write code that will be executed in one of the    #
    #   following environments, the value for that environment should be      #
    #   set to true.                                                          #
    #                                                                         #
    ###########################################################################

    browser: true
    es6: true

ecmaFeatures:
    modules: true
    destructuring: true
    spread: true
    arrowFunctions: true
    blockBindings: true

globals:

    ###########################################################################
    #                                                                         #
    #   GLOBALS: ESLint will assume the following variables are declared      #
    #   globally; other variables will require explicit declaration.          #
    #                                                                         #
    ###########################################################################

    require: true

rules:

    ###########################################################################
    #                                                                         #
    #   POSSIBLE ERRORS: these rules point out areas where you might have     #
    #   made mistakes.                                                        #
    #                                                                         #
    ###########################################################################

    comma-dangle: 1         # disallow trailing commas in object literals
    no-cond-assign: 0          # disallow assignment in conditional expressions
    no-console: 0              # disallow use of console
    no-constant-condition: 2   # disallow use of constant expressions in conditions
    no-control-regex: 2        # disallow control characters in regular expressions
    no-debugger: 2             # disallow use of debugger
    no-dupe-keys: 2            # disallow duplicate keys when creating object literals
    no-empty: 2                # disallow empty statements
    no-empty-character-class: 2          # disallow the use of empty character classes in regular expressions
    no-ex-assign: 2            # disallow assigning to the exception in a catch block
    no-extra-boolean-cast: 2   # disallow double-negation boolean casts in a boolean context
    no-extra-parens: 0         # disallow unnecessary parentheses
    no-extra-semi: 0           # disallow unnecessary semicolons
    no-func-assign: 0          # disallow overwriting functions written as function declarations
    no-inner-declarations: 1   # disallow function or variable declarations in nested blocks
    no-invalid-regexp: 2       # disallow invalid regular expression strings in the RegExp
                               #    constructor
    no-irregular-whitespace: 2 # disallow irregular whitespace outside of strings and comments
    no-negated-in-lhs: 2       # disallow negation of the left operand of an in expression
    no-obj-calls: 2            # disallow the use of object properties of the global object (Math
                               #    and JSON) as functions
    no-regex-spaces: 1         # disallow multiple spaces in a regular expression literal
    no-reserved-keys: 0        # disallow reserved words being used as object literal keys
    no-sparse-arrays: 2        # disallow sparse arrays
    no-unreachable: 2          # disallow unreachable statements after a return, throw, continue,
                               #    or break statement
    use-isnan: 2               # disallow comparisons with the value NaN
    valid-jsdoc:               # ensure JSDoc comments are valid
        [1, { "prefer": { "return": "returns" }, "requireReturn": false }]
    valid-typeof: 2            # ensure that the results of typeof are compared against a
                               #    valid string

    ###########################################################################
    #                                                                         #
    #   BEST PRACTICES: these rules are designed to prevent you from making   #
    #   mistakes. They either prescribe a better way of doing something or    #
    #   help you avoid pitfalls.                                              #
    #                                                                         #
    ###########################################################################

    block-scoped-var: 0       # treat var statements as if they were block scoped
    complexity: [1, 250]      # specify the maximum cyclomatic complexity allowed in a program
    consistent-return: 0      # require return statements to either always or never specify values
    curly: 0                  # specify curly brace conventions for all control
                              #     statements
    default-case: 2           # require default case in switch statements
    dot-notation: 1           # encourages use of dot notation whenever possible
    eqeqeq: 0                 # require the use of === and !==
    guard-for-in: 1           # make sure for-in loops have an if statement
    no-alert: 0               # disallow the use of alert, confirm, and prompt
    no-caller: 2              # disallow use of arguments.caller or arguments.callee
    no-div-regex: 0           # disallow division operators explicitly at beginning of regular
                              #    expression
    no-else-return: 0         # disallow else after a return in an if
    no-empty-label: 2         # disallow use of labels for anything other then loops and switches
    no-eq-null: 0             # disallow comparisons to null without a type-checking operator
    no-eval: 2                # disallow use of eval()
    no-extend-native: 2       # disallow adding to native types
    no-extra-bind: 2          # disallow unnecessary function binding
    no-fallthrough: 2         # disallow fallthrough of case statements
    no-floating-decimal: 2    # disallow the use of leading or trailing decimal points in numeric
                              #    literals
    no-implied-eval: 2        # disallow use of eval()-like methods
    no-iterator: 2            # disallow usage of __iterator__ property
    no-labels: 2              # disallow use of labeled statements
    no-lone-blocks: 2         # disallow unnecessary nested blocks
    no-loop-func: 0           # disallow creation of functions within loops
    no-multi-spaces: 0        # disallow use of multiple spaces
    no-multi-str: 2           # disallow use of multiline strings
    no-native-reassign: 2     # disallow reassignments of native objects
    no-new: 2                 # disallow use of new operator when not part of the assignment or
                              #    comparison
    no-new-func: 0            # disallow use of new operator for Function object
    no-new-wrappers: 2        # disallows creating new instances of String,Number, and Boolean
    no-octal: 0               # disallow use of octal literals
    no-octal-escape: 0        # disallow use of octal escape sequences in string literals, such as
                              #    `var foo = "Copyright \251"`
    no-process-env: 0         # disallow use of process.env
    no-proto: 2               # disallow usage of __proto__ property
    no-redeclare: 1           # disallow declaring the same variable more then once
    no-return-assign: 0       # disallow use of assignment in return statement
    no-script-url: 2          # disallow use of javascript urls.
    no-self-compare: 2        # disallow comparisons where both sides are exactly the same
    no-sequences: 2           # disallow use of comma operator
    no-unused-expressions: 0  # disallow usage of expressions in statement position
    no-void: 2                # disallow use of void operator
    no-warning-comments: 0    # disallow usage of configurable warning terms in comments - e.g.
                              #     TODO or FIXME
    no-with: 2                # disallow use of the with statement
    radix: 2                  # require use of the second argument for parseInt()
    vars-on-top: 0            # requires to declare all vars on top of their containing scope
    wrap-iife: [2, "inside"]  # require immediate function invocation to be wrapped in parentheses

    ###########################################################################
    #                                                                         #
    #   STRICT MODE: these rules relate to using strict mode.                 #
    #                                                                         #
    ###########################################################################

    strict: [2, "never"]           # require that all functions are run in strict mode

    ###########################################################################
    #                                                                         #
    #   VARIABLES: these rules have to do with variable declarations.         #
    #                                                                         #
    ###########################################################################

    no-catch-shadow: 2             # disallow the catch clause parameter name being the same as a
                                   #    variable in the outer scope
    no-delete-var: 2               # disallow deletion of variables
    no-label-var: 2                # disallow labels that share a name with a variable
    no-shadow: 0                   # disallow declaration of variables already declared in the
                                   #    outer scope
    no-shadow-restricted-names: 2  # disallow shadowing of names such as arguments
    no-undef: 0                    # disallow use of undeclared variables unless mentioned in a
                                   #    /*global */ block
    no-undef-init: 2               # disallow use of undefined when initializing variables
    no-undefined: 0                # disallow use of undefined variable
    no-unused-vars: 0              # disallow declaration of variables that are not used in the code
    no-use-before-define: 0        # disallow use of variables before they are defined

    ###########################################################################
    #                                                                         #
    #   NODE: these rules relate to functionality provided in Node.js.        #
    #                                                                         #
    ###########################################################################

    handle-callback-err: 0        # enforces error handling in callbacks
    no-mixed-requires: 0          # disallow mixing regular variable and require declarations
    no-new-require: 2             # disallow use of new operator with the require function
    no-path-concat: 2             # disallow string concatenation with __dirname and __filename
    no-process-exit: 0            # disallow process.exit()
    no-restricted-modules: 0      # restrict usage of specified node modules
    no-sync: 0                    # disallow use of synchronous methods

    ###########################################################################
    #                                                                         #
    #   STYLISTIC ISSUES: these rules are purely matters of style and,        #
    #   while valueable to enforce consistently across a project, are         #
    #   quite subjective.                                                     #
    #                                                                         #
    ###########################################################################

    indent: [2, 2]                 # Set a specific tab width
    brace-style: 0                 # enforce one true brace style
    camelcase: 0                   # require camel case names
    comma-spacing: 2               # enforce spacing before and after comma
    comma-style: 2                 # enforce one true comma style
    consistent-this: 0             # enforces consistent naming when capturing the current execution context
    eol-last: 0                    # enforce newline at the end of file, with no multiple empty lines
    func-names: 0                  # require function expressions to have a name
    func-style: 0                  # enforces use of function declarations or expressions
    key-spacing: 2                 # enforces spacing between keys and values in object literal properties
    max-nested-callbacks: [2, 4]   # specify the maximum depth callbacks can be nested
    new-cap: 0                     # require a capital letter for constructors
    new-parens: 2                  # disallow the omission of parentheses when invoking a constructor with no arguments
    no-array-constructor: 2        # disallow use of the Array constructor
    no-lonely-if: 0                # disallow if as the only statement in an else block
    no-mixed-spaces-and-tabs: 2    # disallow mixed spaces and tabs for indentation
    no-nested-ternary: 0           # disallow nested ternary expressions
    no-new-object: 1               # disallow use of the Object constructor
    no-space-before-semi: 0        # disallow space before semicolon
    no-spaced-func: 2              # disallow space between function identifier and application
    no-ternary: 0                  # disallow the use of ternary operators

    no-trailing-spaces: 2          # disallow trailing whitespace at the end of lines
    no-multiple-empty-lines: 0     # disallow multiple empty lines
    no-underscore-dangle: 0        # disallow dangling underscores in identifiers
    no-extra-parens: 2                # disallow wrapping of non-IIFE statements in parens
    one-var: 0                     # allow just one var statement per function
    padded-blocks: 0               # enforce padding within blocks
    quotes:                        # specify whether double or single quotes should be used
        [1, "single", "avoid-escape"]
    quote-props: 0                 # require quotes around object literal property names
    semi: [2, "never"]             # require or disallow use of semicolons instead of ASI
    semi-spacing: 0
    sort-vars: 0                   # sort variables within the same declaration block
    space-after-keywords: [2, "always"] # require a space after certain keywords
    space-before-blocks: 2         # require or disallow space before blocks
    space-in-brackets: 0           # require or disallow spaces inside brackets
    space-in-parens: 0             # require or disallow spaces inside parentheses
    space-infix-ops: 0             # require spaces around operators
    space-return-throw-case: 2     # require a space after return, throw, and case
    spaced-line-comment: 0         # require or disallow a space immediately following
                                   #    the // in a line comment
    wrap-regex: 0                  # require regex literals to be wrapped in parentheses


7:1 error Expected indentation of 2 space characters but found 0 indent
Is this a bug? Do you know any workaround to fix this issue?
thanks2H
(f3188beaedd117d2c6b9b4694864e5bbbe6de28b2015-08-25T17:53:13Z126780:‹
2015-08-25T16:14:36Z√Thanks for the issue! We get a lot of issues, so this message is automatically posted to each one to help you check that you've included all of the information we need to help you.
Reporting a bug? Please be sure to include:

The version of ESLint you are using (run eslint -v)
The source code that caused the problem
The configuration you're using (for the rule or your entire config file)
The actual ESLint output complete with line numbers

Requesting a new rule? Please be sure to include:

The use case for the rule - what is it trying to prevent or flag?
Whether the rule is trying to prevent an error or is purely stylistic
Why you believe this rule is generic enough to be included

Requesting a feature? Please be sure to include:

The problem you want to solve (don't mention the solution)
Your take on the correct solution to problem

Including this information in your issue helps us to triage it and get you a response as quickly as possible.
Thanks!:M
2015-08-25T16:17:49Z5I think duplicate of #3498
@BYK can you also confirm?:f
2015-08-25T16:58:17ZN@gyandeeps - Looks like it but I get the error on master now so investigating. @¬¸52016-08-15T14:48:43Z"2016-08-22T23:33:36Z*ºWhat version are you using?
3.2.2
What did you do?
const arr = [1, 2, 3];

if (arr.some(val => {
  let b = true;
  if (val === 2) {
    b = false;
  }
  return b;
})) console.log('returned true');
What happened?
With this eslintrc:
module.exports = {
    "env": {
        "browser": true,
        "es6": true
    },
    "extends": "eslint:recommended",
    "rules": {
      "no-console": 0,
      "no-cond-assign": [2, 'always']
    }
};
It signaled:
Unexpected assignment within an 'if' statement  no-cond-assign
What did you expect to happen?
It should have ceased to analyze once in the callback of Array.prototype.some and should not care at all about any assignments within.  The purpose of the rule is to avoid mistakenly doing an assignment instead of a comparison within a conditional, not to prevent assignments at all.2G
(a063d4e0973301684905d52ad0d1939c3d85fead2016-08-22T23:33:33Z51504:≤
2016-08-15T15:09:14ZôI agree, this seems like a bug.
Are you willing/able to write a fix? (The answer can be no- we just like to make sure folks have a chance to contribute!):Â
2016-08-15T15:27:46ZÃNo, sorry, I'm afraid I wouldn't know where to start, not a clue.
I detected it because the code that worked fine with ESLint 2 started giving me this error when upgrading.  Since I was using the airbnb config I reported it there (airbnb/javascript#1007) since I tried the code sample above with the standard and eslint:recommended configs and had no problem with any of those.  The last comment on that issue pointed me to the the eslintrc config shown above.:A
2016-08-15T15:57:41Z)I can have a look. Give me a couple days.:Ö
2016-08-15T16:08:37ZÏ@Satyam Thanks very much, had to ask.
@pmcelhaney Thanks a lot, you rock. If you don't end up having time, please post back here so someone else knows they can start looking. (No pressure whatsoever, we just want to keep things moving.):‘
2016-08-15T16:21:01Zª@platinumazure Sure, I understand, no problem, thanks for asking. If I were to try a fix, I would simply bog things down.  I can't beat @pmcelhaney even if it takes twice as much. Thanks.:™
2016-08-15T17:37:34ZëTurns out it depends on how you have the rule configured.
This config considers your code invalid.
"no-cond-assign": [2, "always"]
These configs consider your code valid ("except-parens" is the default).
"no-cond-assign": [2, "except-parens"],
"no-cond-assign": 2
The existing unit tests actually enforce this difference, which I think is a mistake. The documentation doesn't say anything about what should happen if the condition is an inline function, and being inside a function is different from being wrapped in parentheses.:ˇ

2016-08-15T17:41:47ZÊ
I agree that we should always allow assignments inside the body of a
function, regardless of parentheses.
@pmcelhaney Are you saying that our parentheses check is also too loose? I
think only parentheses immediately inside the if condition parentheses
should count there, but if the function call parentheses are also
suppressing a lint warning, that's probably not good either.
Simple test case might be something like this: if (doSomething(foo = 5)) {}
If those parentheses are misbehaving, let's open a separate issue for that.
On Aug 15, 2016 10:37 AM, "Patrick McElhaney" notifications@github.com
wrote:

Turns out it depends on how you have the rule configured.
This config considers your code invalid.
"no-cond-assign": [2, "always"]
These configs consider your code valid ("except-parens" is the default).
"no-cond-assign": [2, "except-parens"],"no-cond-assign": 2
The existing unit tests actually enforce this difference, which I think is
a mistake. The documentation doesn't say anything about what should happen
if the condition is an inline function, and being inside a function is
different from being wrapped in parentheses.
‚Äî
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
#6908 (comment), or mute
the thread
https://github.com/notifications/unsubscribe-auth/AARWevHgk7XGU2K6PL-QpWGqb4-d7_obks5qgIe_gaJpZM4JkWZK
.:™
2016-08-15T17:53:16ZëThe two options are implemented with different algorithms. That's why this bug shows up in one case but not the other.
I just put if (doSomething(foo = 5)) {} into the valid tests and it passed. Not sure if my change fixed it. Should I go ahead and add that test to the PR?:¸
2016-08-15T18:02:32Z„No, I think that might be a separate issue. To me the spirit of the
"except-parens" option is that an assignment in redundant parentheses is
intentional. The argument list of a call expression, on the other hand,
must be surrounded by parentheses and so that test should not be valid. But
it is, so I think there's a separate issue there.
It also masked the original poster's test case (that is, OP's test case
does not show a lint error unless "always" is configured).
Sorry if I've confused the issue. Does this help at all?
On Aug 15, 2016 10:53 AM, "Patrick McElhaney" notifications@github.com
wrote:

The two options are implemented with different algorithms. That's why this
bug shows up in one case but not the other.
I just put if (doSomething(foo = 5)) {} into the valid tests and it
passed. Not sure if my change fixed it. Should I go ahead and add that test
to the PR?
‚Äî
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
#6908 (comment), or mute
the thread
https://github.com/notifications/unsubscribe-auth/AARWeixbAjzI3wOURekrZNb0mJLX0HTPks5qgIttgaJpZM4JkWZK
.: 
2016-08-15T18:03:16Z±@pmcelhaney That rule is exactly the one that the airbnb config has set: https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb-base/rules/errors.js#L7
The code doSomething(foo = 5) whether inside a conditional or not, should produce an error, but not under this rule.  Just like a programmer might have mistakenly used an assignment instead of a double or triple equal, the guy writing the above code might have confused the new ES6 default parameter value feature, which is valid for a function declaration but not function invocation.:ô
2016-08-15T18:05:23ZÄ@platinumazure I agree, the rule should accept clearly redundant sets of parenthesis, not others that might reasonably be there.:Ø
2016-08-15T19:17:38ZñI went ahead and added tests to clarify if(doSomething(foo = 5)) is not a violation of this rule.
When the rule looks at if (bar = doSomething(foo = 5)), it should see if (bar = [CallExpression]). It cares about the assignment to bar, but the assignment to foo is outside its purview.
As @Satyam said, the code doSomething(foo = 5) alone is suspect, but that should be covered by a new rule. no-arg-assign?:ç
2016-08-15T19:42:17ZÙApologies, I definitely introduced confusion.
I don't believe we should fix if (doSomething(a=5)) in this issue, either in terms of a no-arg-assign rule or in terms of deciding that (a=5) should or shouldn't be considered "parenthesized" for the "except-parens" option.
I would prefer to just check that

An assignment
Within a FunctionExpression
Within the test of an if statement or other conditional statement

Should not be flagged, simply because the assignment is in a different scope.
Can we keep this issue and any related PRs scoped to that approach? Please feel free to create a separate issue for any other problem that we've discussed in here.
Thanks for your understanding. Again, I apologize for my part in allowing the discussion to diverge.:d
2016-08-15T19:52:26ZLNo worries, I've updated the PR so that it only addresses the issue at hand.:i
2016-08-16T22:07:53ZQ@platinumazure you didn't mark this as accepted, have you verified this as a bug?:˜
2016-08-16T22:35:01ZﬁApologies @nzakas, I hadn't had time to verify until just now.
Here's a snippet that repros in the demo:
/* eslint no-cond-assign: ["error", "always"] */
if (arr.some(function (item) { item = 5; })) {
    doSomething();
}
As discussed earlier in the issue, there is a separate issue (parentheses being too zealously considered) that prevents this from showing up as a bug with the default "except-parens" configuration. But I believe we can accept this bug, unless you disagree.ß
÷Ò2015-05-15T18:56:58Z"2015-05-18T03:19:01Z*‚Linting fails on the ES6 JavaScript class A {} when using babel-eslint with the error:
A is already declared in the upper scope. (no-shadow)

A real world example can be see with react-bootstrap which this release is breaking.2I
(aee436061ab4781fbff878c60a19836bbd9019b22015-05-17T19:43:53Z3112159:B
2015-05-15T19:06:54Z*Was this working on the previous versions?:3
2015-05-15T19:07:11ZYes works fine with v0.21.0:ù
2015-05-15T19:18:16ZÑI think this rule never accounted for classes before. So basically it never threw any errors because it never checked for that.
Since with this PR #2527, we changed the strategy how this rule checked for scopes. I think now we need to account for classes also.:Ç
2015-05-15T19:20:37ZjIs there a chance that the change can be backed out until it can handle ES6 classes, or is it a quick fix?:π
2015-05-15T19:31:24Z†This fails without using babel at all:
jjia@jjia-mbp:~/tmp$ cat .eslintrc
{"env": {"es6": true}}
jjia@jjia-mbp:~/tmp$ cat test.js
class A {}
jjia@jjia-mbp:~/tmp$ eslint test.js

test.js
  1:6  error  A is already declared in the upper scope  no-shadow

‚úñ 1 problem (1 error, 0 warnings):*
2015-05-15T19:42:04ZI'll send in a PR.:=
2015-05-16T04:32:36Z%same here. Had to roll back to 0.21.0“k‰&2016-01-15T17:55:13Z"2016-01-18T02:48:12Z*Æ	With ESLint @ 86d64ca, it looks like the valid-jsdoc rule misses issues in documentation for function expressions.
The script.js below provides two invalid test cases (both the function declaration and the function expression have a typo in the @param name).
/* eslint valid-jsdoc: [2, {requireReturn: false}] */

// valid-jsdoc catches the typo below

/**
 * Check the param name.
 * @param {string} typoInTheName The param description.
 * @return {string} The return description.
 */
function foo(bar) {
  return bar;
}

// valid-jsdoc does not catch the typo below

check(
  /**
   * Check the param name.
   * @param {string} typoInTheName The param description.
   * @return {string} The return description.
   */
  function(bar) {
    return bar;
  });
Here's what I get running this through ESLint:
$ node bin/eslint.js --no-eslintrc script.js 

/Users/tschaub/projects/eslint/script.js
  5:1  error  Expected JSDoc for 'bar' but found 'typoInTheName'  valid-jsdoc

‚úñ 1 problem (1 error, 0 warnings)

Instead of 1 problem, I would expect two.  The valid-jsdoc rule correctly catches the typo in the @param name for the function declaration, but misses the same for the function expression.2G
(5cd5429b1f7f9de60bdbebe91621f1e91c83067f2016-01-18T02:32:11Z41094:ç
2016-01-15T18:07:59ZuIt looks like this is specific to a function expression in a call (or new) expression.  See #4965 for a proposed fix.:$
2016-01-15T18:49:05Z@gyandeeps ?:o
2016-01-15T18:56:59ZWSounds good to me. Not very common case I guess but I am fine with this recommendation.å
™¨2015-09-11T22:18:11Z"2015-09-15T20:42:15Z*ÄThe space-before-keywords rule (in ESLint 1.4.1) misrecognizes shorthand methods as keywords:
let x = {a() {}};
It claims a is a keyword and should be preceded by a space.
I want to not write spaces inside the parens in one-line blocks or arrays:
const a = [1, 2, 3];
const o = {a: 2, b: 3};
but I still want spaces after & before keywords:
if (x) {
  /* ... */
} else {
  /* ... */
}2G
(e6e07e4c89ac76b94c6b3f05c909b4dd0a1a1fbd2015-09-15T20:42:15Z38546:Ó
2015-09-11T22:18:11Z’Thanks for the issue! If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead

Requesting a new rule? Please see Proposing a New Rule for instructions.:ç
2015-09-11T23:38:47ZÙIt also returns a warning when using a class that extends an object:
class Foo extends Marionette.Object { }
Returns: Missing space before keyword "."
This is a somewhat related to your issue, so I added it here instead of creating a new issue.:ä
2015-09-12T08:18:59ZrUh oh, thanks for bringing these up! Looks like I've missed a couple special cases. I'll investigate this further.ŒC¥2015-09-03T02:42:27Z"2015-09-03T23:58:30Z*ÆRule quote-props using consistent-as-needed with keyword option enabled doesn't work as expected. As ESLint docs reflects, using eslint with the following code should return an error:
/*eslint quote-props: [2, "consistent-as-needed", {"keywords": true}]*/
var x = {
    while: 1,
    volatile: "foo"
};
But instead ESLint validation pass without errors.
I know how to implement the solution to this bug and I think I can fix it without problems. But first, following the advice of one of the mantainers of this repo, I've created this issue to let other people review it.
I'm using the latest(1.3.1) version of ESLint with only the configuration comment of the example as configuration.2I
(38f3db8fd0727e85e1c5d5367d5e797d1f6fe3252015-09-03T23:58:30Z1380062:‹
2015-09-03T02:42:37Z√Thanks for the issue! We get a lot of issues, so this message is automatically posted to each one to help you check that you've included all of the information we need to help you.
Reporting a bug? Please be sure to include:

The version of ESLint you are using (run eslint -v)
The source code that caused the problem
The configuration you're using (for the rule or your entire config file)
The actual ESLint output complete with line numbers

Requesting a new rule? Please be sure to include:

The use case for the rule - what is it trying to prevent or flag?
Whether the rule is trying to prevent an error or is purely stylistic
Why you believe this rule is generic enough to be included

Requesting a feature? Please be sure to include:

The problem you want to solve (don't mention the solution)
Your take on the correct solution to problem

Including this information in your issue helps us to triage it and get you a response as quickly as possible.
Thanks!:ø
2015-09-03T16:24:00Z¶The issue actually seems larger than that. consistent-as-needed doesn't warn when quotes are necessary at all. I'm refactoring the rule to make it use the same mechanism as as-needed but it's not as easy as I thought.
In the mean time, feel free to submit a PR if you think you have a solution.⁄l≥˜F2017-08-06T13:17:33Z"2017-08-07T17:21:38Z*ÎaTell us about your environment

ESLint Version: 4.4.0
Node Version: 8.1.4
npm Version: 4.6.1

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:

Configuration

{
    "parserOptions": {
        "ecmaVersion": 2017
    },
	"env": {
        "es6": true
    },
    "extends": "eslint:recommended",
    "globals": {
    },
    "plugins": [
    ],
    "rules": {
        // Possible Errors
		"for-direction": "error",
		"no-await-in-loop": "error",
        "no-console": "off",
        "no-debugger": "warn",
        "no-extra-boolean-cast": "warn",
		"no-extra-parens": "off",
		"no-unsafe-finally": "error",
		"no-prototype-builtins": "off",
		"no-template-curly-in-string": "error",
        "valid-jsdoc": ["warn", {
			"prefer": {
				"return": "returns",
				"argument": "param",
				"arg": "param",
				"constructor": "class",
				"virtual": "abstract"
			},
			"preferType": {
				"Boolean": "boolean",
				"Number": "number",
				"String": "string",
				"object": "Object",
				"array": "Array",
				"date": "Date"
			},
			"matchDescription": ".+",
            "requireParamDescription": true,
            "requireReturnDescription": true,
            "requireReturn": false,
			"requireReturnType": true
        }],

        // Best Practices
		"array-callback-return": "warn",
		"class-methods-use-this": "warn",
//		"complexity": ["warn", 60], !!!
        "consistent-return": "warn",
        "curly": ["error", "all"],
        "default-case": "error",
        "dot-notation": ["error", {"allowKeywords": true, "allowPattern": "^[a-zA-Z]+(_[a-zA-Z]+)+$"}],
        "eqeqeq": "error",
        "guard-for-in": "error",
        "no-alert": "off",
        "no-caller": "error",
        "no-case-declarations": "error",
        "no-div-regex": "error",
        "no-else-return": "warn",
        "no-empty-pattern": "warn",
        "no-eq-null": "error",
        "no-eval": "error",
        "no-extend-native": "error",
        "no-extra-bind": "error",
		"no-extra-label": "warn",
        "no-fallthrough": "warn",
        "no-floating-decimal": "error",
        "no-implicit-coercion": ["warn", {"boolean": true, "number": true, "string": true}],
		"no-implicit-globals": "off", // !!!
        "no-implied-eval": "error",
        "no-iterator": "error",
        "no-labels": ["error", {"allowLoop": false, "allowSwitch": false}],
        "no-lone-blocks": "off",
        "no-loop-func": "error",
        "no-magic-numbers": "off",
	"no-multi-spaces": ["warn", {"ignoreEOLComments": true}],
        "no-multi-str": "error",
        "no-native-reassign": "error",
        "no-new": "error",
        "no-new-func": "error",
        "no-new-wrappers": "error",
        "no-octal-escape": "error",
        "no-octal": "error",
        "no-process-env": "error",
        "no-proto": "error",
        "no-redeclare": "error",
		"no-restricted-globals": [
			"error",
			// event is globally available but causes problems when used (e.preventDefault()) in a jQuery callback
			// but has not been defined as a parameter to the callback
			"event",
			"jQuery"
		],
		"no-restricted-properties": [
			"error", {
				"object": "$",
				"property": "each",
				"message": "Use native es2015 forEach."
	        },
			{
				"object": "$",
				"property": "camelCase"
	        },
			{
				"object": "$",
				"property": "cookie"
	        },
			{
				"object": "$",
				"property": "error"
	        },
			{
				"object": "$",
				"property": "extend"
	        },
			{
				"object": "$",
				"property": "globalEval"
	        },
			{
				"object": "$",
				"property": "grep"
	        },
			{
				"object": "$",
				"property": "inArray"
	        },
			{
				"object": "$",
				"property": "isArray"
	        },
			{
				"object": "$",
				"property": "isEmptyObject"
	        },
			{
				"object": "$",
				"property": "isFunction"
	        },
			{
				"object": "$",
				"property": "isNumeric"
	        },
			{
				"object": "$",
				"property": "isPlainObject"
	        },
			{
				"object": "$",
				"property": "makeArray"
	        },
			{
				"object": "$",
				"property": "map",
				"message": "Use native es2015 map."
	        },
			{
				"object": "$",
				"property": "merge"
	        },
			{
				"object": "$",
				"property": "noop"
	        },
			{
				"object": "$",
				"property": "now"
	        },
			{
				"object": "$",
				"property": "parseJSON"
	        },
			{
				"object": "$",
				"property": "parseXML"
	        },
			{
				"object": "$",
				"property": "trim"
	        },
			{
				"object": "$",
				"property": "type"
	        },
			{
				"object": "$",
				"property": "proxy",
				"message": "Use native Function.bind."
	        },
			{
				"object": "$",
				"property": "when"
	        }
		],
        "no-return-assign": "error",
        "no-script-url": "error",
		"no-self-assign": "error",
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-throw-literal": "error",
		"no-unmodified-loop-condition": "warn",
        "no-unused-expressions": "error",
		"no-unused-labels": "error",
        "no-useless-call": "error",
        "no-useless-concat": "warn",
		"no-useless-return": "warn",
        "no-void": "error",
        "no-warning-comments": "off",
        "no-with": "error",
        "radix": "error",
        "vars-on-top": "error",
        "wrap-iife": ["error", "outside"],
        "yoda": ["error", "never", {"exceptRange": true}],

        // Strict Mode
        "strict": ["error", "global"],

        // Variables
        "no-catch-shadow": "error",
        "no-delete-var": "error",
        "no-label-var": "error",
        "no-shadow-restricted-names": "error",
        "no-shadow": ["warn", {"builtinGlobals": false}],
        "no-undef": "error",
        "no-undef-init": "error",
        "no-undefined": "warn",
        "no-unused-vars": ["warn", {"vars": "all", "args": "after-used"}],
        "no-use-before-define": ["error", "nofunc"],

        // Node.js and CommonJS
        "global-require": "warn",
        "handle-callback-err": "off", // !!!
		"no-buffer-constructor": "warn",
        "no-new-require": "warn",
        "no-path-concat": "warn",

        // Stylistic Issues
		"array-bracket-newline": "off", // !!!
        "array-bracket-spacing": ["warn", "never"],
        "block-spacing": ["warn", "never"],
        "brace-style": ["warn", "1tbs"],
        "camelcase": "warn",
        "comma-spacing": ["warn", {"before": false, "after": true}],
        "comma-style": ["warn", "last"],
        "computed-property-spacing": ["warn", "never"],
        "consistent-this": ["warn", "that"],
        "eol-last": "warn",
		"func-call-spacing": ["warn", "never"],
        "func-names": "off",
        "func-style": "off",
		"id-blacklist": "off",
        "id-length": "off",
        "id-match": "off",
        "indent": ["warn", "tab", {"SwitchCase": 1}],
        "jsx-quotes": "off",
        "key-spacing": ["warn", {"beforeColon": false, "afterColon": true}],
		"keyword-spacing": ["error", {"before": true, "after": true, "overrides": {}}],
        "linebreak-style": "off",
        "lines-around-comment": "off",
        "max-depth": ["warn", 10],
        "max-len":  ["warn", 2000],
//		"max-lines": ["warn", 300], !!!
        "max-nested-callbacks": ["warn", 10],
        "max-params": ["warn", 10],
        "max-statements": ["warn", 150],
		"max-statements-per-line": ["warn", {"max": 2}],
        "new-cap": "warn",
        "new-parens": "warn",
		"newline-per-chained-call": "off",
        "no-array-constructor": "warn",
		"no-bitwise": "warn",
        "no-continue": "warn",
        "no-inline-comments": "off",
        "no-lonely-if": "off",
        "no-mixed-spaces-and-tabs": "warn",
        "no-multiple-empty-lines": "off",
		"no-multi-assign": "warn",
        "no-negated-condition": "off",
        "no-nested-ternary": "warn",
        "no-new-object": "warn",
		"no-plusplus": "off",
        "no-restricted-syntax": ["warn", "WithStatement"],
        "no-ternary": "off",
        "no-trailing-spaces": "warn",
        "no-underscore-dangle": "off",
        "no-unneeded-ternary": "warn",
		"no-whitespace-before-property": "off",
//		"object-curly-newline": ["warn", {"multiline": true}], !!!
        "object-curly-spacing": ["warn", "never"],
		"one-var-declaration-per-line": "off",
        "operator-assignment": "off",
        "operator-linebreak": ["warn", "after", {"overrides": {"?": "ignore", ":": "ignore"}}],
        "padded-blocks": "off",
		"padding-line-between-statements": ["warn",
			// require blank lines before all return statements
			//{"blankLine": "always", "prev": "*", "next": "return"},
			//  require blank lines after every sequence of variable declarations
//			{"blankLine": "always", "prev": ["const", "let", "var"], "next": "*"},
//			{"blankLine": "any",    "prev": ["const", "let", "var"], "next": ["const", "let", "var"]},
			//  switch/case
//			{"blankLine": "always", "prev": ["*"], "next": "case"},
//			{"blankLine": "any",    "prev": ["switch"], "next": ["case"]},
//			{"blankLine": "always", "prev": ["*"], "next": "default"},
//			{"blankLine": "any",    "prev": ["switch"], "next": ["default"]},
			// require blank lines after all directive prologues
			{"blankLine": "always", "prev": "directive", "next": "*"},
			{"blankLine": "any",    "prev": "directive", "next": "directive"}
		],
        "quote-props": ["warn", "consistent"],
        "quotes": ["warn", "single", "avoid-escape"],
        "require-jsdoc": "off",
        "semi": ["warn", "always"],
        "semi-spacing": ["warn", {"before": false, "after": true}],
		"semi-style": ["error", "last"],
		"sort-imports": "off",
        "sort-vars": "off",
        "space-before-blocks": "warn",
        "space-before-function-paren": ["warn", {"anonymous": "always", "named": "never"}],
        "spaced-comment": ["off", "always"],
		"switch-colon-spacing": ["error", {"after": true, "before": false}],
		"unicode-bom": ["error", "never"],
        "wrap-regex": "off",

        // ECMAScript 6
        "arrow-body-style": ["error", "as-needed"],
        "arrow-parens": ["warn", "always"],
        "arrow-spacing": ["warn", {"before": true, "after": true}],
        "constructor-super": "error",
        "generator-star-spacing": ["warn", {"before": true, "after": false}],
        "no-class-assign": "error",
        "no-confusing-arrow": "error",
        "no-const-assign": "error",
        "no-dupe-class-members": "error",
		"no-duplicate-imports":  "error",
        "no-new-symbol": "error",
        "no-this-before-super": "error",
        "no-useless-constructor": "error",
		"no-useless-computed-key": "warn",
		"no-useless-rename": "warn",
        "no-var": "error",
        "object-shorthand": "off",
        "prefer-arrow-callback": "off",
		"prefer-const": "warn",
        "prefer-reflect": "off",
        "prefer-rest-params": "off",
        "prefer-spread": "off",
        "prefer-template": "off",
        "require-yield": "error",
        "template-curly-spacing": "error",
        "yield-star-spacing": "error"
    }
}

What did you do? Please include the actual source code causing the issue.

...
const jd = json.data;

formObject.setValue(BEC.BLANKLINESBEFORE,<tabs>jd.blankLinesBefore);
formObject.setValue(BEC.BLANKLINESAFTER,<tabs>jd.blankLinesAfter);
formObject.setValue(BEC.BREAKBEFORE,<tabs>jd.pageBreakBefore);
formObject.setValue(BEC.BREAKAFTER,<tabs>jd.pageBreakAfter);
...
What did you expect to happen?
In previous versions to eslint 4.4.0 the above example did not report a warning when aligning the second arguments in the setValue function calls. In eslint 4.4.0 a warning is reported and I see no way to exclude this very common use case from being reported.
What actually happened? Please include the actual, raw output from ESLint.
warning: Multiple spaces found before 'jd' (no-multi-spaces) at src\modules\las_mod_positions\formHelper.js:654:47:
  652 |                 const jd = json.data;
  653 |
> 654 |                 formObject.setValue(BEC.BLANKLINESBEFORE,                       jd.blankLinesBefore);
      |                                                                                 ^
  655 |                 formObject.setValue(BEC.BLANKLINESAFTER,                        jd.blankLinesAfter);
  656 |                 formObject.setValue(BEC.BREAKBEFORE,                            jd.pageBreakBefore);
  657 |                 formObject.setValue(BEC.BREAKAFTER,                                     jd.pageBreakAfter);2J
(ec936149140c1b1cf1558488413bd5b6c9fe9e042017-08-07T17:21:29Z11638619:ò
2017-08-06T22:24:22ZˇThanks for the report. I'm a bit confused by your example -- it seems to have a ^ character in the middle which is invalid syntax, and each individual line also gets reported by the rule when using ESLint v4.3.0.
The no-multi-spaces rule was refactored in v4.4.0, so it's plausible that something accidentally changed in this version, but I don't see that based on your example code.:∞
2017-08-07T06:54:46Zó@not-an-aardvark The ^ character you mention is in the output of eslint and not in the source code and indicates where eslint found the offensive code. It is my understanding, that the no-multi-spaces  rule in eslint 4.4.0 no longer allows multiple tabs when aligning the arguments in the function calls. This might be an intended change but no longer allows a very common pattern to format the source code.:Û
2017-08-07T06:57:36Z⁄To clarify, I meant the ^ character in the "Please include the actual source code" section, not the "output from ESLint" section. At the moment, it seems like your source code example only contains spaces and not tabs.:ß
2017-08-07T07:29:24Zé@not-an-aardvark You are right and I overlooked my copy&paste error. I just updated the source and used <tabs> to indicate where the tabs are.Ÿ)ÈG2017-09-01T08:29:15Z"2017-09-01T23:55:27Z*˛
eslint-plugin-eslint-comments is a plugin created by @mysticatea to solve the issue in #6190 of linting for unused /* eslint-disable */ comments. Since ESLint rules aren't supposed to be aware of other rules, a plugin like this technically isn't supposed to be possible. However it was successfully implemented by monkeypatching a private API context.eslint.report), and has been useful to a lot of people for avoiding unused disable comments.
I just realized that eslint-plugin-eslint-comments will be broken in v4.6.0 as a result of d672aef, which refactors ESLint's internal reporting logic and removes the private API that was being monkeypatched. With the current version of ESLint on master, it is no longer possible to implement something like eslint-plugin-eslint-comments, because context objects in rules don't have a reference to the underlying Linter instance anymore. We explicitly don't make any guarantees about the stability of undocumented APIs, but it would still be nice to avoid breaking peoples' linting builds if possible.
So we have a few things to consider:

Should we revert d672aef for now?
Should we reconsider adding a core feature to warn on unused disable comments? Personally, I don't think using a plugin for this is a good solution in the long-term, because it breaks the boundaries between rules and prevents us from refactoring internal APIs.

cc @ilyavolodin @mysticatea2J
(1bbac511548c5bda166b093b57a50ba997d461382017-09-01T23:55:22Z11638619:œ
2017-09-01T08:49:38Z∂Thank you for this issue.
It was a bad thing that I'm using the internal API. But it's helpful to developers if they can know unused directive comments because the remaining directive comments can hide reports unintentionally in future.
I'm glad if I can maintain eslint-plugin-eslint-comments with public API.:ç
2017-09-01T09:17:36ZÙI agree. For now, I think maybe it would be best to revert d672aef until we have a better way to lint for unused directive comments.
I tried to update eslint-plugin-eslint-comments to use the public API by loading rules and running them within the plugin, but I don't think it's possible to make it fully work right now without accessing context.eslint/context._linter. It can check comments like // eslint-disable-line no-undef by running the no-undef rule separately, but it can't check comments like // eslint-disable-line that apply to all rules, because it doesn't know which rules are enabled.
In the long term, I think the best solution would be to check for unused directive comments in core, using something similar to what was discussed in #6190.:¿
2017-09-01T15:23:41ZßShould we revert d672aef for now?

I'm happy if we revert d672aef to keep detectable for unused directive comments.

Should we reconsider adding a core feature to warn on unused disable comments? Personally, I don't think using a plugin for this is a good solution in the long-term, because it breaks the boundaries between rules and prevents us from refactoring internal APIs.

Yes, I think.
However, in my experience, a rule to warn unused disable comments was good. It tells me the unused disable comments in real-time on editors. Also, it can stop CI builds. It's configurable with .eslintrc.
There are best practices around directive comments (e.g. specify a rule to disable), so I thought reasonable that eslint-plugin-eslint-comments plugin aggregates rules to enforce the best practices.
If..., I understand that it's opposite of ESLint philosophy, but if a public API to catch reports from other rules, it's useful. For example:
exports.create = (context) => {
    return {
        onReport(report) {
            console.log(report.ruleId, report.message, report.node, report.line, report.column)

            // Cancel the report to return false.
            return false
        }
    }
}
This is a generalized system of context.markVariableAsUsed(node).
The context.markVariableAsUsed(node) API cancels some reports of no-unused-vars rule. But onReport handler has more controllability. react/jsx-uses-vars, eslint-comments/no-unused-disable, and node/this-in-event-handlers will be feasible with the API. Possibly, also overwriting of a part of indentation rule.:k
2017-09-01T21:43:48ZSAll of the eslint-plugin-eslint-comments tests pass after applying #9195 and #9196.:∆
2017-09-01T21:51:14Z≠For node/this-in-event-handlers, I think it would be best to use rule composition. For example:
module.exports = {
    create(context) {
        const eslint = require("eslint");
        const linter = new eslint.Linter();

        linter.verify(context.getSourceCode(), { rules: { "no-invalid-this": "error" } })
            .filter(problem => !isInEventHandler(problem))
            .forEach(problem => {
                context.report({ message: problem.message, loc: { line: problem.line, column: problem.column - 1 });
            });
        });
    }
};
Then users could easily use node/no-invalid-this as a replacement for no-invalid-this and eslint-plugin-node wouldn't need to copy the logic from no-invalid-this.
To avoid needing to do another traversal, maybe it would be possible to extract the listeners manually and call them as part of the node/no-invalid-this listeners, then filter out reports in the Program:exit listener.•KÎG2017-09-01T21:20:51Z"2017-09-01T23:52:56Z*º
What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix



Tell us about your environment

ESLint Version: master
Node Version: 8.4.0
npm Version: 5.3.0

What parser (default, Babel-ESLint, etc.) are you using?
N/A
Please show your full configuration:
N/A
What did you do? Please include the actual source code causing the issue.
const eslint = require("eslint");
const linter = new eslint.Linter();

linter.defineRule("checker", context => ({
    Program() {
        context.report({ loc: { line: 1, column: 0 }, message: "foo" });
    }
}));

linter.verify(" /* eslint-disable */", { rules: { checker: "error" } });
What did you expect to happen?
I expected an error to be reported, because the report location is before the start of the eslint-disable comment.
What actually happened? Please include the actual, raw output from ESLint.
No error was reported. An empty array was returned.
What changes did you make? (Give an overview)
This updates isDisabledByReportingConfig in Linter to fix an off-by-one error introduced in d672aef. isDisabledByReportingConfig is now accepting locations with 1-based columns rather than 0-based columns, so it needs to offset them appropriately when comparing them against comments with 0-based columns.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(3e8b70a44cf8cf5d914682980ca13f6140f2bdde2017-09-01T23:52:55Z11638619:
2017-09-01T21:20:52ZLGTM:»
2017-09-01T21:20:56ZØ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @alberto, @mysticatea and @gyandeeps to be potential reviewers.æÏG2017-09-01T21:40:12Z"2017-09-01T23:55:22Z*†What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#9193)



What changes did you make? (Give an overview)
This provides a fix for #9193 so that libraries like eslint-plugin-eslint-comments will still work.
Rather than reverting d672aef and 1be5634, this tries to provide the minimum possible legacy behavior to make eslint-plugin-eslint-comments and eslint-plugin-github work, without giving rules full access to the linter instance again.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(1bbac511548c5bda166b093b57a50ba997d461382017-09-01T23:55:22Z11638619:
2017-09-01T21:40:13ZLGTM«»ı2015-06-03T20:43:00Z"2015-06-05T18:23:32Z*ÓDocs say "By default an empty line is required above a block comment" that means option beforeBlockComment is true. But based on the code its not true. https://github.com/eslint/eslint/blob/master/lib/rules/lines-around-comment.js#L58-L622I
(fae4be834dfa220f635cf8cdf04de5ec1abea8482015-06-04T04:58:35Z5554486:V
2015-06-03T20:49:04Z>Question is: is the documentation wrong? Or is the rule wrong?:K
2015-06-03T20:50:54Z3@xjamundx Any idea what part is wrong code or docs?:2
2015-06-03T20:53:01ZI think the code is wrong.Ó–2015-08-14T16:10:22Z"2015-08-14T20:20:31Z*íIn EcmaScript after the case token there can be any valid expression,
in particular this switch was raising a false no duplicate case positive:
switch(['a','b'].toString()){
  case (['a','b']).toString():
    console.log('right');
    break
  case (['a']).toString():
    console.log('not right');
    break
}    

in this case is because the getHash function does not handle ArrayExpression nodes;
the if else cascade exit without matching, so the function returns undefined.
This happens for every node types that isn't checked.2G
(18d39233ebfd5bb6a15af3d226dee88de787c0d92015-08-14T16:11:29Z87300:‹
2015-08-14T16:10:38Z√Thanks for the issue! We get a lot of issues, so this message is automatically posted to each one to help you check that you've included all of the information we need to help you.
Reporting a bug? Please be sure to include:

The version of ESLint you are using (run eslint -v)
The source code that caused the problem
The configuration you're using (for the rule or your entire config file)
The actual ESLint output complete with line numbers

Requesting a new rule? Please be sure to include:

The use case for the rule - what is it trying to prevent or flag?
Whether the rule is trying to prevent an error or is purely stylistic
Why you believe this rule is generic enough to be included

Requesting a feature? Please be sure to include:

The problem you want to solve (don't mention the solution)
Your take on the correct solution to problem

Including this information in your issue helps us to triage it and get you a response as quickly as possible.
Thanks!±"$à$2015-12-06T02:07:53Z"2016-09-03T17:52:29Z*´I was working on fix for #4370 and I got very confused by the logic of this rule. Fix itself is easy to add, but I don't understand how some of the unittests are passing and I also don't understand what detectObjects supposed to do. detectObjects is very poorly tested and doesn't have a single valid test case. It's also clearly incorrect (as it will ignore any number who's parent has a type of AssignmentExpression which is the whole point of this rule). Can somebody explain what detectObjects supposed to do and why are the following unit tests passing:
https://github.com/eslint/eslint/blob/master/tests/lib/rules/no-magic-numbers.js#L34
https://github.com/eslint/eslint/blob/master/tests/lib/rules/no-magic-numbers.js#L38
https://github.com/eslint/eslint/blob/master/tests/lib/rules/no-magic-numbers.js#L45
https://github.com/eslint/eslint/blob/master/tests/lib/rules/no-magic-numbers.js#L60
https://github.com/eslint/eslint/blob/master/tests/lib/rules/no-magic-numbers.js#L63

Want to back this issue? Post a bounty on it! We accept bounties via Bountysource.2J
(22c7e09c167a98da07ec6968e2b57d4c2cba345e2016-09-03T17:52:27Z11638619:Œ
2015-12-06T04:03:30ZµI'm going to take a wild guess here about why those tests are passing, but I have no real insider knowledge here.  I don't think the point of the rule is to avoid assigning numbers to variables.  In fact, the point of the rule is to force numbers to be assigned to variables, rather than be used directly in expressions throughout the code.  I don't know what detectObjects is for, but I haven't actually looked at the code either.

I think const foo = 42; has to pass because it is assigning to a const, presumably in order to avoid using the 42 later on in the code (thus avoiding a magic number).
The same goes for the next test, because enforceConst is false.
"var foo = -42;" passes because the es6 environment is not enabled, so it's not possible to use a const.
var min, max, mean; min = 1; max = 10; mean = 4; seems to be testing assignment after declaration.
var foo = { bar:10 } looks to be checking assignment inside of an object literal.:À
2015-12-06T05:51:57Z≤Ok, you are absolutely right about those tests. I lost the forest behind the trees, and it makes sense that assigning value to a variable should pass. So those unittests are passing correctly. Based on the code, however, I'm not sure why is var min, max, mean; min = 1; max = 10; mean = 4; passing, since the exception is made for VariableDeclarator and not for AssignmentExpression.
As far as I understand from the code detectObjects supposed to not flag following expressions var a = {}; a.9 = 'test' and var a = { 9: 'test' }. First one, however, is illegal syntax, and will not even parse, second one should be so incredibly rare, that I'm not sure what would be the point of creating a separate option for it. In the current implementation if detectObjects is on, it will also stop flagging any magic numbers in AssignmentExpression, which is very strange, since it will stop flagging them even if they are outside of the object declaration.:/
2015-12-06T17:41:22Z@kombucha any insights?:™
2015-12-08T21:31:20ZëThese seem like they shouldn't be valid:
var min, max, mean; min = 1; max = 10; mean = 4;

var a = {}; a[9] = 'test';
The intent of detectObjects was to toggle allowing this:
var foo = {
    bar: 5
};
I agree, this is confusing. We should figure out a way to clean this up.::
2016-03-23T00:05:45Z"@ilyavolodin any followup on this?:—
2016-03-23T00:40:15Z∏I'm not really sure what to do about those issues. I didn't participate in the original discussion and don't know the reasoning behind some of the decisions for this rule. Since we are not getting any response from the author, I think we basically have to re-write this rule and clean-up documentation and tests.:Ï
2016-04-22T01:23:19Z”What do we want to do here?
var a = {}; a[9] = 'test';

This is not a valid test case, @ilyavolodin I think you might have gotten the behaviour backwards. @nzakas example is the correct one of what this is supposed to flag.
So, I think the only issue is if we want this rule to flag or not:
var min, max, mean; min = 1; max = 10; mean = 4;:&
2016-04-22T21:40:19ZI think we do.:6
2016-08-02T02:05:52ZAccepting this as a bug, then.:(
2016-08-31T20:35:38ZWorking on this.Ç}π2015-09-12T18:34:47Z"2015-09-16T18:58:04Z*“I'm using eslint 1.4.1, when I define these two rules as below:
"space-before-blocks": 0,
"arrow-spacing": 2
It looks like the first rult overwrites the 2nd, so:
let done = () => { // fails (1)
  // ...
}

if(isResolved){ // pass (2)
  done();
}

Ideal: it should accept the case 1 as correct because the the second rule is being applied.2I
(6ec1dbb9ff9268e792a17d22b07aa04770bcc0642015-09-16T13:35:20Z1937871:Ó
2015-09-12T18:34:48Z’Thanks for the issue! If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead

Requesting a new rule? Please see Proposing a New Rule for instructions.:I
2015-09-12T18:38:35Z1can you please share the exact out put of eslint?:–
2015-09-12T19:14:39Z∑@gyandeeps
At first, let me correct the rule I'm using:
"arrow-spacing": 2, 
"space-before-blocks": [2, "never"]

The result looks like this screenshot (as you can see, the lines 21, 26, 27... are passed)

The first rule added because I like to see:
  let done = () => {

  }

more than:
  let done = ()=>{

  }

The second rule added because I always write:
    for(let k in data){
      if(hasProperty(data, k)){
        // something else
      }
    }

Instead of:
    for (let k in data) {
      if (hasProperty(data, k)) {
        // something else
      }
    }:}
2015-09-13T16:26:05ZeWould it make sense for space-before-blocks to warn only when the preceding token is a closing paren?:6
2015-09-13T18:23:59Z@btmills üëç yes, I think so.:†
2015-09-13T22:47:33ZáWould it make sense for space-before-blocks to warn only when the preceding token is a closing paren?

This would break the else{ case.:Ä
2015-09-13T23:10:41ZÁelse is handled by space-before-blocks.
See #1338 (comment) - else{ is covered right now by space-after-keywords and space-before-blocks. I elaborate more in that comment, but my earlier suggestion could solve both of these issues.:W
2015-09-14T18:14:00Z?We can just skip if the block is the body of an arrow function.:,
2015-09-16T12:47:54ZI will work on this.:m
2015-09-16T16:55:34ZU@mysticatea : how to get this new feature? I've updated to 1.4.3 and nothing changes.:|
2015-09-16T20:45:00Zd@ndaidong It was just merged in, you need to wait for next release for this feature to be available.:O
2015-09-17T03:42:40Z7@ilyavolodin üëç got it, thank you for your hard work.Ö	”Õ2015-09-05T05:31:02Z"2015-09-05T16:45:12Z*–Using ESLint 1.3.1 on this code
const someFunction = function (argument) {
        console.log(argument);
    },
    someValue = 'someValue';

const someOtherFunction = argument => {
        console.log(argument);
    },
    someOtherValue = 'someOtherValue';

export {
    someFunction,
    someOtherFunction,
    someOtherValue,
    someValue
};

with this .eslintrc
{
    "ecmaFeatures": {
        "arrowFunctions": true,
        "blockBindings": true,
        "modules": true
    },
    "root": true,
    "rules": {
        "indent": [
            2,
            4,
            {
                "SwitchCase": 1,
                "VariableDeclarator": 1
            }
        ]
    }
}

outputs
  7:9  error  Expected indentation of 4 space characters but found 8  indent
  8:5  error  Expected indentation of 0 space characters but found 4  indent

‚úñ 2 problems (2 errors, 0 warnings)

I expected regular functions and arrow functions to have the same indentation rules.2H
(ad9b0dc1b23e63fa3025c0e334ab4090b192585f2015-09-05T14:02:03Z126780:4
2015-09-05T13:57:18ZLooks like an inconsistency.éÏ˚F2017-08-07T02:38:22Z"2017-08-10T00:02:43Z*ò
Tell us about your environment

ESLint Version: 4.4.0
Node Version: 6.10.3
npm Version: 3.10.10

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:

Configuration
module.exports = {
  env: {
    es6: true,
  },
  rules: {
    indent: ['error', 2, {
      CallExpression: {
        arguments: 'off',
      },
    }],
  },
};

What did you do? Please include the actual source code causing the issue.
This is a reduced test case showing the issue:
a(`b
c`, function() {
  d;
});
What did you expect to happen?
Ideally no error, but if there is an error, it should be sensible.
What actually happened? Please include the actual, raw output from ESLint.
eslint gives this error:
3:1  error  Expected indentation of NaN spaces but found 2  indent

Running eslint --fix treats NaN as 0 and removes all indentation from all affected lines.
Changing the multiline string to a single-line string fixes the issue, and removing arguments: 'off' in the config also fixes the issue.
Context:
This type of code came up when converting multiline strings from CoffeeScript (example), and it appears a number of times in my codebase. A workaround is to rewrite the multiline strings as single-line strings, but certainly would be nice for this to be fixed within eslint.2J
(bd09cd50283760b57949802c55a6e2b5862c6d152017-08-10T00:02:34Z11638619:~
2017-08-07T02:41:45ZfThis certainly does seem like a bug.
@not-an-aardvark Maybe you might have some insight into this one?:Ú
2017-08-07T02:51:27ZŸAnother example with the same config:
a(
  new B({
    c,
  })
);
Gives this error:
  3:1  error  Expected indentation of NaN spaces but found 4  indent
  4:1  error  Expected indentation of NaN spaces but found 2  indent

Edit: another case, even simpler:
a(b
  , c);

Error:
  2:1  error  Expected indentation of NaN spaces but found 2  indentÒ≥ˇF2017-08-07T08:48:22Z"2017-08-07T17:21:30Z*≥What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#9079)



What changes did you make? (Give an overview)
An unintended side-effect of the refactor in 0f97279 caused no-multi-spaces to start reporting any consecutive whitespace characters between tokens, rather than just reporting consecutive spaces. This commit fixes the rule to only report consecutive spaces.
To be honest, reporting any consecutive whitespace seems like it would also be a reasonable behavior -- I'm not really convinced that it's better for the rule to only report spaces. But that would be a semver-major change.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(ec936149140c1b1cf1558488413bd5b6c9fe9e042017-08-07T17:21:29Z11638619:
2017-08-07T08:48:23ZLGTM:«
2017-08-07T08:48:24ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @alberto, @nzakas and @vegetableman to be potential reviewers.:ã
2017-08-07T16:52:40ZÚTo be honest, reporting any consecutive whitespace seems like it would also be a reasonable behavior -- I'm not really convinced that it's better for the rule to only report spaces. But that would be a semver-major change.

I agree with this.:±
2017-08-07T17:07:01ZòTo be honest, reporting any consecutive whitespace seems like it would also be a reasonable behavior -- I'm not really convinced that it's better for the rule to only report spaces. But that would be a semver-major change.

Totally agree. I think we should make an issue for this.:ê
2017-08-07T17:25:25Z˜To be honest, reporting any consecutive whitespace seems like it would also be a reasonable behavior -- I'm not really convinced that it's better for the rule to only report spaces. But that would be a semver-major change.

Could this be done behind an option to allow for semver-minor release and let people opt into it, and then switch the option default in a semver-major?§
Ï˝F2017-08-07T04:13:52Z"2017-08-10T00:02:34Z*æWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#9083)



What changes did you make? (Give an overview)
This fixes an issue where the indent rule would sometimes expect "NaN spaces" of indentation when an "off" option was used. The value "off" was incorrectly getting used as a numeric offset, so it was cast to a number, resulting in NaN.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(bd09cd50283760b57949802c55a6e2b5862c6d152017-08-10T00:02:34Z11638619:
2017-08-07T04:13:53ZLGTM:«
2017-08-07T04:14:03ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @gyandeeps and @valorkin to be potential reviewers.:˙
2017-08-07T04:25:37Z·Looks like we can mark this as a fix:?

Technically no, because the following code was previously considered valid and is now reported. This makes the change semver-minor.
/* eslint indent: [error, 2, {CallExpression: {arguments: off}}] */
a(b
, c);
This issue has existed since v4.0.0-alpha.0, so in my opinion the fix doesn't need to urgently go into a patch release. (Alternatively, if we want to get this released sooner we could always do another minor release with bugfixes.)¬úú#2015-11-21T21:56:53Z"2015-11-23T05:32:57Z*Ì
ESLint 1.10.1 fails on this code:
const foo = new (Foo({dummy: true}))
Version 1.9.0 works correctly and parses the code without any problems.
Stack trace:
/Users/xeed/js/elevatehd-web/node_modules/eslint/lib/rules/no-spaced-func.js:31
        while (parenToken.value !== "(") {
                         ^

TypeError: Cannot read property 'value' of undefined
    at EventEmitter.detectOpenSpaces (/Users/xeed/js/elevatehd-web/node_modules/eslint/lib/rules/no-spaced-func.js:31:26)
    at emitOne (events.js:82:20)
    at EventEmitter.emit (events.js:169:7)
    at NodeEventGenerator.enterNode (/Users/xeed/js/elevatehd-web/node_modules/eslint/lib/util/node-event-generator.js:42:22)
    at CommentEventGenerator.enterNode (/Users/xeed/js/elevatehd-web/node_modules/eslint/lib/util/comment-event-generator.js:98:23)
    at Controller.controller.traverse.enter (/Users/xeed/js/elevatehd-web/node_modules/eslint/lib/eslint.js:767:36)
    at Controller.__execute (/Users/xeed/js/elevatehd-web/node_modules/estraverse/estraverse.js:397:31)
    at Controller.traverse (/Users/xeed/js/elevatehd-web/node_modules/estraverse/estraverse.js:495:28)
    at EventEmitter.module.exports.api.verify (/Users/xeed/js/elevatehd-web/node_modules/eslint/lib/eslint.js:764:24)
    at processText (/Users/xeed/js/elevatehd-web/node_modules/eslint/lib/cli-engine.js:230:27)

Node version: 4.2.1
Thanks for help!2I
(828f4cb39d8c6b175e26a924f1f49f29abffda222015-11-23T03:17:20Z1937871:Ù
2015-11-21T21:56:53Z€@XeeD Thanks for the issue! If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead

Requesting a new rule? Please see Proposing a New Rule for instructions.:a
2015-11-21T22:22:07ZILooks like this might be a regression. @mysticatea could you take a look?:;
2015-11-22T23:46:48Z#Oh, I'm sorry.
I'm working on this.:<
2015-11-23T08:36:48Z$@ilyavolodin @mysticatea  Thank you!Ÿ„…
2014-10-08T07:48:20Z"2014-10-10T19:56:45Z*∞The following example throws an exception:
var foo = "foo";
var bar = true;
switch (foo) {
    case "foo":
        if (bar) {
            bar = false;
            //do something
        } else {
            break;
        }
        // falls through
    default:
        //do something
}

Although the comment "falls though" is used, because it is expected that the default case is exceuted in a special case, an exception is thrown.2H
(b8793d9cdba4b1e77e0e5aaa9e565aa735ac1d422014-10-10T12:51:15Z169170:ã
2014-10-08T18:08:31ZsJust so we're clear, can you paste in the console output you're seeing? Also, what version of ESLint are you using?:y
2014-10-08T21:28:24ZaVersion 0.8.2
test.js
  4:4  error  Expected a "break" statement before "default"  no-fallthrough:à
2014-10-09T17:59:13ZÔI've tried the following two test cases:
switch (foo) { case 0: a(); /* falls through */ default: /* do nothing */}
switch (foo) { case 0: a(); /* falls through */ default: b();/* do something */}
The first one fails, the second doesn‚Äôt.:f
2014-10-09T18:38:36ZNInteresting, so it has something to do with the body of the default statement?:¬
2014-10-09T18:53:11Z©I just tested it again, because I have no empty default block. This was just for testing but caused the same error.
My actual error occurs because of a comment after the default:
switch (foo) {
    case "foo":
        a();
        // falls through
    default: //do the default case
        b();
}:g
2014-10-10T12:38:26ZOThe problem is the leading comment within the default statement.
Working on it.Ê/Ñœ,2016-03-28T23:25:04Z"2016-04-01T19:34:53Z*ﬂ What version of ESLint are you using?
2.5.3
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
{
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module"
  },
  "env": {
    "node": true,
    "es6": true
  },
  "rules": {
    "strict": [2, "global"],

    "no-var": 0,
    "prefer-const": 0,

    // variables
    "no-shadow": [2, {
      "builtinGlobals": true
    }],
    "no-shadow-restricted-names": 2,
    "no-unused-vars": [2, {
      "vars": "all",
      "args": "after-used"
    }],
    "no-use-before-define": [2, {
      "functions": false
    }],

    // expressions
    "no-unused-expressions": 2,

    // possible errors
    "comma-dangle": [2, "always-multiline"],
    "no-cond-assign": [2, "except-parens"],
    "no-console": [2, {
      "allow": ["error", "warn", "info", "dir"]
    }],
    "no-debugger": 2,
    "no-alert": 1,
    "no-constant-condition": 2,
    "no-dupe-keys": 2,
    "no-duplicate-case": 2,
    "no-empty": 2,
    "no-ex-assign": 2,
    "no-extra-boolean-cast": 2,
    "no-extra-semi": 2,
    "no-func-assign": 2,
    "no-inner-declarations": 2,
    "no-invalid-regexp": 2,
    "no-irregular-whitespace": 2,
    "no-obj-calls": 2,
    "no-reserved-keys": 0,
    "no-sparse-arrays": 2,
    "no-unreachable": 2,
    "use-isnan": 2,
    "block-scoped-var": 2,

    // best practices
    "consistent-return": 2,
    "curly": [2, "all"],
    "default-case": 0,
    "dot-notation": [2, {
      "allowKeywords": true
    }],
    "eqeqeq": 0,
    "guard-for-in": 2,
    "no-caller": 2,
    "no-else-return": 2,
    "no-eq-null": 0,
    "no-eval": 2,
    "no-extend-native": 2,
    "no-extra-bind": 2,
    "no-fallthrough": 2,
    "no-floating-decimal": 2,
    "no-implied-eval": 2,
    "no-lone-blocks": 2,
    "no-loop-func": 2,
    "no-multi-str": 2,
    "no-native-reassign": 2,
    "no-new": 2,
    "no-new-func": 2,
    "no-new-wrappers": 2,
    "no-octal": 2,
    "no-octal-escape": 2,
    "no-param-reassign": 2,
    "no-proto": 2,
    "no-redeclare": 2,
    "no-return-assign": [2, "except-parens"],
    "no-script-url": 2,
    "no-self-compare": 2,
    "no-sequences": 2,
    "no-throw-literal": 2,
    "no-with": 2,
    "radix": 2,
    "vars-on-top": 2,
    "wrap-iife": [2, "inside"],
    "yoda": 2,

    // style
    "indent": [2, 2],
    "brace-style": [2, "1tbs", {
      "allowSingleLine": true
    }],
    "quotes": [2, "single"],
    "camelcase": [2, {
    "properties": "always"
    }],
    "comma-spacing": [2, {
      "before": false,
      "after": true
    }],
    "comma-style": [2, "last"],
    "eol-last": 2,
    "func-names": 2,
    "key-spacing": [2, {
        "beforeColon": false,
        "afterColon": true
    }],
    "new-cap": [2, {
      "newIsCap": true
    }],
    "no-multiple-empty-lines": [2, {
      "max": 1
    }],
    "no-nested-ternary": 2,
    "no-new-object": 2,
    "no-spaced-func": 2,
    "no-trailing-spaces": 2,
    "no-extra-parens": [2, "all", {
      "conditionalAssign": false
    }],
    "no-underscore-dangle": 0,
    "one-var": [2, "never"],
    "padded-blocks": [2, "never"],
    "semi": [2, "always"],
    "semi-spacing": [2, {
      "before": false,
      "after": true
    }],
    "keyword-spacing": [2, {
      "before": true,
      "after": true
    }],
    "space-before-blocks": 2,
    "space-before-function-paren": [2, "never"],
    "space-infix-ops": 2,
    "spaced-comment": [2, "always"],
  }
}
What did you do? Please include the actual source code causing the issue.
// test.js
export var a;
var b;
What did you expect to happen?
I wouldn't expect the vars-on-top rule to error because even though one of the variables is exported, they are still all defined at the top of the file.
What actually happened? Please include the actual, raw output from ESLint.
/home/olmo/projects/atom/tree-view-git-branch/test.js
  1:8  error  All 'var' declarations must be at the top of the function scope  vars-on-top
  2:1  error  All 'var' declarations must be at the top of the function scope  vars-on-top
  2:5  error  'b' is defined but never used                                    no-unused-vars

‚úñ 3 problems (3 errors, 0 warnings)2I
(ce2accda65f45aaa2f532a3a4e931a35d42d3e422016-04-01T17:57:29Z3612514:â
2016-03-28T23:47:17ZMy guess is the rule only looks at VariableDeclaration nodes and doesn't check for ExportDeclaration nodes.
Personally I think the first error is symptomatic of a bug (the statement is on top), but the second error is more an indication that we need to enhance to allow for ExportDeclarations.
Not really sure the best way to triage this. @eslint/eslint-team Thoughts?:≈
2016-03-29T02:47:07Z¨This is tricky. This was created before ES6, so it definitely doesn't check exports. On the other hand, I'm not sure what the expectation would be here. Exports can occur anywhere, so there's an argument to be made that the rule is behaving as designed, since you could move the export under the var. The only real question is if export var should be treated the same as var or differently, and I'm not sure yet. Other opinions?:j
2016-03-29T03:47:53ZRI don't think export var should be treated any differently than var for this rule.:Õ
2016-03-29T13:59:25Z¥I agree with @michaelficarra. After all it is a variable declaration, just one for a variable that happens to be exported.
Or maybe there can be an option for vars-on-top that changes behaviour with respect to the export keyword. Something like
/* eslint vars-on-top: [2, { "allowExports": true } ] */
export var a;
var b;
// no error
/* eslint vars-on-top: [2, { "allowExports": false } ] */
export var a; // errors on this line
var b;:›
2016-03-30T23:21:08ZƒLet's go with @michaelficarra's opinion. I can't think of any good rationale why export var is different than var, so we can treat them the same.
@olmokramer are you interested in submitting a PR?:î
2016-04-01T17:19:52Z|@nzakas Sure, #5762 should fix it, although I see that it's complaining about the commit messages. I'll fix them right away.‡ªò#2015-11-21T03:33:48Z"2015-12-02T17:46:27Z*œMinimal repro case:
/* eslint no-undef: 2, no-redeclare: 2 */
var toString = 1;
Expected:
/home/isiah/dev-projects/js/ttyped/tmp.js
  2:5  error  "toString" is already defined  no-redeclare

‚úñ 1 problem (1 error, 0 warnings)

Found:
path/to/file.js
  2:5  error  "toString" is read only  no-undef

‚úñ 1 problem (1 error, 0 warnings)2I
(985a81a5e4f55c41f0eff0bc3f739588df86e5962015-11-28T08:30:09Z1937871: 
2015-11-21T15:48:49ZWhy not?:ÿ
2015-11-21T16:06:01ZøtoString is reserved JavaScript keyword and you are trying to override it. While it might not be clear why no-undef is the rule that's reporting this issue, it's a valid issue never the less.:ì
2015-11-21T16:35:49Z˙To be more precise, toString exists globally due to Object.prototype.toString, so it should behave like any other global.
That being said, no-undef should not be making this check as it should be covered by no-redeclare. We should fix this for 2.0.0.:¿
2015-11-21T16:53:32ZßShould there be an option to exclude Object prototype members?
Also, there's a lot of other cases where no-undef is erroneously complaining when other rules should be.:8
2015-11-21T16:57:53Z Can you explain the other cases?:√
2015-11-21T17:05:03Z™I meant other cases like the one above. The rest seem functionally identical to the fact it should be reported by no-redeclare. My bad on the part of really bad phrasing.:3
2015-11-21T17:09:38ZI updated the initial post.:≈
2015-11-21T17:25:21Z¨Yes, no-redeclare: [2, {builtinGlobals: true}] is catching var toString = 0.
And no-native-reassign is catching toString = 0.
So I think no-undef 's message can be removed.:j
2015-11-23T01:01:18ZRAt the same time, I want to set {builtinGlobals: true} of no-redeclare by default.:
2015-11-23T19:41:47ZWhy?:G
2015-11-23T21:59:03Z/Because now no-undef is catching it by default.:i
2015-11-24T17:41:25ZQAh, so you're saying if we changed no-redeclare, we could keep the same behavior?: 
2015-11-26T01:40:06ZExactly!:π
2015-11-27T17:24:27Z†I see. My thought was that we want to make as few breaking changes as possible to do this, so I'd prefer to keep no-redeclare as it is and just change no-undef.: 
2015-11-28T08:03:56ZHmm, OK.‘F˛Õ-2016-04-13T10:17:03Z"2016-08-26T19:25:00Z*≥What version of ESLint are you using?
2.7.0
What parser (default, Babel-ESLint, etc.) are you using?

"babel-eslint": "~6.0.0"

Please show your full configuration:
{
  "parser": "babel-eslint",
  "extends": "airbnb",
  "rules": {
      "semi": [2, "never"],
      "arrow-body-style": 0
  }
}

What did you do? Please include the actual source code causing the issue.
import React, { PropTypes } from 'react'

const innerStyle = {
  color: '#343434',
  color2: 'white',
}

const ToolBar = ({ style, draw }) => {
  let dynStyle = {
    ...innerStyle,
    ...style,
  }

  dynStyle.color = draw ? dynStyle.color2 : dynStyle.color

  return (
    <div style={dynStyle} />
  )
}

ToolBar.propTypes = {
  style: PropTypes.object,
  draw: PropTypes.bool,
}

export default ToolBar

What did you expect to happen?
prefer-const should trigger and ask me to change let dynStyle to const dynStyle
What actually happened? Please include the actual, raw output from ESLint.
ESLint don't trigger the prefer-const rule.

Note I tried these versions :

~2.4.0 : Works
~2.5.0 : Doesn't work
~2.6.0 : Doesn't work
~2.7.0 : Doesn't work


Commits that are related to prefer-const (maybe I miss some) :

2.6: 9b73ffd Update: destructuring option of prefer-const rule (fixes #5594) (Toru Nagashima)
2.5: 9a22625 Fix: prefer-const false positive at non-blocked if (fixes #5610) (Toru Nagashima)
2.5: 87d74b2 Fix: prefer-const got to not change scopes (refs #5284) (Toru Nagashima)2I
(ca3d448802d4e8a31d1a881226c0dcb65bf249712016-08-26T19:25:00Z1937871:A
2016-04-13T14:57:41Z)@mysticatea Could you take a look please?:î
2016-04-14T00:07:19Z˚@fabienjuif
It looks like you're using babel-eslint as your parser. Can you try using the default parser instead? You can just delete the parser from your config file to switch to the default parser. Make sure you configure the parser options as well.:¢
2016-04-14T09:14:05ZâConfig file :
{
  "parserOptions": {
    "ecmaVersion": 7,
    "sourceType": "module",
    "ecmaFeatures": {
        "jsx": true,
        "experimentalObjectRestSpread": true
    }
  },
  "extends": "airbnb",
  "rules": {
      "semi": [2, "never"],
      "arrow-body-style": 0
  }
}

Code : Is the same
How do I run it  ? : ./node_modules/eslint/bin/eslint.js [...]/ToolBar.js
Result : Blank.:—
2016-04-14T15:26:50Z∏Thank you for this issue.
Hm, I cannot reproduce this on my local environment.
prefer-const is warning dynStyle.
C:\Users\t-nagashima.AD\Documents\GitHub\eslint [master]> cat test.js
import React, { PropTypes } from 'react'

const innerStyle = {
  color: '#343434',
  color2: 'white',
}

const ToolBar = ({ style, draw }) => {
  let dynStyle = {
    ...innerStyle,
    ...style,
  }

  dynStyle.color = draw ? dynStyle.color2 : dynStyle.color

  return (
    <div style={dynStyle} />
  )
}

ToolBar.propTypes = {
  style: PropTypes.object,
  draw: PropTypes.bool,
}

export default ToolBar

C:\Users\t-nagashima.AD\Documents\GitHub\eslint [master]> eslint --version
v2.7.0
C:\Users\t-nagashima.AD\Documents\GitHub\eslint [master]> eslint test.js --rule prefer-const:2 --parser-options "{ecmaVersion:7,sourceType:'module',ecmaFeatures:{jsx:true,experimentalObjectRestSpread:true}}" --no-ignore --no-eslintrc

C:\Users\t-nagashima.AD\Documents\GitHub\eslint\test.js
  9:7  error  'dynStyle' is never reassigned, use 'const' instead  prefer-const

‚úñ 1 problem (1 error, 0 warnings):Ë
2016-04-26T16:37:04ZœI had this problem and could reproduce the test case but it was fixed when I removed react/jsx-uses-vars https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/jsx-uses-vars.js from my config:á
2016-04-26T16:40:14ZoThat plugin flags eslintUsed: https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/util/variable.js:O
2016-04-26T18:35:33Z7@stevoland interesting! @fabienjuif can you check that?:â
2016-07-27T06:08:41Z
yes thats right - I raised this on the react plugin - yannickcr/eslint-plugin-react#716
I've created a test repo https://github.com/lukeapage/eslint-react-bug-prefer-const-716
after some investigation, as @stevoland suggested, eslint-plugin-react marks the variable with eslintUsed which then causes prefer-const to ignore the variable because of this line - 
  
    
      eslint/lib/rules/prefer-const.js
    
    
         Line 86
      in
      421e4bf
    
    
    
    

        
          
           if (variable.eslintUsed) { 
        
    
  


and searching through the history there used to be a better explanation of why eslint ignores in this case

  
    
      eslint/lib/rules/prefer-const.js
    
    
         Line 184
      in
      361377f
    
    
    
    

        
          
           // - If `eslintUsed` is true, we cannot know where it was used from. 
        
    
  


from that file
// - If `eslintUsed` is true, we cannot know where it was used from.
//   In this case, if the scope of the variable would change, it
//   skips the variable.

so I presume that is to stop this
if (true) {
    var a = 1;
}
return (<div>{a}</div>);

because in that case, converting the var to a const would change the meaning of the code (a would no longer be defined).
maybe we can only ignore eslintUsed variables if they are var so that let variables can still be warned?:ÿ
2016-07-27T06:31:25Zø@lukeapage Thank you for investigating.

so I presume that is to stop this

prefer-const does not touch var declarations. :)
It's handling only let declarations.
Actually, the rule ignores variables if eslintUsed is true, because rules cannot distinguish reasons of used. (e.g., /*exported*/ comments set true to eslintUsed) (e.g., A plugin can set true to eslintUsed by another reason.)
(Please never mind this sentence, I'm searching my head...):Ú
2016-07-27T06:44:19ZŸHow does the reasons of usage change whether prefer-const should be applied? Can you give an example?
I was going to follow up that eslintUsed could maybe instead be an array of scopes.. but do you have a better idea?:Ÿ
2016-07-27T07:25:00Z¿I'm sorry, I was confused. I found my memory.
Originally, prefer-const was warning the following patterns:
let a;
for (let i = 0; i < 10; ++i) {
    a = doSomething();
    doSomething2(a);
}

// it can be modified as below.

for (let i = 0; i < 10; ++i) {
    let a = doSomething();
    doSomething2(a);
}
But in the following case (i.e., if there is read before write), the rule should not warn the code.
let a;
for (let i = 0; i < 10; ++i) {
    doSomething2(a);  // this uses the value of the previous iteration.
    a = doSomething();
}
Now, in the following case, if variable a is "eslintUsed", the rule cannot check the location of the read.
let a;
for (let i = 0; i < 10; ++i) {
    /* a code to set `eslintUsed`. */
    a = doSomething();
}
So, I wrote the condition !(variable.eslintUsed && variable.scope !== writer.from).:ÿ
2016-07-27T07:29:05ZøBut currently, prefer-const does not warn variables if the variable is initialized in another scope from the declaration.
let a;
for (let i = 0; i < 10; ++i) {
    a = doSomething(); // this is inside a different scope from `let a`, so this `a` is not warned.
}
So probably we can remove the check of eslintUsed simply.:¨
2016-07-27T07:40:54ZìJust to confirm, prefer-const should however still not warn on:
let foo;
const recursive = () => {
  return foo;
};
foo = {
  dontAsk: recursive
};:‰
2016-07-27T07:55:02ZÀ@ljharb It would be warned by default. It can be modified to:
const foo = {
    dontAsk: () => {
        return foo
    }
}
Also, we can make the rule ignoring that case by ignoreReadBeforeAssign option.:{
2016-07-27T07:59:14Zc@mysticatea ah sorry. My mistake. #5822 Ended up being resolved by adding the option you mentioned.:›
2016-08-23T21:22:14ZƒSo probably we can remove the check of eslintUsed simply.

@mysticatea any news on this? This check is breaking prefer-const when used with react/jsx-uses-vars (yannickcr/eslint-plugin-react#716).:[
2016-08-24T09:51:50ZCOh, I'm sorry.
I had lost the track of this issue.
I will fix this.:√
2016-08-24T09:58:07Z™Oh, wait, but I'm not sure whether it's the issue of this original post or not.
dynStyle seems not the target of react/jsx-uses-vars rule.
Maybe should we separate issue?:ò
2016-08-24T14:46:54ZˇThe issue is that any variable that is marked as used by context.markVariableAsUsed(name) (which set eslintUsed to true on the variable) will be ignored by prefer-const.
It was the case for dynStyle that was marked as used by react/jsx-uses-vars (fixed now since ESLint seems to handle it correctly without any help yannickcr/eslint-plugin-react@d4dee48).
But we'll still have the same problem with JSXOpeningElement:
let App = <div />; // should warn "'App' is never reassigned. Use 'const' instead" but will not
<App />
So it is still the same issue, just on another node type.
But I can open another issue if it makes it easier for you.:B
2016-08-24T19:49:04Z*Thank you for explaining.
I understood it.‹Ã“.2016-04-26T22:27:08Z"2016-05-04T22:24:12Z*ØAs discussed in the chat, it's pretty easy to forget to add meta.fixable to a new-style rule and then the unit tests simply won't run auto-fix.
It might be worthwhile to add an assertion to RuleTester. If the test has output property and the rule has meta but does not have meta.fixable set to code or whitespace, an assertion failure should be thrown here so that the developer knows that meta.fixable needs to be set on the rule.2H
(a9a4652b2ce92858d90243e7bb8693f458a147832016-05-04T22:24:09Z626038:q
2016-04-26T22:27:54ZYNot sure if this should be "core" or "infrastructure", so leaving that label off for now.:K
2016-04-26T22:58:49Z3I'd like to work on this one if it gets accepted :):…
2016-05-02T21:04:11Z∞The rule should throw if it uses fix and doesn't have fixable set. If that isn't happening, then that's a bug we should fix. That would, in turn, throw an error during testing.:ë
2016-05-02T21:13:50ZyIt's not throwing in the current implementation. It will just not run fix on the rule that doesn't have meta.fixable set.:Å
2016-05-02T21:18:52Zi@ilyavolodin then we should throw in that case. I think we talked about this way back, so easy to forget.:ü
2016-05-02T21:23:05ZÜI think throwing is fine. We just need to make sure the code is done in such a way that it would only through for rules in new format.:f
2016-05-03T00:19:29ZN@nzakas @ilyavolodin please let me know if this is what you had in mind: #6043»(âú62016-08-19T18:10:28Z"2016-08-24T20:31:40Z*≤$What version of ESLint are you using?
3.3.1
What parser (default, Babel-ESLint, etc.) are you using?
Babel-ESLint
Please show your full configuration:
module.exports = {

  // base off Airbnb Javascript Style Guide
  // https://github.com/airbnb/javascript
  'extends': [
    'eslint-config-airbnb',
  ],

  'parser': 'babel-eslint',

  // subdirs should inherit from here
  'root': true,

  'plugins': [
    'flowtype',
  ],

  'rules': {
    // Flow stuff
    'flowtype/define-flow-type': 1,
    'flowtype/use-flow-type': 1,
    "flowtype/require-valid-file-annotation": [1, "always"], // 638 instances
    "flowtype/space-after-type-colon": [2, "always"],
    "flowtype/space-before-type-colon": [2, "never"],

    // tighten these Airbnb warnings to errors
    'react/jsx-indent': [2, 2],

    // errors on these that Airbnb style allows
    'react/no-danger': 2,
    'react/no-direct-mutation-state': 2,
    'react/jsx-curly-spacing': [2, 'never'],
    'react/jsx-no-duplicate-props': 2,

    // we like our closing brackets aligned with the start of the tag
    'react/jsx-closing-bracket-location': [2, {
      'nonEmpty': 'after-props',
      'selfClosing': 'tag-aligned',
    }],

    // tighten these Airbnb warnings to errors
    //
    'no-alert': 2,
    'no-constant-condition': 2,

    // errors on these that Airbnb style allows
    //
    'dot-location': [2, 'property'],
    'new-parens': 2,
    'no-array-constructor': 2,
    'no-bitwise': 2,
    'no-catch-shadow': 2,
    'no-extra-boolean-cast': 2,
    'no-label-var': 2,
    'no-restricted-syntax': [2, 'WithStatement'],
    'no-undef-init': 2,
    'no-useless-concat': 2,
    'space-unary-ops': [2, {'words': true, 'nonwords': false}],
    'object-curly-spacing': [2, 'never'],
    'import/default': 2,
    'import/named': 2,
    'import/namespace': 2,

    // change qualifiers
    //
    'comma-dangle': [2, 'always-multiline'],
    'curly': [2, 'all'],
    'dot-notation': [2, {'allowKeywords': true, 'allowPattern': '^[a-z]+(_[a-z]+)*$'}],
    'no-use-before-define': [2, 'nofunc'],
    'indent': [2, 2, {'SwitchCase': 1}],
    'no-unused-vars': [2, { "argsIgnorePattern": '^_' }],

    // These were added when we bumped the Airbnb rules.
    // Our code doesn't comply and we haven't decided whether we want it to.
    'space-before-function-paren': 0,
    'quote-props': 0,
    'no-param-reassign': 0,
    'no-else-return': 0,
    'space-before-function-paren': 0,
    'prefer-rest-params': 0,
    'no-restricted-syntax': 0,
    'prefer-template': 0,
    'no-underscore-dangle': 0,
    'jsx-a11y/img-has-alt': 0,
    'react/jsx-filename-extension': 0, // 107 instances
    'import/imports-first': 0, // 174 instances
    'import/prefer-default-export': 0, // 43 instances
    'import/no-extraneous-dependencies': 0, // 82 instances
    'react/require-extension': 0, // deprecated
    'import/no-named-as-default': 0, // 49 instances
    'react/no-find-dom-node': 0, // 31 instances, https://github.com/yannickcr/eslint-plugin-react/issues/678#issue-165177220
    'react/jsx-no-comment-textnodes': 0,
    'prefer-spread': 0,
    'import/newline-after-import': 0,
    'react/no-string-refs': 0,
    'import/no-named-as-default-member': 0,
    'no-mixed-operators': 0,
    'object-property-newline': 0, // 3 instances
    'no-undef': 0, // 1 instance
    'no-prototype-builtins': 0, // 3 instances
    'react/jsx-no-target-blank': 0, // 3 instances
    'no-continue': 0, // 1 instance
    'no-lonely-if': 0, // 1 instance
    'react/self-closing-comp': 0, // 1 instance
    'operator-assignment': 0, // 8 instances
    'jsx-a11y/label-has-for': 0, // 2 instances
    'no-path-concat': 0, // 1 instance

    // disable all these
    //
    'func-names': 0,
    'global-require': 0,
    'guard-for-in': 0,
    'id-length': 0,
    'max-len': 0, // soft wrap FTW
    'no-console': 0,
    'vars-on-top': 0,
    'no-duplicate-imports': 0, // we use import/no-duplicates instead, which handles flow type imports
  },
};
What did you do? Please include the actual source code causing the issue.
type Props = any;
function foo ({a, b}: Props) { // eslint-disable-line object-curly-spacing
  console.log(a, b);
}
foo({a: 0, b: 1});

What did you expect to happen?
That object-curly-spacing would not complain about function foo ({a, b}: Props) {. It's the style enforced by "flowtype/space-after-type-colon": [2, "always"].
What actually happened? Please include the actual, raw output from ESLint.
  32:23  error  There should be no space before 'Props'  object-curly-spacing

I've looked at the rule qualifiers in http://eslint.org/docs/rules/object-curly-spacing and neither seem to apply.2I
(7660b390f6f04abe5ee0afe812a013200d3e3a192016-08-24T20:31:40Z1937871:ì
2016-08-20T16:54:34Z˙Thank you for this issue.
I confirmed it.
{
    "root": true,
    "parser": "babel-eslint",
    "env": {
        "es6": true
    },
    "rules": {
        "object-curly-spacing": ["error", "never"]
    }
}
type Props = any;
function foo ({a, b}: Props) {
}
ESTree spec has typeAnnotation (container only). Also, we have fixed a similar issue before (#5211).
I will work on this.©3‘.2016-04-26T23:10:39Z"2016-04-30T03:00:50Z*ΩWhat version of ESLint are you using?
e606523
What parser (default, Babel-ESLint, etc.) are you using?
default
What did you do? Please include the actual source code causing the issue.
Rule no-unsafe-finally gives an error on the following code:
try {} finally {
  while(true) {
    break;
  }
}
What did you expect to happen?
No errors.
What actually happened? Please include the actual, raw output from ESLint.
Unsafe usage of BreakStatement no-unsafe-finally
More generally, break and continue statements need to check that the statement being broken or continued is not interior to the finally block. This involves checking labels, if present.
ping @onurtemizkan, @platinumazure.
See #5808, #5932.2I
(2f1535433a0b82e3d10006f777b9882a38e2af2c2016-04-30T03:00:50Z4020638:¢
2016-04-26T23:19:09ZâAnd I guess if we're being pedantic, it's possible that this shouldn't give a warning either:
try {} finally {
  try {
    throw 0;
  } catch (e) {
    //pass
  }
}
Of course, it's not possible to statically determine if a throw will cause an early exit from a finally:
try {} finally {
  inner: try {
    throw 0;
  } finally {
    if (Math.random() < 0.5) {
      break inner;
    }
  }
}
But this is sufficiently horrifying as to be worth warning anyway (and the inner finally would give a warning in any case). Frankly I'd be OK with warning in both of the cases mentioned here; it's more important that break and continue are handled correctly.:’
2016-04-26T23:26:00ZºAlso what about this?
try {} finally {
  (function() {
    return;
  })();
}
I'm not sure how to test it myself as this rule hasn't been released yet. The code above should give no errors.:»
2016-04-26T23:36:32ZØ@louy, that one's handled correctly.
Easiest way to test it yourself is to clone master, npm install, then ./bin/eslint.js --no-eslintrc --rule 'no-unsafe-finally: 1' test.js.:z
2016-04-27T00:02:43ZbIt's obviously a bug, I presume it will be accepted. So I'm now working on a patch to fix it asap.:'
2016-04-27T04:08:11ZOh, good catch!¨≈ÜG2017-08-09T08:26:08Z"2017-08-14T09:45:08Z*°What is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix #9093
What changes did you make? (Give an overview)
Currently when a file has no errors there isn't an entry in the junit results. This breaks some junit parsers as they expect at least one result. It also provides more data since now you know how many files have actually been parsed.
Is there anything you'd like reviewers to focus on?2I
(a4f53bac66686fd205e62ca1b940b0ace40c08882017-08-14T09:45:08Z1302304:
2017-08-09T08:26:09ZLGTM:√
2017-08-09T08:26:09Z™@Sean-Der, thanks for your PR! By analyzing the history of the files in this pull request, we identified @xjamundx, @mysticatea and @kaicataldo to be potential reviewers.:
2017-08-09T08:32:56ZLGTM:˝
2017-08-09T17:26:45Z‰As an aside, it would be so nice if we supported a --formatter-options CLI option where the option could just get passed into the formatter, and then the formatter could actually follow either behavior and the user could decide.:‚
2017-08-09T17:56:03Z…Thanks for the review @not-an-aardvark !
@platinumazure I would be more then happy to write that feature! I could see the junit change being controversial, so happy to do whatever makes everyone happy.:˝
2017-08-09T17:58:21Z‰Thanks, don't jump too quickly on that, the team has discussed it in the
past and vetoed it and I've been the lone dissenter for a while. :-)
‚Ä¶
On Aug 9, 2017 10:56 AM, "Sean DuBois" ***@***.***> wrote:
 Thanks for the review @not-an-aardvark
 <https://github.com/not-an-aardvark> !

 @platinumazure <https://github.com/platinumazure> I would be more then
 happy to write that feature! I could see the junit change being
 controversial, so happy to do whatever makes everyone happy.

 ‚Äî
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#9094 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AARWejBIzas6kzSzYW17EznGWQCaukUEks5sWdaVgaJpZM4Oxpaa>
 .:°
2017-08-14T09:44:43ZàI'm going to go ahead and accept this because the previous behavior seems like a bug to me, and no one has said otherwise. Thanks again!Ÿ≈ÖG2017-08-09T08:18:55Z"2017-08-14T09:45:08Z*ŸTell us about your environment

ESLint Version: v4.4.1
Node Version: v6.11.2
npm Version: 3.10.5

What did you expect to happen?
Currently the junit formatter doesn't output any entries if a file has no errors. This causes issues with Jenkins junit parser, it assumes that no tests exist and fails with a warning.
It would also be nice to have this because it gives output for all the files that have been checked, right now files that pass are just missing from the report.
This issue was also mentioned by #16 (comment)
What actually happened? Please include the actual, raw output from ESLint.
I would like to change the output from
<?xml version="1.0" encoding="utf-8"?>
<testsuites>
</testsuites>

to
<?xml version="1.0" encoding="utf-8"?>
<testsuites>
<testsuite package="org.eslint" time="0" tests="0" errors="0" name="/home/sean/test/index.js">
</testsuite>
<testsuite package="org.eslint" time="0" tests="0" errors="0" name="/home/sean/test/out.js">
</testsuite>
</testsuites>2I
(a4f53bac66686fd205e62ca1b940b0ace40c08882017-08-14T09:45:08Z1302304§≈äG2017-08-11T08:56:11Z"2017-08-14T03:44:37Z*úWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix



Tell us about your environment

ESLint Version: master
Node Version: 8.3.0
npm Version: 5.3.0

What parser (default, Babel-ESLint, etc.) are you using?
N/A
Please show your full configuration:
N/A
What did you do? Please include the actual source code causing the issue.
const eslint = require("eslint");
const linter = new eslint.Linter();

linter.verifyAndFix("foo", { rules: { semi: 2 } }, { fix: false });
What did you expect to happen?
I expected no autofixes to be applied. The fix property specifies a filter function for fixes, and can also be set to a boolean (where true implies that all problems are fixed, and false implies that no problems are fixed). However, false currently behaves the same as true.
What actually happened? Please include the actual, raw output from ESLint.
{ fixed: true, messages: [], output: 'foo;' }

What changes did you make? (Give an overview)
Due to a bug, linter.verifyAndFix previously applied all autofixes when the fix option was set to false, even though the documented behavior was to apply no autofixes. This commit fixes the bug.
This fix was also included as part of #9090 because the bug was affecting the updated behavior of CLIEngine. However, I decided to separate it out into a different fix because it's an independent bug.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(f8add8fd8a9f75e0fdcd9c1a39223f937ff763302017-08-14T03:44:36Z11638619:
2017-08-11T08:56:12ZLGTM:«
2017-08-11T08:56:18ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @gyandeeps, @nzakas and @mysticatea to be potential reviewers.:—
2017-08-11T16:58:25Z∏After thinking about his a little bit, I think it should always fix if you call the function verifyAndFix. Thats the purpose of the function. Atleast that how I am thinking about this.:€
2017-08-11T17:25:33Z¬After thinking about his a little bit, I think it should always fix if you call the function verifyAndFix. Thats the purpose of the function. Atleast that how I am thinking about this.

This basically makes sense to me, but what should we do if someone passes in fix: false? Should we throw an exception for invalid input?:û
2017-08-11T17:33:57ZÖAfter thinking about his a little bit, I think it should always fix if you call the function verifyAndFix.

I see where you're coming from, but we already allow a filter function to be provided, so we will still end up not fixing anything if the filter is () => false. Since we accept true as a documented input, it makes sense to accept false as well.
That said, I notice verifyAndFix with fix: false is identical to verify. Maybe we should add a fix option to verify defaulting to false, and deprecate verifyAndFix.:¬
2017-08-13T13:08:56Z©@gyandeeps @platinumazure Are you okay with this being merged as-is for now? Since the function is documented to accept a boolean, I think the current behavior is a bug.:Ñ
2017-08-13T14:46:43Zl@not-an-aardvark I definitely agree we currently have a bug and have no real objection with merging this in.Ø¢°2015-04-18T00:07:19Z"2015-05-09T04:22:03Z*ú// test.js
switch (foo) {
    case true:
        let bar = 42;
        break;
    case false:
        let bar = 255;
        break;
    default:
        const bar = foo;
}
{
    "ecmaFeatures": {
        "blockBindings": true
    },
    "rules": {
        "no-redeclare": 2
    }
}
$ eslint --reset --no-eslintrc -c config.json test.js

# No output
Since the case block of switch statements is a single lexical environment, let and const as in the above test should trigger warnings. (Running the test code in Firefox triggers a TypeError.)2G
(87719770844e7203cc31255aa2e40d1901158c572015-05-09T01:26:34Z38546:ﬂ
2015-04-18T00:40:44Z∆TypeError is explained here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let
Even Chrome is not happy. Its an error there too.:Ü
2015-04-20T07:15:55ZnLooks like no-redeclare just hasn't been updated for ES6 block scoping yet. I'll rename the issue accordingly.:(
2015-05-09T00:27:55ZWorking on this.µﬁÂ=2017-01-12T02:17:50Z"2017-01-13T17:37:41Z*≠What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (see #7908)
What changes did you make? (Give an overview)
This updates brace-style to avoid crashing when it encounters a lone BlockStatement node.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(b3f209413e3d239a460700c4099f7ed9f575e8da2017-01-13T17:37:40Z11638619:»
2017-01-12T02:17:50ZØ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @gyandeeps, @vitorbal and @iancmyers to be potential reviewers.:
2017-01-12T02:17:51ZLGTM:
2017-01-13T04:24:42ZLGTMÑﬁ‰=2017-01-12T02:05:01Z"2017-01-13T17:37:46Z*É
Tell us about your environment

ESLint Version: master (this has not appeared in a release yet)
Node Version: 7.4.0
npm Version: 4.0.5

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
(none)
What did you do? Please include the actual source code causing the issue.

/* eslint brace-style: error */

{
  foo();
}
What did you expect to happen?
No errors
What actually happened? Please include the actual, raw output from ESLint.
TypeError: Cannot read property 'loc' of undefined
    at Object.isTokenOnSameLine (path/to/eslint/lib/ast-utils.js:316:20)
    at validateCurlyPair (path/to/eslint/lib/rules/brace-style.js:84:49)
    at EventEmitter.BlockStatement (path/to/eslint/lib/rules/brace-style.js:141:17)
    at emitOne (events.js:96:13)
    at EventEmitter.emit (events.js:188:7)
    at NodeEventGenerator.enterNode (path/to/eslint/lib/util/node-event-generator.js:39:22)
    at CodePathAnalyzer.enterNode (path/to/eslint/lib/code-path-analysis/code-path-analyzer.js:607:23)
    at CommentEventGenerator.enterNode (path/to/eslint/lib/util/comment-event-generator.js:98:23)
    at Controller.enter (path/to/eslint/lib/eslint.js:928:36)
    at Controller.__execute (path/to/eslint/node_modules/estraverse/estraverse.js:397:31)2J
(b3f209413e3d239a460700c4099f7ed9f575e8da2017-01-13T17:37:40Z11638619ß»Õ.2016-04-25T23:18:42Z"2016-05-03T19:39:06Z*ñUsing 2.8.0.
This is actually covered by a test, but I am not sure it is the correct behaviour, since they are basically reporting the same failure (I found this while adding autofix for the rule):
        {
            code: "bar()\n/* first block comment */ /* second block comment */\nvar a = 1;",
            options: [{ afterBlockComment: true, beforeBlockComment: true }],
            errors: [
                { message: beforeMessage, type: "Block", line: 2 },
                { message: afterMessage, type: "Block", line: 2 },
                { message: beforeMessage, type: "Block", line: 2 },
                { message: afterMessage, type: "Block", line: 2 }
            ]
        },

I would only expect the first 2 errors, for the first comment.
Note this code is valid (i.e comments don't need to be on different lines from each other) :
        {
            code: "bar()\n\n/* first block comment */ /* second block comment */\n\nvar a = 1;",
            options: [{ afterBlockComment: true, beforeBlockComment: true }]
        },2G
(a66bf19aa409bcac8020e8adf97e864b2a41eaa42016-05-03T19:39:04Z72561:}
2016-04-26T19:25:22ZeMarking "bug"/"evaluating" for now. I'm not sure what the expected behavior should be here, honestly.:c
2016-04-27T07:43:35ZK@xjamundx I'd like to know your opinion on this, since you created the rule:◊
2016-04-27T23:16:41ZæI agree with the premise that it shouldn't give 4 errors, much easier to code it up that way though. Not sure it's worth prioritizing a fix, but if someone wants to do it, I think I'd agree.:S
2016-04-28T08:24:17Z;Ok, thanks. I'll do it. I need it to properly autofix this.˝TÕ2015-09-14T10:57:15Z"2015-09-21T21:16:11Z*◊In js,
/*eslint space-before-keywords: [2, "always"]*/
(function() {})()
is not considered an error.
But in jsx
/*eslint space-before-keywords: [2, "always"]*/
onClick={function foo() {‚Ä¶}}
flags one (using v1.4.1)2G
(4216cf2dbb32718327dfcd8be4678a9a6ce0a9102015-09-21T21:16:11Z38546:M
2015-09-14T13:40:15Z5Could you provide console output of the error please?:X
2015-09-14T14:07:25Z@Missing space before keyword "function". (space-before-keywords):È
2015-09-14T20:53:37Z–hmm, maybe space-before-keywords should not concern itself with spaces between { and keywords but instead let block-spacing handle them... I'm happy to work on this but would love to hear what others think :):e
2015-09-15T20:44:47ZMSounds good. You should double-check how this works right now outside of JSX.:+
2015-09-15T21:35:57ZOk, great! Will do.»rË=2017-01-12T20:14:55Z"2017-01-14T18:25:12Z*ñESLint Version:
3.13.1
Node Version:
7.4.0
npm Version:
4.0.5

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
{
  "rules": {
    "no-extra-boolean-cast": "error"
  }
}

What did you do? Please include the actual source code causing the issue.
run eslint --fix on the code below:
function baz(foo)  { return !Boolean(foo && foo.bar); }
What did you expect to happen?
I expect to "Boolean" to be removed from the code.
What actually happened? Please include the actual, raw output from ESLint.
The brackets get dropped causing change of the behaviour of my code.
function baz(foo)  { return !foo && foo.bar; }2H
(6448ba06ed54a779f3552c6adb05e240d3ac14e62017-01-14T18:25:07Z446462:Ö
2017-01-12T21:09:37ZmI've prepare a bit naive fix. It's my first time diving into this codebase. Let me know how can I improve it.:©
2017-01-12T21:43:05ZêDang it, accidentally deleted my earlier comment.
@sprzybylski If you could create a pull request for us to review, that would be great, thanks!ÕrÍ=2017-01-12T21:51:26Z"2017-01-14T18:25:08Z*êWhat is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix for #7912
What changes did you make? (Give an overview)
I've change autofixer in no-extra-boolean-cast rule for "Redundant Boolean call" to include brackets if the inner part is an expression.2H
(6448ba06ed54a779f3552c6adb05e240d3ac14e62017-01-14T18:25:07Z446462:;
2017-01-12T21:51:27Z#All committers have signed the CLA.:»
2017-01-12T21:51:27ZØ@sprzybylski, thanks for your PR! By analyzing the history of the files in this pull request, we identified @not-an-aardvark, @btmills and @vitorbal to be potential reviewers.:ƒ
2017-01-12T21:51:27Z´Thanks for the pull request, @sprzybylski! I took a look to make sure it's ready for merging and found some changes are needed:

The commit summary needs to begin with a tag (such as Fix: or Update:). Please check out our guide for how to properly format your commit summary and update it on this pull request.

Can you please update the pull request to address these?
(More information can be found in our pull request guide.):±
2017-01-12T21:58:08ZòThanks for the pull request, @sprzybylski! I took a look to make sure it's ready for merging and found some changes are needed:

The commit summary must be 72 characters or shorter. Please check out our guide for how to properly format your commit summary and update it on this pull request.

Can you please update the pull request to address these?
(More information can be found in our pull request guide.):
2017-01-12T23:20:17ZLGTM:
2017-01-12T23:54:29ZLGTMÕ Ë.2016-04-28T20:40:39Z"2016-04-29T14:57:32Z*˙What version of ESLint are you using?
2.8.0
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
none yet
What did you do? Please include the actual source code causing the issue.

eslint --init scripts on existing project
I choose to scan my files to determine the best configuration
What did you expect to happen?
successful finish
What actually happened? Please include the actual, raw output from ESLint.

Determining Config: 31% [=========---------------------] 57.2s elapsed, eta 130.1s Cannot read property 'errorCount' of undefined
TypeError: Cannot read property 'errorCount' of undefined
    at C:\Users\khomyackov\AppData\Roaming\npm\node_modules\eslint\lib\config\autoconfig.js:315:68
    at Array.forEach (native)
    at C:\Users\khomyackov\AppData\Roaming\npm\node_modules\eslint\lib\config\autoconfig.js:314:29
    at Array.forEach (native)
    at C:\Users\khomyackov\AppData\Roaming\npm\node_modules\eslint\lib\config\autoconfig.js:310:22
    at Array.forEach (native)
    at Registry.lintSourceCode (C:\Users\khomyackov\AppData\Roaming\npm\node_modules\eslint\lib\config\autoconfig.js:305:19)
    at configureRules (C:\Users\khomyackov\AppData\Roaming\npm\node_modules\eslint\lib\config\config-initializer.js:146:25)
    at processAnswers (C:\Users\khomyackov\AppData\Roaming\npm\node_modules\eslint\lib\config\config-initializer.js:250:18)
    at null.completed (C:\Users\khomyackov\AppData\Roaming\npm\node_modules\eslint\lib\config\config-initializer.js:404:30)2I
(a8a2cd818d1a6758eb92f59e89f75de75a8b850d2016-04-29T14:57:30Z4616705:«
2016-04-28T20:43:51ZÆAdditional info for autoconfig.js:315:
result.ruleId: max-len
ruleSetIdx: 9
lintedRegistry.rules[result.ruleId]: [
  { config: 2, specificity: 1, errorCount: 2186 },
  { config: [ 2, [Object] ], specificity: 2, errorCount: 2045 },
  { config: [ 2, [Object] ], specificity: 2, errorCount: 2045 },
  { config: [ 2, [Object] ], specificity: 2, errorCount: 2047 },
  { config: [ 2, [Object] ], specificity: 2, errorCount: 2047 },
  { config: [ 2, [Object] ], specificity: 2, errorCount: 2092 },
  { config: [ 2, [Object] ], specificity: 2, errorCount: 2184 },
  { config: [ 2, [Object] ], specificity: 2, errorCount: 2094 },
  { config: [ 2, [Object] ], specificity: 2, errorCount: 2186 }
]:<
2016-04-29T02:27:46Z$@IanVS Could you take a look please?:û
2016-04-29T04:21:42ZÖ@victor-homyakov thanks for the good information.  Is it possible that you have an eslint configuration comment in one of your files which is enabling max-len?  You could use eslint --init --debug to see which file is the last one it attempts before it crashes.:8
2016-04-29T04:56:05Z I believe I have a fix in #5999.:R
2016-04-29T10:10:18Z:@IanVS yes, the file contains /*eslint max-len:[1,140,4]*/:H
2016-04-29T11:57:36Z0@IanVS I confirm that your fix solves this issue:œ
2016-04-29T14:09:04Z∂Getting good, detailed bug reports makes me so happy.  üòÉ   Thanks for taking the time to do a little extra troubleshooting.
Hopefully we can squeeze this fix into today's release.©æÇ2015-07-30T11:37:05Z"2015-07-30T16:30:20Z*©test.js
/* eslint init-declarations: 2 */
var a = 0;

for (var b in []) {}
Command & Actual
> eslint -v
v1.0.0-rc-3
> eslint test.js --no-eslintrc

test.js
  4:10  error  Variable 'b' should be initialized on declaration  init-declarations

‚úñ 1 problem (1 error, 0 warnings)

Expected
No errors.2I
(9f9dfed5e705b8398809f1e243beb142afc96deb2015-07-30T13:53:10Z1937871á09,2016-03-31T11:48:48Z"2016-06-05T19:49:37Z*≥What version of ESLint are you using?
v2.5.3
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
{
  "rules": {
    "one-var": ["error", {
      "initialized": "never",
      "uninitialized": "always"
    }]
  }
}
What did you do? Please include the actual source code causing the issue.
Here is a small code snippet reproducing my issue. Just save it to a file and run eslint with the config shown above.
function reproduce(candidates) {
  var err;
  for (var ix in candidates) {
    err = ix > 0;
  }
  console.log(err);
}
What did you expect to happen?
The code should pass linter checks.
What actually happened? Please include the actual, raw output from ESLint.
$ eslint bug.js

/private/tmp/bug/bug.js
  3:8  error  Combine this with the previous 'var' statement with uninitialized variables  one-var

‚úñ 1 problem (1 error, 0 warnings)

As far as my understanding goes, eslint considers the ix variable declared inside for loop as unitialized and therefore complains that it should have been defined on the same line as the err variable (before the for loop). Indeed, the following code passes the checks:
function reproduce(candidates) {
  var err, ix;
  for (ix in candidates) {
    err = ix > 0;
  }
  console.log(err);
}
From my point of view, I am proposing one of the following two changes:

Fix the implementation of one-var to treat for loop variables differently.
Add an one-var option similar to init-declaration's ignoreForLoopInit that will tell one-var to treat variables defined in for-loops differently.

Thoughts?2I
(316a507201e4caa3c24f90feba595bc7e4b1a1802016-06-05T19:49:34Z7041728:Ì
2016-03-31T13:28:11Z‘A case that I find even more confusing:
function printContextLogs(context) {
  for (var k in context.console._logs) {
    var items = context.console._logs[k];
    for (var ix in items) {
      console[k].apply(console, items[ix]);
    }
  }
}
The error message suggests merging the declaration of ix with k, which is rather nonsense to me.:Ö
2016-03-31T15:07:56ZÏ@bajtos I assume the second example is done with the configuration as the first one? Because second example makes sense if configuration would've been:
"one-var": ["error", {
  "initialized": "always",
  "uninitialized": "always"
}]
In that case, the example should be re-written as:
function printContextLogs(context) {
  var k, ix;
  for (k in context.console._logs) {
    var items = context.console._logs[k];
    for (ix in items) {
      console[k].apply(console, items[ix]);
    }
  }
}:˚
2016-03-31T15:27:17Z‚@ilyavolodin thank you for coming back to me. Yes, the second example is using the same configuration as the first one.
Perhaps I should explain our coding style, here is an example:
var a, b, c; // all uninitialized variables are in a single statement
var foo = 1;
var bar = 2; // initialized variables are one per statement.

// inside "for" loops, we consider variables as initialized
for (var i = 1; i < foo; i++) {
  for (var j = 1; j < bar; j++) {
    a = i*j;
  }
}
Thoughts?:⁄
2016-03-31T16:28:03Z¡Hmm... In that case, it sounds like we have a bug with uninitialized variables and loops. I was able to confirm this in the online demo. @bajtos do you want to submit a patch to fix this issue?:¯
2016-03-31T16:34:18ZﬂIn that case, it sounds like we have a bug with uninitialized variables and loops. I was able to confirm this in the online demo.

üëç

do you want to submit a patch to fix this issue?

Uff, I am very tight on time, but I may give it a try, because I do want to get this fixed soon.
@ilyavolodin could you please point me in the direction where to start? Could it be this line, which treats differently only ForStatement, but not ForInStatement and ForOfStatement?

  
    
      eslint/lib/rules/one-var.js
    
    
         Line 253
      in
      7374d2b
    
    
    
    

        
          
           if (parent.type !== "ForStatement" || parent.init !== node) { 
        
    
  


I assume the tests will be added to this file, is that correct?
https://github.com/eslint/eslint/blob/7374d2b4b3838e6c14d2c45291687c25f5f7f191/tests/lib/rules/one-var.js:∞
2016-03-31T16:48:30Zó@bajtos That looks like the right place. I verified that the rule doesn't warn for regular for loop statements, only for for...in and for...of, so it sounds like you just need to add those as special case along with ForStatement. And yes, tests would go into the file you linked.:ë
2016-04-01T10:57:14Z¯Ouch, I just realised I need to get an approval from my employer before I can contribute. It will take at least several days to get it processed. If there are any other volunteers to contribute the fix, then please don't hesitate to take this over.:\
2016-04-01T17:19:37ZDI would like to work on this, i think can submit the fix at weekend.:y
2016-04-01T19:28:09ZaSounds good @diki I think @bajtos outlined what needs to be done quite well in his previous post.:Ò
2016-04-02T18:28:31ZÿHi,
I want to clarify some points before going further.This code:
var a, b, c; // all uninitialized variables are in a single statement
var foo = 1, bar = 2; // initialized variables are one per statement.

// inside "for" loops, we consider variables as initialized
for (var i = 1; i < foo; i++) {
  for (var j = 1; j < bar; j++) {
    a = i*j;
  }
}
fails with this configuration:
module.exports = {
  rules: {
    'one-var': [2, {
      'initialized': 'never',
      'uninitialized': 'never'
    }],
  }
};
I think it is expectable, if so don't you think the same rule applies for uninitialized variables in ForInStatements? Adding conditions to one-var.js for uninitialized variables in ForInStatements would fix this, in the same manner i guess my example should pass too. Do you think ix in for(var ix in candidates) should be treated as initialized?:
2016-05-02T15:18:21Z◊I don't understand this thread completely, but I think variable declarations at ForInStatement.left and ForOfStatement.left should be treated as initialized. Those variables will be initialized with iteration items.≤¸Û=2017-01-16T00:49:44Z"2017-01-20T21:11:41Z*üTell us about your environment

ESLint Version: 3.13.1
Node Version: 7.4.0
npm Version: 4.0.5

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

{ }

What did you do? Please include the actual source code causing the issue.

/*eslint func-call-spacing: ["error", "always"]*/

fn
();
What did you expect to happen?
In the snippet above, when the line terminator character between fn and () is one of "\r", "\u2028" or "\u2029", an error should be reported.
What actually happened? Please include the actual, raw output from ESLint.
An error is only reported when the line terminator character between fn and () is "\n".2I
(ca01e00400d3fc9bbaa2c4c0f573a0fa10ae0a4a2017-01-20T21:11:36Z6367844:p
2017-01-16T01:01:21ZXI've been working on a clone of this rule yesterday and I can submit a patch if desired.:ì
2017-01-16T01:32:55Z{@fasttime I just need to figure out an easy way to repro so I can mark the bug accepted, but yes, a patch would be welcome!:»
2017-01-16T01:40:58ZØI got lazy and just wrote some more rule tests, and I can confirm this bug.
@fasttime You are welcome to submit a PR. Please let us know if you end up not having time. Thanks!:n
2017-01-16T08:04:55ZV@platinumazure Thanks! Any help on how to sign the CLA? Or should I sumbit a PR first?:ß
2017-01-16T08:37:01ZéYou can sign the CLA by visiting this link: https://js.foundation/CLA/

Make sure your name and email address that you use to sign the CLA match
the name and email address you put on your commits. (Use git config
user.name and got config user.email to check those in your local Git
instance.) I'm not 100% sure both need to match, but it doesn't hurt.

If you decide to write a PR before signing the CLA, that will work too! In
that case, a comment will be left on the PR saying the CLA needs to be
signed, and you can click on the link there to get started. Just be careful
about making sure you sign with the same name and email as what is in your
commit(s).

It's possible but tedious to change a commit's name/email after pushing it
for a PR, so I recommend signing the CLA first (and checking your Git
configuration as part of that). But ultimately, it's up to you.

Please visit https://gitter.im/eslint/eslint if you need help, and someone
on the team can help you out.
‚Ä¶
On Jan 16, 2017 01:04, "Francesco Trotta" ***@***.***> wrote:
 @platinumazure <https://github.com/platinumazure> Thanks! Any help on how
 to sign the CLA? Or should I sumbit a PR first?

 ‚Äî
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#7923 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AARWeqvaMSXNl5FvtdwXFRGMcYbUZB67ks5rSxaYgaJpZM4LkEwk>
 .:£
2017-01-16T09:43:08Zä@platinumazure Ok, thanks. The link above took me to a page with nothing but legal notes, but after submitting the PR, I was pointed to https://cla.js.foundation/eslint/eslint which is where I was able to sign the CLA. I'll have time later to fix the commit message.≥I¨62016-08-22T16:27:42Z"2016-08-25T15:03:02Z*ÿWhat version of ESLint are you using?
v3.3.1
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
{
  "env": {
    "node": true,
    "es6": true,
    "mocha": true
  },
  "rules": {
    "no-bitwise": 2,
    "curly": 0,
    "indent": [
      2,
      2,
      {
        "SwitchCase": 1
      }
    ],
    "no-caller": 2,
    "quotes": [
      2,
      "single"
    ],
    "no-undef": 2,
    "no-unused-vars": 2,
    "strict": 0,
    "max-len": [
      2,
      {
        "code": 100,
        "ignoreComments": true
      }
    ],
    "no-use-before-define": 0,
    "new-cap": 2,
    "no-sparse-arrays": 0,
    "no-trailing-spaces": 2
  },
  "parserOptions": {
    "sourceType": "module"
  }
}
What did you do? Please include the actual source code causing the issue.
  if (type === '1') abacus.inc('rest.status.info');
    else if (type === '2') abacus.inc('rest.status.ok');
  else if (type === '4') abacus.inc('rest.status.clientError');
  else if (type === '5') abacus.inc('rest.status.serverError');
With the above if-else chain, I have the first else indented too far and we get the correct output: error Expected indentation of 2 space characters but found 4 indent
But if the first else is correct, I find that all subsequent lines in the if-else chain don't generate errors when their indentation is off.
  if (type === '1') abacus.inc('rest.status.info');
  else if (type === '2') abacus.inc('rest.status.ok');
               else if (type === '4') abacus.inc('rest.status.clientError');
      else if (type === '5') abacus.inc('rest.status.serverError');
This generates no output and linting passes.
What did you expect to happen?
I would expect the second input to generate indentation errors:
error  Expected indentation of 2 space characters but found 15  indent
error  Expected indentation of 2 space characters but found 6  indent
What actually happened? Please include the actual, raw output from ESLint.
Linting passes and generates no output.2J
(3e522be86edbb1cc7f6cdf03d9b13a9fa02cbd9e2016-08-25T15:02:56Z11638619:Æ
2016-08-22T16:56:58ZïThanks for the report, @whimatthew! I can reproduce this. Seems like all else statements after the first one are not triggering an indentation error.:(
2016-08-24T05:09:24ZWorking on this.™¸Ù=2017-01-16T09:31:37Z"2017-01-20T21:11:37Z*ÙWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (see #7923)



What changes did you make? (Give an overview)
Updated a regular expression in the func-call-spacing rule source to match the line terminator characters "\r", "\u2028" and "\u2029" along with "\n". This has the effect of disallowing those characters as separators when the option "always" is used without "allowNewlines".
Is there anything you'd like reviewers to focus on?
Nothing that shouldn't be clear.2I
(ca01e00400d3fc9bbaa2c4c0f573a0fa10ae0a4a2017-01-20T21:11:36Z6367844:≈
2017-01-16T09:31:38Z¨@fasttime, thanks for your PR! By analyzing the history of the files in this pull request, we identified @btmills, @platinumazure and @kaicataldo to be potential reviewers.:;
2017-01-16T09:31:38Z#All committers have signed the CLA.:Æ
2017-01-16T09:31:38ZïThanks for the pull request, @fasttime! I took a look to make sure it's ready for merging and found some changes are needed:

The commit summary must be 72 characters or shorter. Please check out our guide for how to properly format your commit summary and update it on this pull request.

Can you please update the pull request to address these?
(More information can be found in our pull request guide.):
2017-01-16T18:11:05ZLGTM:±
2017-01-16T18:37:10Zò@platinumazure Thanks for the review. If I understand, you are suggesting to extend the test cases for #7787 to other line terminators. Is this correct?:±
2017-01-16T18:51:38ZòYou got it!
‚Ä¶
On Jan 16, 2017 11:37 AM, "Francesco Trotta" ***@***.***> wrote:
 @platinumazure <https://github.com/platinumazure> Thanks for the review.
 If I understand, you are suggesting to extend the test cases for #7787
 <#7787> to other line terminators.
 Is this correct?

 ‚Äî
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#7924 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AARWegTdTT0tOTMzU82NnY7ghMjFfNfcks5rS6rHgaJpZM4LkSjO>
 .:
2017-01-16T21:20:26ZLGTM:É
2017-01-16T21:26:10ZÍI've added some tests for the base case "f\n();" with all line terminator variants. If this is not sufficient, I was thinking to combine the more complex tests with different line terminators "(0, foo).bar()\r(0, foo).bar()\u2028...".:
2017-01-19T06:49:04ZLGTM:∑
2017-01-19T07:03:05Zû@platinumazure I also thought of that. Both "never" and "always" disallow newlines, and I'm not sure why autofixing newlines should only happen with "always".:˚
2017-01-19T07:17:16Z‚@btmills I added some more tests. Now there should be valid or invalid tests for every line terminator sequence with every option. Give me one day and I'll open an issue about the repeated regexp code. Thanks for the feedback.ºå=2016-12-29T17:30:27Z"2017-01-04T12:50:29Z*”This is a bug fix that changes the way the new-paren rule works.
It exploits the invariant that parentheses can only be omitted if there are no arguments, and in this case, the last two tokens have to be ( and )2H
(0fc24f72de90e3ff2539ee0146b0d358a47ce39e2017-01-04T12:50:28Z291575:»
2016-12-29T17:30:28ZØ@flying-sheep, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @Jxck and @not-an-aardvark to be potential reviewers.:
2016-12-29T17:30:28ZLGTM:
2016-12-30T21:37:09ZLGTM:
2016-12-30T22:45:18ZLGTM:D
2017-01-04T12:50:37Z,@flying-sheep thanks a lot for contributing!ÛåÀ42016-07-21T20:24:52Z"2016-09-13T20:22:41Z*óWhat version of ESLint are you using?
3.1.1
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
indent: [
    'error',
    4,
    {
        SwitchCase: 1
    }
]
What did you do? Please include the actual source code causing the issue.
(function() {
    var x = 0 ||
        {
            a: 1,
            b: 2
        };

    var y = x ||
        true;
})();
What did you expect to happen?
I expected it not to have an error about the indentation on lines 3-6
What actually happened? Please include the actual, raw output from ESLint.
/home/user/test.js
  3:13  error  Expected indentation of 4 space characters but found 8   indent
  4:17  error  Expected indentation of 8 space characters but found 12  indent
  5:17  error  Expected indentation of 8 space characters but found 12  indent
  6:13  error  Expected indentation of 4 space characters but found 8   indent
  8:9   error  'y' is defined but never used                            no-unused-vars

‚úñ 5 problems (5 errors, 0 warnings)2I
(76acbb501e3139a39369b83877216739952d657a2016-09-13T20:22:39Z6539985:¶
2016-07-22T10:48:32ZçThanks for reaching out, @facboy!
I can reproduce this in the demo.
Just to be clear for other readers, the second var declaration in the example does not trigger any error messages, so it might have something to do with the way the indent rule deals with ternary conditions and object literals.
A shortened version of the code to reproduce:
var x = 0 ||
    {
        a: 1,
        b: 2
    };
Produces:
2:5 - Expected indentation of 0 space characters but found 4. (indent)
3:9 - Expected indentation of 4 space characters but found 8. (indent)
4:9 - Expected indentation of 4 space characters but found 8. (indent)
5:5 - Expected indentation of 0 space characters but found 4. (indent)
@ilyavolodin may be of interest for you because of the indent rule improvement coordination.:x
2016-07-24T21:54:09Z`Hey all I'm new to the community but I'll try my hand at taking this on if there are objections.:©
2016-07-24T22:14:30Zê@alecharmon We would definitely appreciate a pull request for this issue. However, keep in mind, this is most likely part of the multiline issue with indent rule, which is much larger. You can search open issues for other reports related to multiline indentation problems.:à
2016-08-19T19:28:06ZÔ@alecharmon @ilyavolodin There hasnt been any movement on this one in about a month.  Would like to open a PR unless @alecharmon has already started working on it,  but brand new to the code base.  If its ok to open a PR could you please point me in the right direction for relevant files for this issue and will research issues related to multiline issues.
Thank you:®
2016-09-07T19:41:39ZèHey @sstern6 @ilyavolodin im still picking this up, life has been weird recently but I'm back on the horse! will get some code up in a pr soon!:U
2016-09-08T01:50:49Z=code is ready for a pr, will work on getting that up tomorrow¿)…∑2015-05-10T23:34:58Z"2015-05-13T18:30:51Z*ÆI just created my shareable config and tried to use it on my personal project  and it gave a stack overflow error.
Node js: 0.12.2
eslint: 0.21.0
parser: default
Here is the my project tree
Base folder -> package.json
               .eslintrc
               lib -> app.js
                      launcher.js
                      util -> file.js
                              svn.js 

.eslintrc file:
{
    "env": {
        "node": true,
        "browser": true,
        "mocha": true
    },
    "extends": "eslint-config-gyandeep",
    "rules": {
        "strict":2
    },
    "globals": {
        "$": true
    }
}
Output:
c:\Users\GS025879\Documents\webstrom\launcher\node_modules\eslint\lib\config.js:115
                throw e;
                      ^
RangeError: Maximum call stack size exceeded
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep

<repeat this statement many times > 

Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: eslint-config-gyandeep
Referenced from: c:\Users\GS025879\Documents\webstrom\launcher\.eslintrc
    at inspect (util.js:127:3)
    at Console.exports.format (util.js:27:20)
    at Console.warn (console.js:63:34)
    at loadConfig (c:\Users\GS025879\Documents\webstrom\launcher\node_modules\eslint\lib\config.js:89:25)
    at loadConfig (c:\Users\GS025879\Documents\webstrom\launcher\node_modules\eslint\lib\config.js:109:44)
    at loadConfig (c:\Users\GS025879\Documents\webstrom\launcher\node_modules\eslint\lib\config.js:109:44)
    at loadConfig (c:\Users\GS025879\Documents\webstrom\launcher\node_modules\eslint\lib\config.js:109:44)
    at loadConfig (c:\Users\GS025879\Documents\webstrom\launcher\node_modules\eslint\lib\config.js:109:44)
    at loadConfig (c:\Users\GS025879\Documents\webstrom\launcher\node_modules\eslint\lib\config.js:109:44)
    at loadConfig (c:\Users\GS025879\Documents\webstrom\launcher\node_modules\eslint\lib\config.js:109:44)
Imp: This error only happens under sub-directory scenario. If run eslint on a directory which doesnt have sub-directories then it runs fine.
Here is my take on why this is happening:
By default node require caches all the modules. So what happens is that during the first run ie for files inside lib folder it scans the config files and its extensions. As me do the merge on the config object, it basically overwrites the require's chache for the extend module as objects are passed by reference.
So when eslint process the internal directory (in here the util directory) it again runs the config which when uses the extend require actually has an extend in its object which points to itself.
This is where we get the extended configuration module and save it to the config object:
https://github.com/eslint/eslint/blob/master/lib/config.js#L86
This is where we merge the config and save it back to the config object: https://github.com/eslint/eslint/blob/master/lib/config.js#L1052I
(a7ab6f4140c0e7e0e436f466012fa859e22a24f02015-05-13T18:17:16Z5554486:⁄
2015-05-11T19:00:33Z¡I ran into the same issue. It seems that "extends" key from the child config overwrites the parent config and config resolver falls into the infinite loop because "extends" key always stays there: 
  
    
      eslint/lib/config.js
    
    
         Line 105
      in
      5d5b4f4
    
    
    
    

        
          
           config = util.mergeConfigs(loadConfig(parentPath), config); 
        
    
  


Maybe there is an issue with native require that proxyquire does not reproduce?

  
    
      eslint/tests/lib/config.js
    
    
         Line 558
      in
      5d5b4f4
    
    
    
    

        
          
           var StubbedConfig = proxyquire("../../lib/config", { 
        
    
  


Maybe the "extends" key should be removed from the extended config after loading or configs should be cached by eslint?:ö
2015-05-11T19:40:45ZÅ@mcharytoniuk There is no issue with native require it is built to work like that. Native require always caches required modules.:Î
2015-05-12T22:30:55Z“@gyandeeps üëç spotted the same issue myself and the solution here is practically exactly the same as what fixed it for me.
I'm considering even pointing my package at your commit until it is merged in.
Thanks:9
2015-05-13T03:45:27Z!I can confirm this issue as well.::
2015-05-14T00:13:15Z"üëç  thank you so much @gyandeeps:1
2015-05-14T00:14:14Znp üëç
@jonathanKingston¥“˛2015-08-20T01:37:26Z"2015-08-20T18:24:12Z*áprefer-arrow-callback is incorrectly warning when using a named callback. If the function is named and it's being referenced, it should not warn because arrow functions can only be anonymous. Example:
// warns but it shouldn't
foo(function bar () {
    bar();
});2I
(ad4cebc3894b0115b27bb72ecedbd53e7962fb6b2015-08-20T11:36:03Z1937871:‹
2015-08-20T01:37:27Z√Thanks for the issue! We get a lot of issues, so this message is automatically posted to each one to help you check that you've included all of the information we need to help you.
Reporting a bug? Please be sure to include:

The version of ESLint you are using (run eslint -v)
The source code that caused the problem
The configuration you're using (for the rule or your entire config file)
The actual ESLint output complete with line numbers

Requesting a new rule? Please be sure to include:

The use case for the rule - what is it trying to prevent or flag?
Whether the rule is trying to prevent an error or is purely stylistic
Why you believe this rule is generic enough to be included

Requesting a feature? Please be sure to include:

The problem you want to solve (don't mention the solution)
Your take on the correct solution to problem

Including this information in your issue helps us to triage it and get you a response as quickly as possible.
Thanks!:N
2015-08-20T04:14:53Z6Thanks for the report.
You are right, I will fix this.:w
2016-03-25T17:07:48Z_I know this issue has already been closed, but I am still having this problem, even after #3461:D
2016-03-25T17:13:06Z,@vtfn Could you share steps to reproduce it?:∫
2016-03-25T18:08:03Z°@mysticatea
function foo(fn) {
fn();
}
foo(function named() {
console.log('this is just a useless function example');
});
Even though the 'named' function isn't been called from inside itself, the code above should not raise a warning.
Using named functions like this improve stack traces.:\
2016-03-25T18:13:59ZD@vtfn It's not the intention of this issue, so please open an issue.:"
2016-03-25T18:18:42Z
Ok. sorry.˜"ïª52016-08-04T20:42:07Z"2016-08-05T15:23:36Z*≠What version of ESLint are you using?
3.2.2
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
Was automatically generated by eslint --init command (See raw output in the end):
module.exports = {
    "extends": "airbnb",
    "plugins": [
        "react"
    ]
};
What did you do? Please include the actual source code causing the issue.
I called eslint --init from the command line. See raw output in the end
What did you expect to happen?
I expected eslint --init to install everything needed for the AirBnB style guide after I selected that I wanted to follow that style guide.
What actually happened? Please include the actual, raw output from ESLint.
Two dependencies were missing for eslint-config-airbnb to run properly, eslint-plugin-import and eslint-plugin-jsx-a11y.
Full output starting from a fresh eslint --init call:
~/Workspace/test_eslint_init$ node_modules/.bin/eslint --init
? How would you like to configure ESLint? Use a popular style guide
? Which style guide do you want to follow? AirBnB
? What format do you want your config file to be in? JavaScript
Installing eslint-plugin-react, eslint-config-airbnb
test_eslint_init@1.0.0 /Users/vitorbalocco/Workspace/test_eslint_init
‚îú‚îÄ‚î¨ eslint-config-airbnb@10.0.0
‚îÇ ‚îú‚îÄ‚îÄ eslint-config-airbnb-base@5.0.1
‚îÇ ‚îî‚îÄ‚îÄ UNMET PEER DEPENDENCY eslint-plugin-import@^1.12.0
‚îú‚îÄ‚îÄ UNMET PEER DEPENDENCY eslint-plugin-import@^1.12.0
‚îú‚îÄ‚îÄ UNMET PEER DEPENDENCY eslint-plugin-jsx-a11y@^2.0.1
‚îî‚îÄ‚î¨ eslint-plugin-react@6.0.0
  ‚îî‚îÄ‚îÄ jsx-ast-utils@1.3.1

npm WARN eslint-config-airbnb@10.0.0 requires a peer of eslint-plugin-jsx-a11y@^2.0.1 but none was installed.
npm WARN eslint-config-airbnb@10.0.0 requires a peer of eslint-plugin-import@^1.12.0 but none was installed.
npm WARN eslint-config-airbnb-base@5.0.1 requires a peer of eslint-plugin-import@^1.12.0 but none was installed.
npm WARN test_eslint_init@1.0.0 No description
npm WARN test_eslint_init@1.0.0 No repository field.
Successfully created .eslintrc.js file in /Users/vitorbalocco/Workspace/test_eslint_init
~/Workspace/test_eslint_init$
~/Workspace/test_eslint_init$ touch test.js
~/Workspace/test_eslint_init$ node_modules/.bin/eslint test.js

Oops! Something went wrong! :(

ESLint couldn't find the plugin "eslint-plugin-jsx-a11y". This can happen for a couple different reasons:

1. If ESLint is installed globally, then make sure eslint-plugin-jsx-a11y is also installed globally. A globally-installed ESLint cannot find a locally-installed plugin.

2. If ESLint is installed locally, then it's likely that the plugin isn't installed correctly. Try reinstalling by running the following:

    npm i eslint-plugin-jsx-a11y@latest --save-dev

If you still can't figure out the problem, please stop by https://gitter.im/eslint/eslint to chat with the team.2H
(7e1bf01ca73f4820cc7837bc84f40b6ea1bbee6e2016-08-05T15:23:33Z626038:ˇ
2016-08-04T20:50:06ZÊIdeally we could find a way to keep the peerDependencies in sync with the help of a shell command like the one suggested in the eslint-config-airbnb repository.
But considering the added amount of work, I think for now it would be acceptable to just update the getConfigForStyleGuide function in lib/config/config-initializer.js.
I'm willing to work on this.:ä
2016-08-04T20:52:19ZÒLooking ahead a bit, I wonder if we could extract some of that information to a configurable JSON file to make maintenance a bit easier?
I'm not advocating doing that for this issue-- just thinking it might be a worthwhile refactor later on.:ä
2016-08-04T20:53:00ZrAgreed, the thought crossed my mind as well. How do we usually approach this? A separate "Chore:" commit, perhaps?:ç
2016-08-04T21:39:25Zu@vitorbal Yeah, separate chore issue and commit might be the way to go. (Although that could be an Update, not sure.):ø
2016-08-05T00:30:01Z¶I don't really think that extracting it to JSON file is going to help any. It's already trivial to add dependencies to the init command, since it just requires adding additional string to an array. (see https://github.com/eslint/eslint/pull/6657/files#diff-da527c6839c0e6e4d343b5c77fcdd27cR281):⁄
2016-08-05T07:00:42Z¡The airbnb config may add or remove peer deps at any time, so using the command referenced here, which looks up whatever's in the config's package.json, is going to be the most robust approach.â¶˛=2017-01-18T02:58:12Z"2017-01-19T19:40:30Z*´	What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 7.3.0
npm Version: 3.10.10

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
(none)
What did you do? Please include the actual source code causing the issue.
/* eslint no-useless-computed-key: error */

({ ['__proto__']: [] }) instanceof Array;
What did you expect to happen?
I expected no error to be reported, because using '__proto__' directly as the object key would set the value of Object.getPrototypeOf(theObject), and the expression's value would change from false to true.
What actually happened? Please include the actual, raw output from ESLint.
3:4  error  Unnecessarily computed property ['__proto__'] found  no-useless-computed-key

What changes did you make? (Give an overview)
This updates no-useless-computed-key to avoid reporting computed keys that have the literal value __proto__. __proto__ is a special key that sets the internal [[Prototype]] property of an object when used in an object literal.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(8ac3518fed0a2b9b7729dc2ab0b09d6fac0617d82017-01-19T19:40:29Z11638619:√
2017-01-18T02:58:12Z™@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @BYK, @mysticatea and @vitorbal to be potential reviewers.:
2017-01-18T02:58:13ZLGTM:c
2017-01-18T17:00:33ZKAre there any other cases we need to handle? Like constructor or prototype?:Q
2017-01-18T17:11:32Z9I think __proto__ is the only case like this. (spec text):€
2017-01-18T17:27:18Z¬This is in Appendix B of the spec. Do we have a position on supporting Appendix B features? Should we consider having a core or parser option for deciding whether Appendix B should be in effect?:‡
2017-01-18T17:31:07Z«I don't think it's an official policy, but with no-useless-escape we take the conservative approach of only reporting an error if a problem exists regardless of whether the engine implements Annex B.˜°ƒE2017-07-09T02:21:14Z"2017-07-09T03:35:56Z*éWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8892)



What changes did you make? (Give an overview)
Previously, the indent rule would only offset the first token of an element in a list (e.g. an array). However, this was incorrect because the other tokens of the element might not depend on the indentation of the first token. For example, in a function expression, the indentation of the parens does not depend on the indentation of the function token. This commit updates the indent rule to correctly offset all of the tokens in the element.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(e0f0101fb949cf1aae5dc825cde9650743f0d5d12017-07-09T03:35:55Z11638619:
2017-07-09T02:21:15ZLGTM:«
2017-07-09T02:21:26ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @gyandeeps and @valorkin to be potential reviewers.¬›Ω$2015-12-11T06:08:46Z"2015-12-13T01:00:37Z*∂What version are you using?
1.10.3
What did you do?
Use this in a static class method, like this:
'use strict';

/* eslint-env node, es6 */
/* eslint no-invalid-this: 2 */

class Foo
{
    static foo()
    {
        console.log('foo');
        this.bar();
    }

    static bar()
    {
        console.log('bar');
    }
}

const f = new Foo();
f.constructor.foo();

// console output
foo
bar
What happened?
When I run eslint --no-eslintrc on this code, I get this error:
  11:9  error  Unexpected `this`  no-invalid-this

What did you expect to happen?
There shouldn't be an error, this code works fine. Using this in a static function to refer to the class is valid in node, Safari and Chrome.2I
(b394193160dc8e885564fa40323b8f17116294502015-12-12T22:51:08Z1937871:˘
2015-12-11T06:08:47Z‡@aparajita Thanks for the issue! If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead

Requesting a new rule? Please see Proposing a New Rule for instructions.:û
2015-12-11T16:06:53ZÖESLint doesn't really support experimental features. You might need to make an issue for https://github.com/babel/eslint-plugin-babel:R
2015-12-11T17:40:21Z:@ilyavolodin this is ES6, not experimental.
This is a bug.:p
2015-12-11T17:45:29ZXAhh.. sorry about that. I was under the impression that static was not part of ES6 spec.:Ö
2015-12-12T18:35:38ZmIt's actually a wrong design decision. The docs for that rule explicitly show this use case as being invalid.:
2015-12-13T03:32:47ZThanks!€ô $2015-12-12T21:53:29Z"2015-12-14T03:12:48Z*◊Here: https://github.com/eslint/eslint/blob/v2.0.0-alpha-1/lib/eslint.js#L405
config.parserOptions.ecmaFeatures is shallow copied, so L414 overwrites original config.
I encountered incorrect warnings caused by this.2I
(db6c5b3499f1008567c30b05a1c457820f1476ea2015-12-12T23:54:53Z1937871:ä
2015-12-12T21:59:07Zrhuh but config.merge function is supposed to do a deep copy. Are we sure line L405 is the true cause of the issue?:Ò
2015-12-12T22:06:17ZÿI believe.
This deep merge is not deep copy.
When the destination property does not exist, deep merge is assigning the source merely.
https://github.com/eslint/eslint/blob/v2.0.0-alpha-1/lib/config/config-ops.js#L174:”
2015-12-12T22:25:58Z∫We can reproduce in this repo's branch: https://github.com/mysticatea/npm-run-all/tree/try-eslint-2a1

clone
checkout try-eslint-2a1
npm i
npm run lint

There is a mix of ES6 and ES5 in this repo, so I use two kind of eslint config.

extends: ["mysticatea", "mysticatea/modules", "mysticatea/node"]
extends: ["mysticatea/es5", "mysticatea/node"]

mysticatea/node has parserOptions.ecmaFeatures.globalReturn: true but it's rewritten with false in the former, then eslint shows wrong warnings (mainly no-implicit-globals) in the latter.

Hmm, should I fix ConfigOps.merge?:>
2015-12-12T22:28:20Z&if its an issue then we should fix it.:k
2015-12-13T02:49:36ZSOh, RuleTester freezes config object, so several my plugin's tests are failed here.≠û<2016-12-07T07:39:54Z"2016-12-09T08:37:44Z*ÍWhat is the purpose of this pull request?
[x] Bug fix
See #7700
What changes did you make?
I updated no-obj-calls to account for the new global Reflect introduced in ECMAScript 2015. This reports an error about the Reflect() call, because it's a global object property and not a function.
Is there anything you'd like reviewers to focus on?
Nothing in particular2I
(4278c424f775556316cfd9af84acea64d6ba15d22016-12-09T08:37:44Z3720424:»
2016-12-07T07:39:54ZØ@techeverri, thanks for your PR! By analyzing the history of the files in this pull request, we identified @pedrottimark, @vitorbal and @ilyavolodin to be potential reviewers.:;
2016-12-07T07:39:55Z#All committers have signed the CLA.:
2016-12-07T07:39:55ZLGTM:
2016-12-07T17:58:57ZLGTM:B
2016-12-07T18:02:37Z*@not-an-aardvark commit message updated :)::
2016-12-09T08:38:56Z"Thanks for contributing to ESLint!î	uú+2016-03-10T10:50:25Z"2016-03-13T18:46:55Z*ÜWhat version of ESLint are you using?
v2.3
What configuration and parser (Espree, Babel-ESLint, etc.) are you using?
the built in one
What did you do? Please include the actual source code causing the issue.
const a = {
  'some//key': 1,
};

a.toString();

What did you expect to happen?
To have no lint error
What actually happened? Please include the actual, raw output from ESLint.
Unnecessarily quoted property 'some//key' found. (quote-props)

I'm using this preset:
https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb/base.js
This is the rule line
https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb/rules/style.js#L114
'quote-props': [2, 'as-needed', { 'keywords': false, 'unnecessary': true, 'numbers': false }],2H
(689cb7d2a99319b632890b89ecb07e2edd2100072016-03-13T12:12:48Z126780:º
2016-03-10T11:05:12Z£Thank you for this issue.
I confirmed it.
I guess espree.tokenize ignores the //key part: https://github.com/eslint/eslint/blob/master/lib/rules/quote-props.js#L71:)
2016-03-13T12:04:38ZLooking into this:$
2016-03-13T18:57:17Z@BYK Thanks!√,ﬂí2015-08-21T12:36:40Z"2015-08-24T21:04:42Z*—sort-vars rule crashes when memo is undefined.
node.declarations.reduce(function(memo, decl) {
    if (decl.id.type !== "ObjectPattern" && decl.id.type !== "ArrayPattern") {
        var lastVariableName,
            currenVariableName;

        lastVariableName = memo.id.name;
        currenVariableName = decl.id.name;

        if (ignoreCase) {
            lastVariableName = lastVariableName.toLowerCase();
            currenVariableName = currenVariableName.toLowerCase();
        }

        if (currenVariableName < lastVariableName) {
            context.report(decl, "Variables within the same declaration block should be sorted alphabetically");
            return memo;
        } else {
            return decl;
        }
    }
}, node.declarations[0]);
This affects tools such as eslint-watch and gulp-eslint, e.g.
adametry/gulp-eslint#862H
(b5005fcbb3c4c40af965b216e06ad74e4b1fe3332015-08-24T10:03:30Z126780:‹
2015-08-21T12:36:41Z√Thanks for the issue! We get a lot of issues, so this message is automatically posted to each one to help you check that you've included all of the information we need to help you.
Reporting a bug? Please be sure to include:

The version of ESLint you are using (run eslint -v)
The source code that caused the problem
The configuration you're using (for the rule or your entire config file)
The actual ESLint output complete with line numbers

Requesting a new rule? Please be sure to include:

The use case for the rule - what is it trying to prevent or flag?
Whether the rule is trying to prevent an error or is purely stylistic
Why you believe this rule is generic enough to be included

Requesting a feature? Please be sure to include:

The problem you want to solve (don't mention the solution)
Your take on the correct solution to problem

Including this information in your issue helps us to triage it and get you a response as quickly as possible.
Thanks!:O
2015-08-21T13:12:01Z7Can you provide a code example to reproduce this error?:Í
2015-08-21T13:36:26Z—The code that is failing:
let selector,
    locationSelector = state => state.locations,
    screeningSelector = state => state.screenings,
    eventSelector;
let {
        foo,
        bar
    } = this.props;:«
2015-08-21T14:01:15ZÆ@gajus - I can't reproduce this error on latest master. Which version of eslint are those packages using? Uninstalling and reinstalling them would probably solve the problem.:]
2015-08-21T14:05:19ZE@BYK I have made sure that packages use the latest version of ESLint.:i
2015-08-21T14:05:39ZQJust to be clear, I could not reproduce the same issue using the ESLint CLI tool.:Ÿ
2015-08-21T14:07:59Z¿@gajus - Same here, can't repro in tests either. May be this is an issue with those packages?
Also, the only way memo can be undefined is when node.declarations is empty which is not possible.:Ü
2015-08-21T14:10:20ZÌI have opened the issue with gulp-eslint too, adametry/gulp-eslint#86. Lets wait for their follow up. It might be an issue in those two packages. It would be a bit odd, though if two completely separate packages implement the same error.:π
2015-08-24T08:40:04Z†I have made a mistake. This issue is reproducible with vanilla ESLint using the following configuration:
{
    "ecmaFeatures": {
        "modules": true
    },
    "env": {
        "es6": true
    },
    "rules": {
        "sort-vars": 2
    }
}
https://github.com/gajus/eslint-issue-3474:l
2015-08-24T09:46:26ZTI've also read the code incorrectly. I now can see how it can get an undefined memo.:ù
2016-07-12T13:04:56ZÑ@BYK I can still reproduce it with eslint v3.0.1
Eslint config
{
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module",

    "ecmaFeatures": {
      "experimentalObjectRestSpread": true,
      "modules": true,
      "jsx": true
    }
  },

  "rules": {
    "sort-vars": [1, {"ignoreCase": true}]
  }
}
Error message
Cannot read property 'toLowerCase' of undefined
TypeError: Cannot read property 'toLowerCase' of undefined
    at /usr/local/lib/node_modules/eslint/lib/rules/sort-vars.js:49:60
    at Array.reduce (native)
    at EventEmitter.VariableDeclaration (/usr/local/lib/node_modules/eslint/lib/rules/sort-vars.js:40:35)
    at emitOne (events.js:82:20)
    at EventEmitter.emit (events.js:169:7)
    at NodeEventGenerator.enterNode (/usr/local/lib/node_modules/eslint/lib/util/node-event-generator.js:40:22)
    at CodePathAnalyzer.enterNode (/usr/local/lib/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:607:23)
    at CommentEventGenerator.enterNode (/usr/local/lib/node_modules/eslint/lib/util/comment-event-generator.js:97:23)
    at Controller.traverser.traverse.enter (/usr/local/lib/node_modules/eslint/lib/eslint.js:905:36)
    at Controller.__execute (/usr/local/lib/node_modules/eslint/node_modules/estraverse/estraverse.js:397:31)

Code caused exception
class Calendar extends Component {
  render() {
    const
      {params: {date = defaultDate}, route: {scale = defaultScale}, pushURL, events} = this.props,
      ChildComponent = {Day, Week, Month}[_.capitalize(scale)];
  };
}

export default Calendar;
No error if I remove second var declaration:
class Calendar extends Component {
  render() {
    const
      {params: {date = defaultDate}, route: {scale = defaultScale}, pushURL, events} = this.props;
  };
}

export default Calendar;:ê
2016-07-12T13:28:19Z˜Even this cause an exception:
handleDayClick(item) {
  const
    {selectDateHandler, uniqueId, handlePickDate} = this.props,
    date = getDate(item);

    selectDateHandler(uniqueId, date.format(settings.DATE_FORMAT));
    handlePickDate(date);
}ç˘◊E2017-07-10T22:35:52Z"2017-08-01T09:54:43Z*ÚESLint Version: 4.2.0
Node Version: 4.4.3
npm Version: 2.15.11

What parser (default, Babel-ESLint, etc.) are you using?: default
The getter-return rule seems to catch any method that is called 'get' and does not have a return statement.  The codebase I'm working on has a number of methods that are names get that take a callback and invoke the callback asynchrously.  Its an older codebase developed before Promises were standard.  This rule seems to catch those cases, which seems incorrect as they are not true 'getters'.
Example:
var x = { get: function(callback) { setTimeout(callback, 0); }};
x.get(function () {....});2J
(c794f86ee9c83cb08c18e093c00af1debf7e69532017-08-01T09:54:43Z13050025:ü
2017-07-10T22:45:40ZÜI think the goal of this was to catch things like
Object.defineProperty(foo, 'bar', {
    get: function() {
        // no return statement
    }
});
But I agree that the current check seems overly strict, since it applies to any function named "get". If it's trying to detect errors in Object.defineProperty, it should actually make sure the object is part of an Object.defineProperty call.:h
2017-07-14T23:00:46ZPThis should also check for Object.defineProperties as well as ES6 getter syntax.:ó
2017-07-14T23:06:15Z˛It already checks getter syntax. (See here for how it decides whether to check a function.)
However, there is also another issue where it has a false negative for arrow functions in property descriptors:
Object.defineProperty(foo, 'bar', {get: () => {}}):ﬂ
2017-07-24T12:11:58Z∆I wrote this rule and this is intended, as the saying in the PR #8460

for code like this:

  var foo = { get: function () {bar();} };

it is not a getter function, but naming a method get that does not return a value, is so confusing, causing an error may be somewhat reasonable.

In most cases, I think it may be reasonable.:è
2017-07-24T14:34:10ZwI would be üëç to only checking get functions that are part of Object.defineProperty or Object.defineProperties calls.≤˝-2016-04-18T18:49:23Z"2016-04-25T23:04:46Z*ÀWhat version of ESLint are you using?
v2.8.0
What parser (default, Babel-ESLint, etc.) are you using?
babel-eslint
Please show your full configuration:
{
    "rules": {
        "id-match": [
            2,
            "(^[A-Za-z]+(?:[A-Z][a-z]*)*\\d*$)|(^[A-Z]+(_[A-Z]+)*(_\\d$)*$)|(^(_|\\$)$)",
            {
                "onlyDeclarations": true,
                "properties": true
            }
        ]
    }
}
What did you do? Please include the actual source code causing the issue.
The subject code:
export default {
    context: __dirname
};
What did you expect to happen?
I expected no linting error.
What actually happened? Please include the actual, raw output from ESLint.
I got a linting error:
‚ïë Line     ‚îÇ Column   ‚îÇ Type     ‚îÇ Message                                                ‚îÇ Rule ID              ‚ïë
‚ïü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ï¢
‚ïë 25       ‚îÇ 14       ‚îÇ error    ‚îÇ Identifier '__dirname' does not match the pattern      ‚îÇ id-match             ‚ïë
‚ïë          ‚îÇ          ‚îÇ          ‚îÇ '(^[A-Za-z]+(?:[A-Z][a-z]*)*\d*$)|(^[A-Z]+(_[A-        ‚îÇ                      ‚ïë
‚ïë          ‚îÇ          ‚îÇ          ‚îÇ Z]+)*(_\d$)*$)|(^(_|\$)$)'                             ‚îÇ                      ‚ïë

This is in relation to the following PR, #5631.2H
(1e7a3ef6ea2299e62aa7ac0fd79bb38bdbf7b44b2016-04-25T23:04:42Z364532:ú
2016-04-18T18:50:04ZÉI don't understand what is the reason __dirname is treated as a property.
This is the code bit that wrongly (?) assumes that __dirname is a property, https://github.com/gajus/eslint/blob/ccd8ca91c920f0a847c9510e6f83aa01aff2b07e/lib/rules/id-match.js#L97-L107.:«
2016-04-18T20:35:24ZÆI wonder if that bit of code was meant to check property keys only? In that case, it would be sufficient to check node.parent.type === "Property" && node.parent.key === node.:†
2016-04-24T20:38:43ZáIt looks like it warns for both the keys and values of properties...Read over the rule docs, and it's not clear to me if that was the original intent or not. If we decide this is the desired behavior, we should make the docs clearer. @eslint/eslint-team thoughts?:·
2016-04-24T20:56:19Z»I think it should be keys only. If someone wanted to flag property values, too, they could turn off onlyDeclarations so it flags uses of identifiers that are not declared in the same script or module.:T
2016-04-25T05:10:04Z<Yeah, this just seems like a bug. I'd like to take this one.:‰
2016-04-25T05:22:55ZÀLooks like https://github.com/eslint/eslint/pull/5631/files also missed adding the new option to the rule  schema. There's no automatic test for that? I suppose I should file a separate chore for that...::
2016-04-25T16:15:46Z"@kaicataldo care to review #5960 ?öÙç=2016-12-29T23:02:27Z"2017-01-01T01:16:51Z*÷Tell us about your environment

ESLint Version:
3.12.2
Node Version:
6.9.1
npm Version:
3.10.8

What parser (default, Babel-ESLint, etc.) are you using?
babel-eslint  (7.1.1)
Please show your full configuration:

{
  "parser": "babel-eslint",
  "extends": "airbnb",
  "rules": {
    "max-len": [1, 120, 2, {"ignoreComments": true}],
    "semi":["warn", "never"],
    "comma-dangle": ["error", {
        "functions": "never"
      }
    ],
    "no-underscore-dangle": [0],
    "react/prop-types": [0],
    "react/forbid-prop-types": [0],
    "react/jsx-filename-extension": [0],
    "import/no-named-as-default": [0],
    "import/no-extraneous-dependencies": ["error", {
        "devDependencies": ["**/*.spec.js"]
      }
    ],
    "jsx-a11y/no-static-element-interactions": [0],
    "no-plusplus": ["error", { "allowForLoopAfterthoughts": true }]
  },
  "env": {
    "browser": true,
    "node": true,
    "mocha": true
  },
  "globals": {
    "__PROD__": false,
    "__DEV__": false
   ...
  }
}

What did you do? Please include the actual source code causing the issue.

function receiveProfileUpdate(user) {
  return (dispatch) => {
    dispatch(resetErrors())
    dispatch(setTimeoutableSuccessMessage('Successfully Updated Profile.'))
    dispatch(setCurrentUser(user))
    browserHistory.push(PROFILE_URL(user.username))
  }
}
What did you expect to happen?
No errors to be thrown
What actually happened? Please include the actual, raw output from ESLint.
106:14 error Implied eval. Consider passing a function instead of a string no-implied-eval
Caused by using a string as a parameter for setTimeoutableSuccessMessage
Note:
Updating code to :
function receiveProfileUpdate(user) {
  return (dispatch) => {
    dispatch(resetErrors())
    const message = 'Successfully Updated Profile.'
    dispatch(setTimeoutableSuccessMessage(message))
    dispatch(setCurrentUser(user))
    browserHistory.push(PROFILE_URL(user.username))
  }
}
fixed the issue, but it doesn't seem right to have to use that workaround. Now that I'm looking at it more the function name may be causing the rule to think it's setTimeout, and cause the bug.2J
(c5c3b21257f1307a8f627c3488874a2f5214e79a2017-01-01T01:16:47Z11638619:ö
2016-12-30T00:25:16ZÅI think you're right, we're checking for the function name starting with setTimeout. Definitely a bug. Thanks for reporting this!:$
2016-12-30T00:31:52ZMy pleasure!πî<2016-12-06T00:37:27Z"2016-12-09T08:37:48Z*∫Tell us about your environment

ESLint Version: 3.11.1
Node Version: 7.2.0
npm Version: 3.10.9

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  no-obj-calls: error
What did you do? Please include the actual source code causing the issue.

Reflect();
What did you expect to happen?
I expected ESLint to report an error about the Reflect() call, because it's a global object property and not a function.
What actually happened? Please include the actual, raw output from ESLint.
ESLint did not report any errors. Presumably, this is because the no-obj-calls hasn't been updated to account for the new globals that were introduced in ES6.2I
(4278c424f775556316cfd9af84acea64d6ba15d22016-12-09T08:37:44Z3720424’È”32016-07-06T15:32:14Z"2016-07-08T22:20:50Z*‚#6305 appears to have a bug or unintended behavior.
According to docs/developer-guide/nodejs.md:

If a filename in the optional second parameter matches a file that is configured to be ignored, then this function returns no errors or warnings. To return a warning instead, call the method with true as the optional third parameter.

Based on that, and based on the parameter name warnIgnored, I would expect that, if a file is configured to be ignored, then it either is ignored completely (warnIgnored is falsy, the default), or it generates a single warning telling the user that it's ignored (warnIgnored is truthy).
Instead, as far as I can tell, if warnIgnored is falsy, the file is not ignored; it's processed and generates warnings and errors just as if it weren't ignored at all. (See here.)
This resulted in webpack-contrib/eslint-loader#97 with ESLint 3.0.2G
(baeb313a6e50a32f24bad9a08b0a0443ab5f879c2016-07-08T22:20:48Z38546:°
2016-07-06T17:57:24ZàAre you suggesting that those CLIEngine lines should maybe look more like this?
        if (filename && ignoredPaths.contains(filename)) {
            if (warnIgnored) {
                results.push(createIgnoreResult(filename, options.cwd));
            }
        } else {
            results.push(processText(text, configHelper, filename, options.fix, options.allowInlineConfig));
        }:P
2016-07-06T17:58:36Z8If I understand the intent of the change correctly, yes.:á
2016-07-06T18:02:27Zo@joshkel Awesome. I think you're probably correct that this is a bug. We'll see if the rest of the team agrees.:©
2016-07-07T18:42:22ZêYeah, I think the logic is messed up.
@joshkel in the future, please be sure to use our issue template to report bugs. It really helps us a lot.:G
2016-07-07T20:36:53Z/@nzakas - Will do. Sorry for the inconvenience.¸Åÿ32016-07-06T22:13:04Z"2016-07-18T17:48:13Z*øWhat version of ESLint are you using? 2.13.0
What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration: "func-names": [2, "never"]
The problem you want to solve
I would like to never use function names, because in Mozilla code the names in stacks are guessed pretty well nowadays. There are some cases where I still need them though, namely when referencing the function name within for a recursive call.
Example:
setTimeout(function postpone() {
    let thing = getThing();
    if (!thing) {
        setTimeout(postpone, 0);
    } else {
        complete();
    }
}, 0);
Your take on the correct solution to problem.
I would suggest to add an keyword option recursive or similar, setting it to true would allow use of function names if referenced from within. The default should be true.2G
(cb90359d965e4a18284f58992e8ea75580ae21ed2016-07-18T17:48:10Z72561:/
2016-07-07T19:33:19ZSeems reasonable to me.:«
2016-07-08T03:35:16ZÆRight now func-names is either "always" or "never". What about making it "always/recursive/never"? That would be a non-breaking enhancement and avoid a boolean object option.:Ì
2016-07-08T04:53:09Z‘I think that we can address this issue as a false positive.

prefer-arrow-callback skips functions if the name of the function is used. This is similar to that.
This fix would reduce warnings. (it's patch thing.):d
2016-07-12T18:42:04ZLGood point. @btmills do you see any value in having it as a separate option?:ô
2016-07-13T03:01:22ZÄ@mysticatea's argument makes sense. Right now "never" has the side effect of forbidding recursion, which is (supposed to be) unrelated to this rule. I'd support classifying this as a bug and excepting recursive named function expressions from "never". üëç:,
2016-07-13T19:17:12ZI'm working on this.:"
2016-07-14T00:41:44Z
Thank you!…ö÷"2015-11-16T04:24:50Z"2015-11-16T14:38:15Z*…
> eslint -v
v1.9.0
> echo "Object.defineProperties()" | eslint --stdin --no-eslintrc --rule "no-extend-native:2"
Cannot read property 'object' of undefined
TypeError: Cannot read property 'object' of undefined
    at EventEmitter.CallExpression (C:\Users\t-nagashima.AD\Documents\GitHub\eslint\node_modules\eslint\lib\rules\no-extend-native.js:71:33)
    at emitOne (events.js:77:13)
    at EventEmitter.emit (events.js:169:7)
    at NodeEventGenerator.enterNode (C:\Users\t-nagashima.AD\Documents\GitHub\eslint\node_modules\eslint\lib\util\node-event-generator.js:42:22)
    at CommentEventGenerator.enterNode (C:\Users\t-nagashima.AD\Documents\GitHub\eslint\node_modules\eslint\lib\util\comment-event-generator.js:98:23)
    at Controller.controller.traverse.enter (C:\Users\t-nagashima.AD\Documents\GitHub\eslint\node_modules\eslint\lib\eslint.js:771:36)
    at Controller.__execute (C:\Users\t-nagashima.AD\Documents\GitHub\eslint\node_modules\estraverse\estraverse.js:397:31)
    at Controller.traverse (C:\Users\t-nagashima.AD\Documents\GitHub\eslint\node_modules\estraverse\estraverse.js:495:28)
    at EventEmitter.module.exports.api.verify (C:\Users\t-nagashima.AD\Documents\GitHub\eslint\node_modules\eslint\lib\eslint.js:768:24)
    at processText (C:\Users\t-nagashima.AD\Documents\GitHub\eslint\node_modules\eslint\lib\cli-engine.js:225:27)2I
(812c263b7e1b568b6bbb8557d6135224b9bcfda22015-11-16T04:36:46Z1937871Ç´“42016-07-22T06:28:17Z"2016-07-24T03:11:48Z*±What version of ESLint are you using?
2.10.2
What parser (default, Babel-ESLint, etc.) are you using?
Default
Please show your full configuration:
const options = {
  // TODO: Actually set the envs correctly
  envs: ['browser', 'mocha', 'node', 'es6'],
  useEslintrc: false,
  extends: 'eslint:recommended',
  ignorePattern: [
    'node_modules',
    'bower_components',
    'build',
    'tmp',
    'dist'
  ],
  // Eventually let's enable it to fix problems automatically! :D
  // fix: true,
  rules: {
    semi: WARN,
    strict: [WARN, 'safe'],
    'no-undef': ERROR,
    'wrap-iife': WARN,
    'no-trailing-spaces': WARN,
    'comma-style': [WARN, 'last'],
    'new-parens': WARN,
    'no-inline-comments': WARN,
    'no-sequences': ERROR,
    'no-alert': WARN,
    'no-caller': WARN,
    'no-lone-blocks': WARN,
    'object-curly-spacing': [WARN, 'never'],
    'space-infix-ops': WARN,
    'space-unary-ops': [WARN, {words: true, nonwords: false}],
    'spaced-comment': [WARN, 'always'],
    'no-unused-vars': [WARN, {argsIgnorePattern: '^_'}]
  }
};
What did you do? Please include the actual source code causing the issue.
I linted code and got back a message without a period.
const cli = new eslint.CLIEngine(eslintOptions);

function lint(req, res) {
  if ('paths' in req.body) {
    const report = cli.executeOnFiles(req.body.paths);
    if (eslintOptions.fix) {
      eslint.CLIEngine.outputFixes(report);
    }
    res.json(report);
  } else {
    res.status(S.BAD_REQUEST).json({
      error: 'Missing parameter "path"'
    });
  }
}
What did you expect to happen?
I expected the message from the no-unused-vars rule to include a period at the end, like the other messages from ESLint.
What actually happened? Please include the actual, raw output from ESLint.
https://gist.github.com/wavebeem/98136a4d2823a43716e76651571473a62H
(e82545849bc2924663b93936c4156df1251b10fd2016-07-24T03:11:45Z176815:Ä
2016-07-22T07:01:53ZÁJust to avoid potential confusion for people who use the most common formatter, "stylish", it's worth noting that the "stylish" formatter explicitly strips periods off the end of messages. My opinion is that we should still end lint messages with periods in general, because most or all other formatters carry those through.
@wavebeem Thanks very much for the issue and for submitting a pull request to address!
EDIT: Confirmed in online demo, which does not strip periods from messages.:á
2016-07-22T18:04:28ZÓ@platinumazure Oh, that's a good thing to call out! I was wondering why this wasn't noticed sooner, and that makes sense. I found this while making a tool that wraps ESLint, so I might have to copy that approach of trimming final periods!:F
2016-07-22T21:25:40Z.@wavebeem do you want to submit a PR for this?:%
2016-07-22T21:35:32Z@nzakas #6739:T
2016-07-22T21:35:54Z<@nzakas I already have, but it needs some work still (#6739)∂Åô>2017-01-21T08:05:59Z"2017-01-23T17:19:28Z*µTell us about your environment

ESLint Version: master
Node Version: 7.4.0
npm Version: 4.0.5

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
none
What did you do? Please include the actual source code causing the issue.

/* eslint no-var: error */

if (foo) var bar = 1;
What did you expect to happen?
I expected an error to be reported, but no fix to be performed.
What actually happened? Please include the actual, raw output from ESLint.
The code was fixed to
if (foo) let bar = 1;
which is a syntax error.2J
(72d41f0fd832ca8417244e138f8769add400fdec2017-01-23T17:19:24Z11638619øËò>2017-01-21T00:06:48Z"2017-01-23T17:18:15Z*◊What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[ x ] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:



What changes did you make? (Give an overview)
Check the element if its exists before exploring its properties.
Is there anything you'd like reviewers to focus on?
nothing specific2I
(b9e5b68f853404e852888ae0bd1d9e2712dbbca02017-01-23T17:18:14Z5554486:
2017-01-21T00:06:49ZLGTM:«
2017-01-21T00:06:51ZÆ@gyandeeps, thanks for your PR! By analyzing the history of the files in this pull request, we identified @not-an-aardvark, @vitorbal and @valorkin to be potential reviewers.∏Åö>2017-01-21T08:16:56Z"2017-01-23T17:19:25Z*ÀWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#7961)
What changes did you make? (Give an overview)
This updates the no-var autofixer to avoid fixing variable declarations in single-line if/while/etc. statements, because let declarations are not allowed there.
Is there anything you'd like reviewers to focus on?
This is not a particularly urgent fix -- the bug has existed since no-var became autofixable in July. If we do a patch release this week then we might as well include this fix, but I don't think this bug warrants a patch release on its own.2J
(72d41f0fd832ca8417244e138f8769add400fdec2017-01-23T17:19:24Z11638619:À
2017-01-21T08:16:57Z≤@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @alangpierce and @vitorbal to be potential reviewers.:
2017-01-21T08:16:58ZLGTMèØËD2017-06-26T10:22:49Z"2017-06-27T22:30:24Z*õWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix



Tell us about your environment

ESLint Version: master
Node Version: 8.1.2
npm Version: 5.0.3

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  no-extra-parens: error
What did you do? Please include the actual source code causing the issue.
for ((let) in foo); // iterating a variable called "let" over "foo"
for ((let)[foo] in bar); // assigns to the foo property of the "let" variable in a loop
for ((let[foo]) in bar); // assigns to the foo property of the "let" variable in a loop
What did you expect to happen?
I expected eslint --fix to not change the behavior of the code.
What actually happened? Please include the actual, raw output from ESLint.
The code was autofixed to:
for (let in foo); // invalid syntax
for (let[foo] in bar); // destructuring variable assignment (behavior change)
for (let[foo] in bar); // destructuring variable assignment (behavior change)
What changes did you make? (Give an overview)
"let" is unusual because it's sometimes parsed as a variable declaration keyword, and sometimes as an identifier for a variable. This commit fixes some bugs in the no-extra-parens rule where parentheses are unnecessary for most variable names, but are necessary when the variable is called "let".
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(eac06f265f7def113367d07a66a68c09125d98122017-06-27T22:30:24Z11638619:
2017-06-26T10:22:51ZLGTM:S
2017-06-26T17:28:17Z;No, because unlike let, const is not a valid variable name.∫q˛2014-01-14T06:23:50Z"2014-01-17T17:35:03Z*»Using .bind() on a named closure reports that it is defined but not used. This didn't happen prior to 0.2.0 - below cut down example from real code.
function MyFunc(callBack)
{
    callBack();
}

function NextPanel()
{
    MyFunc(
        function HideShowPanel()
        {
            this.show = true;
        }.bind(this));
}2G
(62be675bde9917d4e8d6d64774dc6fdf24070aa42014-01-15T04:41:49Z38546:E
2014-01-14T18:01:30Z-So it is saying that HideShowPanel is unused?:¢
2014-01-14T18:18:50ZâYes. Here's a failing test case:
(function a(){})()

no-unused-vars will tell you that the function is unused, even though it clearly is.:w
2014-01-14T22:04:03Z_Yes, sorry I wasn't clear, it marks HideShowPanel as unused.... without the .bind() it doesn't.:ç
2014-01-15T04:41:12Zu@michaelficarra We already have a test case for that pattern in no-unused-vars and it's passing.
Working on this now.ÑÉÅ2014-01-14T07:05:06Z"2014-01-16T03:08:20Z*ÜThe documentation for the no-empty rule repeatedly uses the term "empty statement" when referring to empty blocks. An empty statement is something else entirely. This use case is actually covered by no-extra-semi (and should probably be linked to from no-empty).2G
(737228956dea1d7fe0f7d158c74a856334f8dd012014-01-15T04:04:27Z38546óõ†<2016-12-07T18:34:58Z"2016-12-09T17:00:36Z*ÊTell us about your environment

ESLint Version: 3.11.1
Node Version: 7.2.0
npm Version: 4.0.2

What parser (default, Babel-ESLint, etc.) are you using? babel-eslint
Please show your full configuration:

module.exports = {
  rules: {
    'prefer-const': 1,
  }
}

What did you do? Please include the actual source code causing the issue.

function fn() {
  let body
  const body = {}
}
What did you expect to happen?
I expected to see a syntax error:
SyntaxError: Identifier 'body' has already been declared
This is the actual behaviour when I try to let body and const body = {} in Node.js repl. However, it's possible that this can only be determined at runtime. In that case, I would have expected the autofix to do nothing, or at least not cause this weird fix to appear.
What actually happened? Please include the actual, raw output from ESLint.
The autofixer attempted to "fix" the code, with the following output (which leads to syntax error):
function fn() {
  let body
  constst body = {}
}2J
(81f9e7dced877d581100d14944f6e1c540d4da622016-12-09T17:00:32Z11638619:R
2016-12-07T19:15:21Z:Thanks for the report. I was able to reproduce this issue.:∂
2016-12-07T21:01:52ZùIt looks like this is caused by a bug in Acorn: acornjs/acorn#487
The rule assumes that variables declared with let can only be declared in one place. However, the parser incorrectly considers the code to be valid, so the rule's assumption is violated and it behaves incorrectly.
For now, I suppose we can put a sanity check in prefer-const to avoid reporting an error if a variable has more than one declaration.:ï
2016-12-07T21:04:15Z}@not-an-aardvark At least, it should be easy to read the token we're trying to replace to make sure it actually says let, no?:à
2016-12-07T21:14:33ZÔTrue, but there are also parts of the logic for detecting errors that expect only one declaration per variable. I think it's better to add an assertion in that logic to avoid potential runtime errors, rather than just when producing a fix.ﬁÊ22016-06-22T08:40:18Z"2016-06-28T17:28:37Z*ﬂWhat version of ESLint are you using?

v2.13.1

What parser (default, Babel-ESLint, etc.) are you using?

default

Please show your full configuration:

nothing

What did you do? Please include the actual source code causing the issue.
$ echo "const {a, b: b} = obj" | eslint --stdin --env es6 --rule no-useless-rename:error --no-eslintrc

Or in our online demo:

What did you expect to happen?
<text>
  1:11  error  Destructuring assignment b unnecessarily renamed  no-useless-rename

‚úñ 1 problem (1 error, 0 warnings)

What actually happened? Please include the actual, raw output from ESLint.
No errors2I
(18663d4911f24ddd5b39c3a1c3c064f57d2a096f2016-06-28T17:28:37Z1937871«û‚D2017-06-25T05:30:49Z"2017-06-28T03:05:21Z*¿What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8790)



What changes did you make? (Give an overview)
This fixes a bug in the indent rule where the arguments of a call expression were aligned offset the last token of the callee, even when the callee was parenthesized. Instead, the rule should offset from the closing paren in those cases.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(85c93276fc8cab588417d70c74c0b3bb1bda9c582017-06-28T03:05:20Z11638619:
2017-06-25T05:30:50ZLGTM:«
2017-06-25T05:31:00ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @gyandeeps and @valorkin to be potential reviewers.:
2017-06-25T07:00:53ZLGTM”	 ‹E2017-07-11T14:59:53Z"2017-07-15T03:11:12Z*¡Tell us about your environment

ESLint Version: whatever the web demo uses: http://eslint.org/demo/
Node Version: see above
npm Version: see above

What parser (default, Babel-ESLint, etc.) are you using?
see above
Please show your full configuration:
http://eslint.org/demo/ with 'indent' checked
What did you do? Please include the actual source code causing the issue.

var $template = (
    $( 'div' )
        .foo()
        .bar()
);
What did you expect to happen?
'indent' rule should not be triggered, and indeed without the extra parentheses it isn't:
var $template =
    $( 'div' )
        .foo()
        .bar();
What actually happened? Please include the actual, raw output from ESLint.
Complained about indentation of .foo and .bar and de-indent one step:
3:1 - Expected indentation of 4 spaces but found 8. (indent)
4:1 - Expected indentation of 4 spaces but found 8. (indent)

// Fixed Code
var $template = (
    $( 'div' )
    .foo()
    .bar()
);2J
(1ea3723da52c6805ac5940a0ea8acfa64998a83a2017-07-15T03:11:07Z11638619:è
2017-07-11T18:13:01ZwThanks for reporting, I can reproduce this issue.
Simplified example:
/* eslint indent:error*/
(
    foo
        .bar
)¡PÃ62016-08-27T04:10:29Z"2016-09-03T16:10:24Z*ıCurrently, it is impossible to perform rule substitution for no-regex-spaces because the message displays a number in curly braces (representing a regex quantifier).
The correct message: "Spaces are hard to count. Use {{{count}}}."
However, the regex for rule message substitution looks for \{\{\s*(.+?)\s*\}\}, which will result in the substitution code looking for a "{count}" key.
I'd like to replace (.+?) with ([^}]+?). This will force the regex to match {{count}} and extract "count" as the key.2H
(4063a79e171bae128a723dad56b6edbde5669ce52016-09-03T16:10:20Z284282:L
2016-09-01T17:02:30Z4Go for it. You can accept bugs that you've verified.‡≥ÊD2017-06-26T09:06:22Z"2017-06-28T00:49:03Z*ïWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix



Tell us about your environment

ESLint Version: master
Node Version: 8.1.2
npm Version: 5.0.3

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  no-debugger: error
What did you do? Please include the actual source code causing the issue.
if (foo) debugger
What did you expect to happen?
I expected the code to be valid after running eslint --fix.
What actually happened? Please include the actual, raw output from ESLint.
The code was fixed to if (foo), which is invalid syntax.
What changes did you make? (Give an overview)
This updates the no-debugger autofixer to not remove debugger statements that are in a position where a statement is required (e.g. the direct descendent of an if statement).
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(9417818bb92b9b1811e4a48e8e3faa14584fab832017-06-28T00:49:02Z11638619:√
2017-06-26T09:06:23Z™@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @nzakas, @vitorbal and @btmills to be potential reviewers.:
2017-06-26T09:06:23ZLGTM:d
2017-06-27T23:46:43ZLit may be somewhat inconsistent.
can we fix if (foo) debugger to if (foo) ;?:˝
2017-06-28T00:35:09Z‰In general, we try to make it so that rules don't autofix problems unless they're sure about what the user was trying to do. In this case, I don't think we can be sure.
For example, I think the most likely case where this issue would occur would be if I was trying to isolate a special case in the debugger:
doSomething(foo);
// doAnotherThing isn't working when foo.bar is true, so I'm debugging it there
if (foo.bar) debugger;
doAnotherThing(foo);
But in that case, when I'm done debugging I would actually to remove the if statement entirely:
doSomething(foo);
doAnotherThing(foo);
I don't think it's safe to assume that the user would want an empty if (foo.bar); statement to remain in their code, so it seems best to not fix this case.í
pÁD2017-06-26T09:44:18Z"2017-06-27T22:30:07Z*üWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix



Tell us about your environment

ESLint Version: master
Node Version: 8.1.2
npm Version: 5.0.3

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  dot-notation: [error, { allowKeywords: false }]
What did you do? Please include the actual source code causing the issue.
var let = { if() { console.log('foo') } };
let.if();
What did you expect to happen?
I expected eslint --fix to not break the code.
What actually happened? Please include the actual, raw output from ESLint.
The code was autofixed to invalid syntax:
var let = { if() { console.log('foo') } };
let["if"]();
What changes did you make? (Give an overview)
The dot-notation autofixer previously fixed code like let.if to let["if"]. However, this is a syntax error because a statement beginning with let[ is parsed as the start of a variable declaration, not a MemberExpression.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(616587f41dadaaff73881d5e0edbf42a00133d2a2017-06-27T22:30:07Z11638619:
2017-06-26T09:44:19ZLGTM:S
2017-06-26T17:28:30Z;No, because unlike let, const is not a valid variable name.¢Ùú=2016-12-31T21:58:00Z"2017-01-01T01:16:48Z*ΩWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (see #7821)
What changes did you make? (Give an overview)
This updates the function name matcher in no-implied-eval to ensure that a match like setTimeout matches the entire name of the function rather than a substring. This prevents the rule from reporting functions like setTimeoutFooBar.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(c5c3b21257f1307a8f627c3488874a2f5214e79a2017-01-01T01:16:47Z11638619:√
2016-12-31T21:58:01Z™@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @bgw and @vitorbal to be potential reviewers.:
2016-12-31T21:58:01ZLGTMÜ ‡E2017-07-12T06:59:22Z"2017-07-15T03:11:08Z*›What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8924)



What changes did you make? (Give an overview)
The MemberExpression listener in indent contains some logic to ensure that if the object of a MemberExpression is wrapped in parentheses, the property is offset from the opening paren, not the object itself. Due to a bug, this logic also caused the property to be offset from the opening paren if the entire MemberExpression was wrapped in parentheses, raather than just the object. This commit updates the MemberExpression listener to specifically check for parentheses around the object, not the entire MemberExpression.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(1ea3723da52c6805ac5940a0ea8acfa64998a83a2017-07-15T03:11:07Z11638619:«
2017-07-12T06:59:34ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @gyandeeps and @valorkin to be potential reviewers.:Â
2017-07-12T07:47:03ZÃUpdated to add the requested test. The example you gave already passes because the ] is within the range of the outer MemberExpression, even though it's not within the range of the inner MemberExpression.:°
2017-07-12T07:50:14Zà@not-an-aardvark Thanks, makes sense.
What about something surrounded by inline parens and also outer parens?
(
    (foo.bar)
)
    .baz:ÿ
2017-07-12T07:53:40ZøAdded that test too. It also passes because there are two sets of parentheses around the object, so .baz is aligned against the second token before the start of the object (i.e. the first ().:
2017-07-12T08:01:24ZLGTM:X
2017-07-14T07:12:49Z@@platinumazure Does the updated implementation look good to you?ÛËó>2017-01-20T23:37:25Z"2017-01-23T17:18:23Z*ÛTell us about your environment

ESLint Version: Found in Eslint 3.13.1. Confirmed to persist in Eslint 3.14.0
Node Version: 7.1.0
npm Version: 4.1.1

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:

{
	"root": true,
	"parserOptions": {
		"ecmaVersion": 6,
		"sourceType": "script",
		"ecmaFeatures": {
			"globalReturn": true
		}
	},
	"env": {
		"es6": true,
		"node": true
	},
	"rules": {
		"indent": ["error", "tab"]
	}
}
What did you do? Please include the actual source code causing the issue.
eslint eslint-test.js --debug 1> eslint.log 2>&1

"use strict";

module.exports = [
	, /*{
	}, */{
		name: "foo",
	}
];

What did you expect to happen?
No errors
What actually happened? Please include the actual, raw output from ESLint.
ESLint crashed
Fri, 20 Jan 2017 22:37:49 GMT eslint:cli Running on files
Fri, 20 Jan 2017 22:37:49 GMT eslint:glob-util Creating list of files to process.
Fri, 20 Jan 2017 22:37:49 GMT eslint:ignored-paths Looking for ignore file in D:\Apps
Fri, 20 Jan 2017 22:37:49 GMT eslint:ignored-paths Could not find ignore file in cwd
Fri, 20 Jan 2017 22:37:49 GMT eslint:cli-engine Processing D:\Apps\eslint-test.js
Fri, 20 Jan 2017 22:37:49 GMT eslint:cli-engine Linting D:\Apps\eslint-test.js
Fri, 20 Jan 2017 22:37:49 GMT eslint:config Constructing config for D:\Apps\eslint-test.js
Fri, 20 Jan 2017 22:37:49 GMT eslint:config Using .eslintrc and package.json files
Fri, 20 Jan 2017 22:37:49 GMT eslint:config Loading D:\Apps\.eslintrc.json
Fri, 20 Jan 2017 22:37:49 GMT eslint:config-file Loading JSON config file: D:\Apps\.eslintrc.json
Fri, 20 Jan 2017 22:37:49 GMT eslint:config Using D:\Apps\.eslintrc.json
Fri, 20 Jan 2017 22:37:49 GMT eslint:config Merging command line environment settings
Fri, 20 Jan 2017 22:37:49 GMT eslint:config-ops Apply environment settings to config
Fri, 20 Jan 2017 22:37:49 GMT eslint:config-ops Creating config for environment es6
Fri, 20 Jan 2017 22:37:49 GMT eslint:config-ops Creating config for environment node
Cannot read property 'loc' of null
TypeError: Cannot read property 'loc' of null
    at checkIndentInArrayOrObjectBlock (C:\Users\W7\AppData\Roaming\npm\node_modules\eslint\lib\rules\indent.js:732:50)
    at EventEmitter.ObjectExpression (C:\Users\W7\AppData\Roaming\npm\node_modules\eslint\lib\rules\indent.js:1005:17)
    at emitOne (events.js:96:13)
    at EventEmitter.emit (events.js:188:7)
    at NodeEventGenerator.enterNode (C:\Users\W7\AppData\Roaming\npm\node_modules\eslint\lib\util\node-event-generator.js:39:22)
    at CodePathAnalyzer.enterNode (C:\Users\W7\AppData\Roaming\npm\node_modules\eslint\lib\code-path-analysis\code-path-analyzer.js:607:23)
    at CommentEventGenerator.enterNode (C:\Users\W7\AppData\Roaming\npm\node_modules\eslint\lib\util\comment-event-generator.js:98:23)
    at Controller.enter (C:\Users\W7\AppData\Roaming\npm\node_modules\eslint\lib\eslint.js:928:36)
    at Controller.__execute (C:\Users\W7\AppData\Roaming\npm\node_modules\eslint\node_modules\estraverse\estraverse.js:397:31)
    at Controller.traverse (C:\Users\W7\AppData\Roaming\npm\node_modules\eslint\node_modules\estraverse\estraverse.js:501:28)2I
(b9e5b68f853404e852888ae0bd1d9e2712dbbca02017-01-23T17:18:14Z5554486‹õ•<2016-12-07T21:12:30Z"2016-12-09T17:00:32Z*¥What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
See #7712
What changes did you make? (Give an overview)
Due to acornjs/acorn#487, espree does not throw a syntax error for duplicate let or const declarations. Previously, the prefer-const rule assumed that a let variable would always have exactly one declaration. This adds a sanity check to avoid reporting (and possibly creating incorrect autofixes from) a let variable if it has more than one declaration.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(81f9e7dced877d581100d14944f6e1c540d4da622016-12-09T17:00:32Z11638619:
2016-12-07T21:12:32ZLGTM: 
2016-12-07T21:12:32Z±@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @NickHeiner and @vitorbal to be potential reviewers.:
2016-12-08T03:10:06ZLGTM:
2016-12-08T23:06:56ZLGTM‘	Ã¢>2017-01-24T02:05:34Z"2017-01-27T03:30:24Z*ÔWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 7.4.0
npm Version: 4.0.5

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  operator-assignment: error
parserOptions:
  ecmaVersion: 7
What did you do? Please include the actual source code causing the issue.
foo = foo ** bar;
What did you expect to happen?
I expected an error to be reported, suggesting that the code use a compound operator.
What actually happened? Please include the actual, raw output from ESLint.
No error was reported.
What changes did you make? (Give an overview)
This updates operator-assignment to identify that the ** operator can be replaced with a compound operator.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(fbd7c137d5baae4ee68db7e384ef522749e2bcfd2017-01-27T03:30:23Z11638619:√
2017-01-24T02:05:35Z™@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @btmills and @nzakas to be potential reviewers.:
2017-01-24T02:05:35ZLGTMŸ
j∫;2016-11-16T01:10:19Z"2016-11-19T03:47:12Z*Ÿ	Tell us about your environment

ESLint Version: master
Node Version: 7.1.0
npm Version: 3.10.9

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

rules:
  quotes: [error, single]

What did you do? Please include the actual source code causing the issue.

// (I hope no one actually has code like this)

function foo() {
  `use strict`;
  return 012;
}

What did you expect to happen?
I expected quotes to report an error, but not fix it when using the --fix flag.
What actually happened? Please include the actual, raw output from ESLint.
ESLint reported an error, and fixed the code to:
function foo() {
  'use strict';
  return 012;
}
This is a SyntaxError, because octal literals are not allowed in strict mode.
Basically, the string use strict only turns on strict mode if it's surrounded by single or double quotes, not backticks. We should detect these cases and avoid performing a fix for them.
If someone does have `use strict` in backticks, they were probably trying to turn on strict mode and it would be nice if we could warn them that it wasn't working, but I think that's a separate issue. (edit: Actually, it looks like no-unused-expressions handles this correctly already.)2J
(5c9a4add1ecbc9c9ea70a3bb68f974167f8b64f52016-11-19T03:47:10Z11638619€⁄∂2015-08-03T09:28:59Z"2015-08-04T04:51:23Z*ˆI'm really surprised.

env:
    es6: true
ecmaFeatures:
    modules: true
rules:
    no-invalid-this: 2

> eslint -v
v1.0.0
> echo "function foo() { this; }" | eslint --stdin
>

No errors.
I expected an error, "Unexpected this."
Of course, this simple case exists in its unit test.
This problem happens only when --env es6 was specified.

ecmaFeatures:
    modules: true
rules:
    no-invalid-this: 2

> eslint -v
v1.0.0
> echo "function foo() { this; }" | eslint --stdin

<text>
  1:19  error  Unexpected `this`  no-invalid-this

‚úñ 1 problem (1 error, 0 warnings)

>

It's OK if there is not es6: true.

If --env es6 is specified, here, context.getScope() returns the global scope. But this is always on FunctionDeclaration or FunctionExpression, so context.getScope() should return a function scope.
And the global scope is not strict mode, so this rule ignores the this keyword....2I
(b196c6539ef84a5bc3dd8e9ef112171a7589020b2015-08-04T01:50:45Z1937871:Ö
2015-08-03T09:36:55ZmI could reproduce with:
ecmaFeatures:
    blockBindings: true
    modules: true
rules:
    no-invalid-this: 2:i
2015-08-03T17:28:51ZQSo context. getScope is returning the global scope inside of FunctionDeclaration?:Ô
2015-08-04T00:12:35Z÷Yes. Maybe it returns a function scope as expected in BlockStatement of FunctionDeclaration.body. But it's returning the containing scope at FunctionDeclaration, only under blockBindings: true.
I will work on this.Û∞±2015-08-02T22:26:23Z"2015-08-05T17:25:42Z*•This is my setup:
A main.js file with:
var answer = 42;
if (answer = 42) {
    console.log("Something");
}

and a .eslintrc file with:
{
    "root": true,
    "rules": {
        "no-cond-assign": [2, "always"]
    }
}

Then, running eslint main.js doesn't produce an error.
Replacing the rule with "no-cond-assign": 2 or "no-cond-assign": [2, "except-parens"] does produce an error.
I'm usin eslint version 1.0.0.
Thanks.2I
(eb2bc572ec5858a0e381d5e686fb810ff7f045882015-08-05T13:49:21Z1937871:‹
2015-08-02T22:26:31Z√Thanks for the issue! We get a lot of issues, so this message is automatically posted to each one to help you check that you've included all of the information we need to help you.
Reporting a bug? Please be sure to include:

The version of ESLint you are using (run eslint -v)
The source code that caused the problem
The configuration you're using (for the rule or your entire config file)
The actual ESLint output complete with line numbers

Requesting a new rule? Please be sure to include:

The use case for the rule - what is it trying to prevent or flag?
Whether the rule is trying to prevent an error or is purely stylistic
Why you believe this rule is generic enough to be included

Requesting a feature? Please be sure to include:

The problem you want to solve (don't mention the solution)
Your take on the correct solution to problem

Including this information in your issue helps us to triage it and get you a response as quickly as possible.
Thanks!:?
2015-08-03T17:35:00Z'Looks like a bug, we will look into it.:,
2015-08-05T12:32:49ZI will work on this.î™’62016-08-28T07:09:18Z"2016-09-01T02:40:12Z*îWhat version of ESLint are you using?

3.4.0

What parser (default, Babel-ESLint, etc.) are you using?

default

Please show your full configuration:

nothing

What did you do? Please include the actual source code causing the issue.
$ echo "new (Foo)" | eslint --stdin --rule new-parens:error --no-eslintrc

What did you expect to happen?
<text>
  1:1  error  Missing '()' invoking a constructor  new-parens

‚úñ 1 problem (1 error, 0 warnings)

What actually happened? Please include the actual, raw output from ESLint.
No errors.2I
(8e77f16de3e8d9ae166174ac0dbb5d3918a112312016-09-01T02:40:12Z1937871˙®„42016-07-25T11:59:20Z"2016-08-01T21:24:18Z*ÏESLint version:
3.1.1

Rule:
"camelcase": [2, { "properties": "never" }]

Problem
Lint fails on module import when deconstructing  properties and aliasing.
// this cause lint error
import { no_camel_case_prop as CamelCaseProp } from 'external-module';
But with 186e8f0 that rule should ignore camelcase during deconstructing.
(I know that import deconstructing is not a real object deconstructing, but probably it should follow the same rule)
For now I have to workaround this issue this way:
// this not cause lint error
import * as externalModule from 'external-module';
externalModule.no_camel_case_prop

Thank you :)2I
(e524d16fa48c44cbcadc65496d1f4669db8c33c42016-08-01T21:24:17Z5115382:ê
2016-07-25T16:55:08Z˜Hi @lordgiotto, thanks for reaching out!
Just verified that this is true. Even without the properties option set to never, I would expect the example code to not cause a lint error, for the same reasons outlined in #3185 for object destructuring.
So, to recap:
Valid:
/* eslint camelcase: 2*/
import { no_camel_case_prop as CamelCaseProp } from 'external-module';
Invalid:
/* eslint camelcase: 2*/
import { no_camel_case_prop } from 'external-module';
Invalid:
/* eslint camelcase: 2*/
import { no_camel_case_prop as no_camel_case_prop } from 'external-module';
@lordgiotto Would this be something you are willing to send a PR for?:™
2016-07-25T16:57:31Zë@lordgiotto The workaround you listed is wrong. It would be
import * as externalModule from 'external-module';
externalModule.no_camel_case_prop;:ù
2016-07-25T18:04:13ZÑ@michaelficarra Oh, sorry, you're right! I fix it now.
@vitorbal It would be a pleasure, but to be honest I never read ESLint source code and I should at least study how it's designed before be able to send a PR. So I could do it, but i would need some time :P:,
2016-07-28T10:10:59Z@vitorbal PR done :)¡¥;2016-11-15T16:14:12Z"2016-11-16T00:12:42Z*ÅTell us about your environment

Windows 7
ESLint Version: v3.10.1
Node Version: v4.4.7
npm Version: 3.10.3

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

{
  "env": {
    "browser": true,
    "amd": true
  },
  "globals": {},
  "rules": {
    "semi": [
      "error",
      "always"
    ],
    "no-bitwise": 0,
    "no-cond-assign": 0,
    "camelcase": 2,
    "curly": 2,
    "no-debugger": 0,
    "eqeqeq": 2,
    "no-eq-null": 2,
    "no-eval": 0,
    "no-unused-expressions": 2,
    "guard-for-in": 0,
    "block-scoped-var": 2,
    "strict": 0,
    "comma-dangle": [
      "error",
      "never"
    ],
    "lines-around-directive": [
      "error",
      {
        "before": "never",
        "after": "always"
      }
    ],
    "object-curly-newline": [
      "error",
      "always"
    ],
    "wrap-iife": [
      2,
      "any"
    ],
    "keyword-spacing": [
      "error",
      {
        "before": true
      }
    ],
    "key-spacing": [
      "error",
      {
        "beforeColon": false
      }
    ],
    "no-iterator": 0,
    "no-use-before-define": 0,
    "comma-style": [
      2,
      "last"
    ],
    "space-before-blocks": [
      2,
      "always"
    ],
    "space-before-function-paren": [
      2,
      "always"
    ],
    "no-trailing-spaces": [
      2,
      {
        "skipBlankLines": true
      }
    ],
    "space-infix-ops": [
      2,
      {
        "int32Hint": false
      }
    ],
    "no-mixed-spaces-and-tabs": 2,
    "no-loop-func": 2,
    "no-multi-str": 0,
    "new-cap": 2,
    "no-caller": 2,
    "no-empty": 0,
    "no-new": 2,
    "no-plusplus": 0,
    "no-proto": 0,
    "no-script-url": 2,
    "no-shadow": 2,
    "dot-notation": 2,
    "no-new-func": 0,
    "no-new-wrappers": 0,
    "no-undef": 2,
    "no-unused-vars": 2,
    "no-invalid-this": 0,
    "no-with": 0,
    "max-len": [
      2,
      {
        "code": 120,
        "ignoreComments": true
      }
    ],
    "indent": [
      "error",
      "tab"
    ],
    "quotes": [
      "error",
      "double",
      {
        "avoidEscape": true
      }
    ],
    "quote-props": [
      2,
      "as-needed",
      {
        "unnecessary": true
      }
    ],
    "complexity": [
      2,
      10
    ]
  }
}

What did you do? Please include the actual source code causing the issue.

function test(argument) {

	return register("baz", [foo, bar, baz],
			/** dont ask me why people do this **/{
			baseClass: "bar"
			});
};
What did you expect to happen?
The comment closure not to be removed
function test (argument) {

	return register("baz", [foo, bar, baz],
			/** dont ask me why people do this **/		{
			baseClass: "bar"
		});
};
What actually happened? Please include the actual, raw output from ESLint.
comment closure has been removed
  79:13  error  Parsing error: Unexpected token :

‚úñ 1 problem (1 error, 0 warnings)
function test (argument) {

	return register("baz", [foo, bar, baz],
			/** dont ask me why people do this 		{
			baseClass: "bar"
		});
};
EDIT updated to ESLint v3.10.12J
(0643bfeff68979044ca57a2b392d855d18be7d082016-11-16T00:12:39Z11638619:ö
2016-11-15T20:10:42ZÅThat's not good. I assume you ran --fix and I think indent rule is the one that's causing this issue. @not-an-aardvark any ideas?:G
2016-11-15T20:17:24Z/Looking into it now. I can reproduce the issue.:&
2016-11-15T21:07:44ZPR up at #7606:0
2016-11-16T10:21:05ZAwesome. Thanks for thatüÎ≥;2016-11-15T15:35:27Z"2016-11-15T23:58:07Z*ƒTell us about your environment

Window 7
ESLint Version: v3.6.1
Node Version: v4.4.7
npm Version: 3.10.3

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

{
  "env": {
    "browser": true,
    "amd": true
  },
  "globals": {},
  "rules": {
    "semi": [
      "error",
      "always"
    ],
    "no-bitwise": 0,
    "no-cond-assign": 0,
    "camelcase": 2,
    "curly": 2,
    "no-debugger": 0,
    "eqeqeq": 2,
    "no-eq-null": 2,
    "no-eval": 0,
    "no-unused-expressions": 2,
    "guard-for-in": 0,
    "block-scoped-var": 2,
    "strict": 0,
    "comma-dangle": [
      "error",
      "never"
    ],
    "lines-around-directive": [
      "error",
      {
        "before": "never",
        "after": "always"
      }
    ],
    "object-curly-newline": [
      "error",
      "always"
    ],
    "wrap-iife": [
      2,
      "any"
    ],
    "keyword-spacing": [
      "error",
      {
        "before": true
      }
    ],
    "key-spacing": [
      "error",
      {
        "beforeColon": false
      }
    ],
    "no-iterator": 0,
    "no-use-before-define": 0,
    "comma-style": [
      2,
      "last"
    ],
    "space-before-blocks": [
      2,
      "always"
    ],
    "space-before-function-paren": [
      2,
      "always"
    ],
    "no-trailing-spaces": [
      2,
      {
        "skipBlankLines": true
      }
    ],
    "space-infix-ops": [
      2,
      {
        "int32Hint": false
      }
    ],
    "no-mixed-spaces-and-tabs": 2,
    "no-loop-func": 2,
    "no-multi-str": 0,
    "new-cap": 2,
    "no-caller": 2,
    "no-empty": 0,
    "no-new": 2,
    "no-plusplus": 0,
    "no-proto": 0,
    "no-script-url": 2,
    "no-shadow": 2,
    "dot-notation": 2,
    "no-new-func": 0,
    "no-new-wrappers": 0,
    "no-undef": 2,
    "no-unused-vars": 2,
    "no-invalid-this": 0,
    "no-with": 0,
    "max-len": [
      2,
      {
        "code": 120,
        "ignoreComments": true
      }
    ],
    "indent": [
      "error",
      "tab"
    ],
    "quotes": [
      "error",
      "double",
      {
        "avoidEscape": true
      }
    ],
    "quote-props": [
      2,
      "as-needed",
      {
        "unnecessary": true
      }
    ],
    "complexity": [
      2,
      10
    ]
  }
}

What did you do? Please include the actual source code causing the issue.
ran eslint filename.js --fix

modules.exports = {
	foo: function (arg1, arg2, arg3) {},
	bar: /*static*/ function (arg1, arg2, arg3) {},
	baz /*static*/ : function (arg1, arg2, arg3) {}
};
What did you expect to happen?
The inline comment after baz to remain intact.
modules.exports = {
	foo: function (arg1, arg2, arg3) {},
	bar: /*static*/ function (arg1, arg2, arg3) {},
	baz /*static*/ : function (arg1, arg2, arg3) {}
};
What actually happened? Please include the actual, raw output from ESLint.
  61:5  error  Parsing error: Unexpected token *

‚úñ 1 problem (1 error, 0 warnings)
The forward slash after baz has been removed
modules.exports = {
	foo: function (arg1, arg2, arg3) {},
	bar: /*static*/ function (arg1, arg2, arg3) {},
	baz*static*/ : function (arg1, arg2, arg3) {}
};2J
(bd0514ca9bc9dbb5dafb27085cf9e554573610b02016-11-15T23:58:05Z11638619:™
2016-11-15T17:06:31ZëCan you please try with latest ESLint? There were some bugs with the fixer in object-shorthand which we fixed with our most recent minor release.:h
2016-11-15T17:21:35ZP@platinumazure I updated to version 3.10.1 but unfortunately the issue persists.:S
2016-11-15T21:00:57Z;I can reproduce this. It's caused by the key-spacing fixer.:&
2016-11-15T21:21:10ZPR up at #7607:D
2016-11-16T10:20:41Z,That works. Thanks for the fast turn around.‰	∂;2016-11-15T21:06:28Z"2016-11-16T00:12:39Z*úWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7604


What changes did you make? (Give an overview)
Note: This builds off of #7596, please merge that first.
Previously, the indent autofixer didn't account for comments preceding a node on the same line. As a result, it was counting back by a constant amount from a node, so it would sometimes accidentally splice comments. This updates the fixer to count forward from the start of the line, rather than backward from the node.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(0643bfeff68979044ca57a2b392d855d18be7d082016-11-16T00:12:39Z11638619:
2016-11-15T21:06:30ZLGTM:∆
2016-11-15T21:06:31Z≠@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @eelyafi, @gyandeeps and @vitorbal to be potential reviewers.:A
2016-11-15T23:50:48Z)@not-an-aardvark Could you rebase please?:
2016-11-16T00:07:51ZLGTMóT¶Á42016-07-26T04:25:31Z"2017-04-04T07:55:52Z*ﬂWhat version of ESLint are you using?
3.1.1
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
Project structure:
.eslintignore
.eslintrc
bar.js
src/foo.js

.eslintrc
{
    "root": true,
    "extends": "eslint:recommended"
}

.eslintignore
src/foo.js

What did you do? Please include the actual source code causing the issue.
$ eslint foo.js --ignore-path ../.eslintignore

C:\dev\eslint-bug\src\foo.js
  1:1  error  'test' is not defined  no-undef

‚úñ 1 problem (1 error, 0 warnings)

What did you expect to happen?
Expected C:\dev\eslint-bug\src\foo.js to be ignored
What actually happened? Please include the actual, raw output from ESLint.
Errors were reported for C:\dev\eslint-bug\src\foo.js:
C:\dev\eslint-bug\src\foo.js
  1:1  error  'test' is not defined  no-undef

‚úñ 1 problem (1 error, 0 warnings)

In Configuring ESLint it says "Paths are relative to .eslintignore location or the current working directory". As a user, I would assume that if I passed in --ignore-path that it would ignore files as if I had called ESLint from that directory.
I see that there have been a lot of issues opened regarding ESLint ignore and parent directories, but after #5694, ignoring files in SublimeText with SublimeLinter-eslint has been broken. There is an open PR to fix an existing issue with loading .eslintignore in SublimeLinter-eslint (SublimeLinter/SublimeLinter-eslint#145), but it doesn't work after ESLint 2.5.0.
There is an option in the CLIEngine to specify a cwd. If my above process is "working as intended" (or perhaps I have misinterpreted the documentation), then it would be great to be able to pass in a --cwdoption for the command line so that the relative paths can be loaded correctly.2I
(e3959199bc681ce2571fac55efa2eb0ba3d0c11a2017-04-04T07:55:46Z4616705:«
2016-07-28T15:25:47ZÆIt seems reasonable to me to use a provided --ignore-path directory as the base dir when we convert the filename to a relative path.  I've tried a possible implementation of this and it seems to work and not break any of our existing tests, would be happy to submit a PR if this is accepted by the TSC.:A
2016-07-28T23:05:12Z)Changing that would be a breaking change.:Ω
2016-07-28T23:14:08Z§Or would it be a bugfix?  I can't think of a single reason why someone would want the behavior of the .eslintignore file to depend on cwd when linting is performed.  I doubt that was intended, but maybe I'm wrong.  That's something for the TSC to decide anyway.  I'm tossing it on the agenda.:€
2016-07-30T11:44:27Z¬We prefer an open discussion in the issue before putting in in the TSC agenda, so we can get feedback from everyone.
One possible use case is someone keeping the ignore file outside the project.:°
2016-07-30T12:11:29ZàHmm, does git have the feature correspond to our --ignore-path for .gitignore? If yes, we should make the same behavior as that. In this case, this is a bug.
If no, we should consider proper behavior. In this case, I think too aggressive if we address this as a bug. For example, there might be people which use --ignore-path as like:
{
    "lint-src": "eslint . -c conf/src.eslintrc.json --ignore-path conf/src.eslintignore",
    "lint-test": "eslint . -c conf/test.eslintrc.json --ignore-path conf/test.eslintignore"
}:Œ
2016-08-01T20:58:40Zµ@IanVS please add a comment for the TSC that summarizes what you're seeking guidance on (see http://eslint.org/docs/maintainer-guide/issues.html#when-to-send-to-tsc for the format).:±
2016-08-02T03:45:33Zò@nzakas thanks.  There have been a lot of changes to our process lately and I admit I haven't kept up as much as I should have.  In gitter you had said,

Core and CLI changes require TSC approval

So I thought I needed to get this on the agenda to approve its acceptance as a bug.:⁄
2016-08-02T04:12:10Z¡Consider this file structure:
.
‚îî‚îÄ‚îÄ top-level-dir
    ‚îú‚îÄ‚îÄ .ignore
    ‚îú‚îÄ‚îÄ dist
    ‚îÇ   ‚îî‚îÄ‚îÄ foo.js
    ‚îî‚îÄ‚îÄ src
        ‚îî‚îÄ‚îÄ foo.js

And imagine the contents of .ignore is:
/foo.js

Here are a few commands that could be run, along with the results as they currently stand:
> pwd #->  top-level-dir
> eslint --ignore-path .ignore src/foo.js dist/foo.js  # -> file is linted

> cd src
> eslint --ignore-path ../.ignore foo.js # -> file is ignored

As you can see, linting the same file with the same ignore file has different outcomes depending on where the command is run. Even though the .ignore specifies the file with a leading slash, it can still match files in a nested folder.  This goes directly against the way .gitignore files work.  From the gitignore docs:

These patterns match relative to the location of the .gitignore file.

This is why I think this is a bug that should be fixed.  The patterns specified in an eslint ignore file should also be relative to the location of the file, not relative to whatever location eslint is invoked from.:ø
2016-08-02T04:14:24Z¶@alberto, @mysticatea The fix I'm proposing here would not prevent either of those use cases.  The contents of the ignore files being used would just simply need to contain proper patterns/globs which match the desired files to ignore based on their relative position to the ignore file itself.:w
2016-08-02T19:56:50Z_@IanVS you are always free to accept bugs that you have verified, regardless of their location.:©
2016-08-02T20:43:46ZêThere was some discussion whether this is actually a bug or a feature.  I feel pretty strongly it's a bug, but willing to hear counterarguments.:Ë
2016-08-02T21:11:56ZœI think this might be a bug.
At my work, we run eslint multiple times and pass in directories directly, and we don't need to have an .eslintignore as a result. At one point, I tried to write an .eslintignore and reconfigure our build process to just run ESLint once. We had to use --ignore-path because our CWD was somewhere else. And files that should have been ignored were not ignored. My conjecture now is that this is because of this issue.
I do think it makes more sense (principle of least surprise) for .eslintignore globs to be relative to the .eslintignore directory. That's similar to how .gitignore works (Git won't suddenly start tracking files it shouldn't just because I happen to run git status in a project subdirectory). So I am very much üëç for this change. I probably would have reported this issue myself, if I had been able to make the connection between why .eslintignore didn't seem to be ignoring and the fact that ESLint was run in a subdirectory.:∂
2016-08-03T17:11:11Zù@IanVS I think what you are proposing is very reasonable, and I am not saying it would prevent the use cases we mentioned, just that it will change the current behaviour. It will affect people relying on the current one (like the example @mysticatea showed), whose setup will stop working and they'll have to change the ignore file paths. That makes me a bit reluctant to introduce this change in a minor release.:g
2016-08-03T17:13:47ZO@alberto, can you explain?  I don't see how this effects @mysticatea's example.:H
2016-08-03T18:21:14Z0@IanVS ah, gotcha. If you're unsure if this is a:
2016-08-03T18:23:23Z◊Sorry, my tablet freaked out and accidentally hit the wrong button.
What I was saying: if there's a question about whether or not this is a bug and whether or not we would need a major release to address, then it should go in the TSC agenda. We'd just need a comment summarizing the issue and explaining what question(s) the TSC should answer.:¢
2016-08-04T11:31:31Zâ@IanVS in my example, probably the developer needs to add ../ into those *.eslintignore.
I got it about .gitignore does not rely on cwd.
Your point sounds reasonable to me.
Hmm, I will not oppose it, but I'm still afraid to do this change without a major version...:Û
2016-08-04T13:31:08Z⁄@mysticatea Ah yes I see, thanks.  They would need to make a small change to their ignore files, but they will still be able to use that strategy.  I was trying to think of a case where if we make this change then they are unable to work the same way at all, no matter how they change the ignore file.  I can't think of anything like that so far.:Ô
2016-08-04T13:39:36Z÷TSC Summary:
Currently cwd is used to resolve relative paths in an ignore file.  When using --ignore-path, the current working directory can be vastly different from the directory of the ignore file.  Because of this, the wrong files are ignored if using --ignore-path to a file which is not located within the cwd.
Proposal:
Modify the file resolution to use the directory containing the ignore file, so that the patterns within the ignore file will always be treated as relative to the file's location.
TSC Questions:
There seems to be consensus in this issue that the proposal above should be accepted.  The question before the TSC is whether this change in core behavior should be treated as a bugfix or a breaking change.:L
2016-08-04T18:40:18Z4Thanks @mysticatea. My position is the same as yours:ê
2016-08-04T18:53:01Z˜I'm okay with this being treated as a breaking change too. I just want to see it done at some point üòÑ
Maybe we could also consider adding an option that would enable the old behavior? (Or put the proposed behavior behind an option, but... üò¢):í
2016-08-04T19:21:01ZzOh man, please no options!  üò∫
Seriously though, if this is a breaking change, I'd rather just wait for a major version.:´
2016-08-04T19:23:54Zí@IanVS Apologies, I meant as a separate enhancement later on. No need to add an option now. I'm also okay with treating this as a breaking change.:
2016-08-05T08:14:09Züëç:Ç
2016-08-05T08:24:04ZÈI know I opened the issue, but fwiw I also feel like it's a bug and I'm okay with it being a breaking change. A lot of SublimeText users are eager for that change, and I know the entire dev team at my previous job will be happy, too.:_
2016-08-18T22:13:57ZGAccepted as a breaking change. That means we can't merge it before 4.0.:[
2016-08-19T06:06:10ZCI can help with the ignore-paths.js.
And any progress about #6783 ?:Œ
2016-11-22T22:33:02Zµ@eslint/eslint-team This has been sitting for a long time. Has anyone started work on this? Do we still want this in for 4.x?
If nobody has started working on it, I'm interested in working on this, but I want to close out some of my open PRs first (so if anyone else wants to start this, definitely go ahead).:∆
2016-11-23T14:39:11Z≠Ah, I lost track of this.  I'd like to take a shot at it, @platinumazure, but I am going to be traveling until next week.  So if you've got time this weekend then go for it.:(
2016-11-30T04:55:42ZWorking on this.—≠Ø<2016-12-09T05:11:11Z"2016-12-09T17:17:30Z*êTell us about your environment

ESLint Version: current master
Node Version: 7.2.1
npm Version: 3.10.10

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
config file is empty


What did you do? Please include the actual source code causing the issue.
Running command:
eslint --rule 'indent: [2, 2, {ArrayExpression: first}]' test.js
with contents of test.js as follows:

var foo = [
  [
     1, 2, 3,
     4, 5, 6
  ]
];
What did you expect to happen?
Either no error or else expected indentation of some positive integer.
What actually happened? Please include the actual, raw output from ESLint.
2:3  error  Expected indentation of NaN spaces but found 2  indent
5:3  error  Expected indentation of NaN spaces but found 2  indent2J
(e95a230674d2bac51ba9ae0d140668c0bc20281e2016-12-09T17:17:26Z11638619:Ω
2016-12-09T05:12:19Z§@not-an-aardvark I imagine there may be a release planned for tomorrow. If so, I imagine you'll want to fix this issue (or revert the new feature) before releasing.≤ö≥M2018-01-28T16:54:08Z"2018-02-01T23:02:02Z*√Tell us about your environment

ESLint Version: v4.16.0
Node Version: v6.10.2
npm Version: v5.6.0

What parser (default, Babel-ESLint, etc.) are you using?
Default
Please show your full configuration:

Configuration

{
    "extends": "airbnb-base",
    "rules": {
        "prefer-arrow-callback": "off",
        "func-names": ["error", "never"],
        "space-before-function-paren": ["error", "never"],
        "indent": ["error", 4],
        "no-var": "off",
        "object-shorthand": ["error", "never"],
        "prefer-destructuring": "off",
        "import/no-unresolved": [2, {"commonjs": true}],
        "import/no-dynamic-require": "warn",
        "global-require": "warn",
        "vars-on-top": "off",
        "no-param-reassign": "off",
        "eqeqeq": "off",
        "no-use-before-define": ["error", {"functions": false}],
        "prefer-template": "off",
        "no-shadow": "off",
        "max-len": "off",
        "comma-dangle": ["error", "never"],
        "no-restricted-syntax": ["error", "BinaryExpression[operator='in']"],
        "no-continue": "off",
        "no-plusplus": "off",
        "brace-style": ["error", "stroustrup", {"allowSingleLine": false}],
        "space-unary-ops": [2, {
            "overrides": {
                "typeof": false
            }
        }]
    }
}

Last config is critical


What did you do? Please include the actual source code causing the issue, as well as the command that you used to run ESLint.

var obj = null;
if (typeof (obj) === 'object') {
    console.log("THIS SHOULD REPORT ERROR BETWEEN 'typeof' AND '('. BUT IT DOESN'T");
}
if (typeof(obj) === 'object') {
    console.log('THIS IS OK AS IT DOES NOT REPORT ERROR.');
}

./node_modules/.bin/eslint issue.js
What did you expect to happen?
First case with typeof (obj) === 'object' should report error.
What actually happened? Please include the actual, raw output from ESLint.
No error was reported in first case. Actually there is nothing to show from console.2H
(dc804875fcac38dc4c89b7631007d534815c60782018-02-01T23:01:50Z284282:4
2018-01-28T17:01:20ZClosing in respect to #9906.:G
2018-01-29T15:44:47Z/Reopening so I can tie this to my pull request.:õ
2018-02-05T12:52:08ZÇThis fix breaks: yield [1, 2, 3]
Is that the expected behaviour?
Hmm ignore that - I see from 9906 it is the "expected" behaviour.:–
2018-02-05T14:14:57Z∑Could you supply your config?

`yield[1,2,3]` is valid JavaScript and so `yield [1,2,3]` should be flagged
if using "words: false" setting. The rule was already working for object
expressions (`yield {foo: 1}`). So we fixed the rule so it would apply for
all non-word tokens after `yield`, basically.
‚Ä¶
On Feb 5, 2018 5:52 AM, "Gavin" ***@***.***> wrote:
 This fix breaks: yield [1, 2, 3]

 Is that the expected behaviour?

 ‚Äî
 You are receiving this because you modified the open/close state.
 Reply to this email directly, view it on GitHub
 <#9907 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AARWeiwZFg5oN5oy384FUW_DOVb5bqiQks5tRutpgaJpZM4Rvvi_>
 .ˇÌ∏;2016-11-15T22:27:08Z"2017-01-13T01:20:42Z*ÜNot very sure about this. I'll post it here anyway so someone can have a look. Feel free to close if I'm horribly wrong.
Using this configuration:
{ 'brace-style': ['error', 'allman'] }

What did you do? Please include the actual source code causing the issue.
class Foo {
}

What did you expect to happen?
According to Allman style rules, the opening brace should appear on a new line, and so the code above should trigger an error.
What actually happened? Please include the actual, raw output from ESLint.
No error.2J
(bd5e2199a33f2530461df4d19f032a0a77c181362017-01-13T01:20:37Z11638619:î
2016-11-15T22:37:47Z˚@fasttime What ESLint version are you using? Can you please confirm you get the same results when using latest ESLint?
That said, looking at the rule source, I don't see any logic around class declarations, so it's very likely we just never implemented this for class declarations.
EDIT: Never mind, I just confirmed in our online demo. I'll champion a rule enhancement proposal.:ê
2016-11-15T22:42:01Z˜Rule enhancement Bugfix proposal
What rule do you want to change?
brace-style
Does this change cause the rule to produce more or fewer warnings?
More
How will the change be implemented? (New option, new default behavior, etc.)?
New default behavior, ideally (this is a missed use case)
Please provide some example code that this change will affect:
/* eslint-env es6 */
/* eslint brace-style: ["error", "allman"] */

class Foo {
}
What does the rule currently do for this code?
No error
What will the rule do after it's changed?
Warn for incorrect brace style
Note: This applies to all brace styles, not just Allman.
I'll champion.:¬
2016-11-28T20:23:45Z©I'm üëç either way, but this seems like a bug to me, not an enhancement (especially given that we would fix it in a minor release and cause more errors to be reported).:«
2016-11-28T20:28:22ZÆI'll split the difference by using both labels, which we've used in the past for semver-minor bug fixes.
Need two more üëç from team members before we can accept this issue.:H
2016-12-08T18:49:11Z0@platinumazure what status? I can help (PR) üòÑ:…
2016-12-20T21:17:40Z∞@evilebottnawi Really sorry for taking so long to get back to you.
I think @not-an-aardvark is right about this being a bug, so we can accept the issue right away and you may submit a PR whenever you have time! Just keep us posted if you're no longer able to, so we can get someone else to do so. Thanks!:D
2016-12-21T10:56:14Z,@platinumazure have time on ending this week:\
2017-01-04T22:40:30ZD@fasttime @evilebottnawi Either of you want to take a crack at this?:ú
2017-01-04T22:56:04ZÉI'm willing to work on this is no one else is doing it -- I haven't done it yet because I thought @evilebottnawi was working on it.:„
2017-01-05T01:05:50Z @platinumazure I have zero experience working on the ESLint codebase, just some familiarity with parser logic and ASTs. I'll leave this one to @not-an-aardvark, but I'd be glad to help out another time.ΩÎ∑;2016-11-15T21:17:23Z"2016-11-15T23:58:05Z*¯What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (template)
#7603


What changes did you make? (Give an overview)
This updates the key-spacing autofixer to be aware of comments. Previously, it would remove whitespace from the token before/after the colon, but if there was a comment between the token and the colon, it would remove text from the edge of the comment instead, causing a syntax error.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(bd0514ca9bc9dbb5dafb27085cf9e554573610b02016-11-15T23:58:05Z11638619:
2016-11-15T21:17:24ZLGTM:…
2016-11-15T21:17:24Z∞@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @RRMoelker, @btmills and @Kyle-Mendes to be potential reviewers.:
2016-11-15T22:49:47ZLGTM::
2016-11-15T22:50:51Z"@platinumazure There are now! üòÉ›≠∞<2016-12-09T05:53:52Z"2016-12-09T17:17:27Z*®What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
See #7727
What changes did you make? (Give an overview)
This updates indent to correctly handle nested arrays and CallExpressions when the first option is used.
In order to determine the desired offset of an array, the rule was checking the offset of the parent node. If the parent node was an array, the offset of the array was multiplied by options.ArrayExpression. However, this would result in an expected indentation of NaN for that array.
The fix handles this by explicitly checking for an option of first, and computing the new node's offset accordingly.
Admittedly, this isn't the most elegant solution. If we kept track of nodes' offsets from each other rather than recomputing the desired indentation each time, we wouldn't have to calculate indentation twice in cases like this. (This is similar to the strategy that the rewrite uses.)
Is there anything you'd like reviewers to focus on?
The ArrayExpression and ObjectExpression options were just introduced in this release cycle, and have not made it into a release yet. Given that we have a release scheduled for tomorrow, I see a few options for how to handle this bug:

Revert the commit that adds the ArrayExpression option, fix the issue over the next two weeks, and hopefully re-add it in the next release. (This is probably the safest option, although it would be unfortunate to delay the feature for two weeks.)
Merge this before the release tomorrow. (This would solve the problem in theory, but at a greater risk of regressions since we wouldn't have time to review it as thoroughly as we usually do.)
Release the feature tomorrow as-is, and add a fix in a patch release later. (This is also a viable option, but we would knowingly be releasing a buggy feature for a couple days.)2J
(e95a230674d2bac51ba9ae0d140668c0bc20281e2016-12-09T17:17:26Z11638619:
2016-12-09T05:53:53ZLGTM:¬
2016-12-09T05:53:54Z©@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @gyandeeps, @vitorbal and @BYK to be potential reviewers.:
2016-12-09T06:10:11ZLGTM:Ü
2016-12-09T06:12:52ZÌ@mysticatea Oops, I pushed a commit again after you reviewed -- I saw a bug here that would cause a TypeError if the user was calling an array as a function with no arguments. (I added this test case and an additional check to fix this.):ß
2016-12-09T08:15:51ZéOops, I'm sorry.
I had been convinced that the parent node is never empty because there is a child (== the current node) at least.
Still LGTM.ﬂ"ˆ"2015-11-18T10:20:16Z"2015-11-18T17:58:22Z*space-after-keywords and  no-sequences rules display errors on wrong lines for the following snippet
/*eslint "space-after-keywords": 2, "no-sequences": 2 */
do { // error for while is here

} while(true)

a( // error for , is here
{
}
),
b2H
(2017aa5725af0a4567dd48a6ddf00a96d1ec16232015-11-18T17:14:33Z341801:Ó
2015-11-18T10:20:17Z’Thanks for the issue! If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead

Requesting a new rule? Please see Proposing a New Rule for instructions.ósÄE2017-06-28T20:17:46Z"2017-07-03T08:24:01Z*ù	Tell us about your environment

ESLint Version: 4.1.1
Node Version: 6.9.1
npm Version: 4.5.0

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
        "indent": [
            "error",
            4,
            {
                "SwitchCase": 1
            }
        ],

What did you do? Please include the actual source code causing the issue.
function A() {
    return (
        <div>
            {
                b && (
                    <div>
                    </div>
                )
            }
        </div>
    );
}
What did you expect to happen?
No errors - this code is fine in 4.0
What actually happened? Please include the actual, raw output from ESLint.
indentation errors:

passing code:
function A() {
    return (
        <div>
            {
                b && (
                <div>
                </div>
            )
            }
        </div>
    );
}
Note it seems that without parenthesis it works fine.. this code passes..
function A() {
    return (
        <div>
            {
                b &&
                    <div>
                    </div>
            }
        </div>
    );
}2J
(676af9eb156e8c1884c29a788df367d52ef69af52017-07-03T08:23:54Z11638619:˜
2017-06-28T22:03:36ZﬁThanks for reporting, I can reproduce this. It was probably caused by b5a70b4.
Simplified reproduction case:
/* eslint indent: error */
<div>
    {
        (
            1
        )
    }
</div>
An error is reported, and the rule corrects it to the following (incorrect) code:
/* eslint indent: error */
<div>
    {
    (
        1
    )
    }
</div>:~
2017-07-03T08:25:34ZfThanks @not-an-aardvark and thanks in general for the great work on indent, it's very much appreciated±Ê52016-08-12T23:28:00Z"2016-08-14T01:35:08Z*°What version of ESLint are you using?
3.3.0
What parser (default, Babel-ESLint, etc.) are you using?
default ecmaVersion:6
Please show your full configuration:
sort-keys:2
What did you do? Please include the actual source code causing the issue.
let {a} = 0
What did you expect to happen?
no error
What actually happened? Please include the actual, raw output from ESLint.
Cannot read property 'prevName' of null
TypeError: Cannot read property 'prevName' of null
    at EventEmitter.Property (/usr/local/lib/node_modules/eslint/lib/rules/sort-keys.js:127:39)
    at emitOne (events.js:101:20)
    at EventEmitter.emit (events.js:188:7)
    at NodeEventGenerator.enterNode (/usr/local/lib/node_modules/eslint/lib/util/node-event-generator.js:40:22)
    at CodePathAnalyzer.enterNode (/usr/local/lib/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:608:23)
    at CommentEventGenerator.enterNode (/usr/local/lib/node_modules/eslint/lib/util/comment-event-generator.js:97:23)
    at Controller.traverser.traverse.enter (/usr/local/lib/node_modules/eslint/lib/eslint.js:895:36)
    at Controller.__execute (/usr/local/lib/node_modules/eslint/node_modules/estraverse/estraverse.js:397:31)
    at Controller.traverse (/usr/local/lib/node_modules/eslint/node_modules/estraverse/estraverse.js:501:28)
    at Controller.Traverser.controller.traverse (/usr/local/lib/node_modules/eslint/lib/util/traverser.js:36:33)

@mysticatea #68002I
(b9b34462fe3c4943dceb7e499a424d23991901352016-08-14T01:35:06Z7041728:é
2016-08-12T23:35:52ZıLooks like VariableDeclarator of node.id.type ObjectPattern should do something similar to what's being done for ObjectExpression to handle destructuring object assignment.
https://github.com/eslint/eslint/blob/master/lib/rules/sort-keys.js#L115:Æ
2016-08-13T00:52:08ZïThanks for the bug report! Can confirm this is a bug. Checking the rule proposal, docs, and the rule's tests, it doesn't look to me like this was ever intended to sort destructuring patterns. Opened a PR to fix (will close if the intention was to check destructuring patterns).:L
2016-08-14T01:31:55Z4Oops, I'm sorry.
This is the same mistake as #6886 .Œ Õ≈;2016-11-18T17:02:15Z"2017-04-24T08:44:13Z*ÁGiven the following tab-indented source code:
function foo() {
	if (true) {
		try {
			bar();
		}
		catch (err)
		{
			baz();
		}
	}
}
Using brace-style to use "1tbs", we end up with tabs around the catch keyword.
function foo() {
	if (true) {
		try {
			bar();
		}		catch (err)		{
			baz();
		}
	}
}
It doesn't seem possible to fix this with the existing eslint rules:

keyword-spacing only asserts that there's a non-zero amount of whitespace around keywords
no-multi-spaces ignore tabs
no-tabs isn't useful because we're using tabs for indentation too

Possible solutions:

add an option to keyword-spacing to enforce exactly one space (my suggestion)
add an option to no-tabs to only flag tabs that aren't at the beginning of the line (suggested by @platinumazure)
generalise no-multi-spaces to work for arbitrary whitespace, not just spaces

Tested on eslint 3.10.2.2J
(aaa1a81e31c6e4db8ef33c27edc0fe1756549f732017-04-24T08:44:07Z11638619:¿
2016-11-18T17:21:56ZßOne of the reasons I favor augmenting no-tabs is because this could also supplement other space-enforcing rules, not just keyword-spacing:
if (foo) {    // Tab between condition close paren and open brace
}
The above example wouldn't be enforced by keyword-spacing because there isn't a keyword on either side of the hypothetical tab. So this implies that space-before-blocks and similar rules would also need to be enforced.
On the other hand, no-tabs is already about flagging tabs, so it would just be a matter of adding an option to allow tabs at the beginning of a line for indentation and flag all other tabs. That would take care of all of the possible use cases, I think.:Ì
2016-11-18T18:58:43Z‘I would prefer the option of generalizing no-multi-spaces to flag multiple tabs.
I don't think adding a "prohibit multiple whitespace characters" option to keyword-spacing is a good idea, because (a) it would directly conflict with no-multi-spaces, and (b) we would have to add a similar option to a lot of other spacing rules.
Adding an option to no-tabs is better in that we would only have to modify one rule, but I think it would be overloading the intended purpose of the no-tabs rule, which is to disallow all tabs. On the other hand, the no-multi-spaces rule is explicitly intended to handle consecutive whitespace in cases like this. It shouldn't matter whether that whitespace happens to be spaces or tabs.
To expand on that, no-multi-spaces already handles cases like this:
try {
}             catch (err) { // same as above, but with spaces
}
I think it would be unexpected to handle that case with a different rule depending on whether the gap contains spaces or tabs.:Ö
2016-11-18T19:42:55ZÏ@not-an-aardvark @Wilfred What should happen in the case where two tokens are separated by one tab?
@Wilfred Would you want that case flagged?
@not-an-aardvark If we wanted to flag that particular case, which rule should be responsible?:ı
2016-11-18T19:52:12Z‹What should happen in the case where two tokens are separated by one tab?

I think the rule should not report an error.
An alternative would be to update rules such as keyword-spacing to actually mandate space characters, rather than generic whitespace.

If we wanted to flag that particular case, which rule should be responsible?

I'm not sure I understand what you mean by "that particular case". If you're referring to the code sample in my comment above, I think no-multi-spaces should handle it. (My preference would be for no-multi-spaces to report consecutive tabs as well as consecutive spaces.):Œ
2016-11-18T19:56:50Zµ@not-an-aardvark Sorry, "that particular case" was "the case where two tokens are separated by one tab". If you believe that shouldn't be an error at all, then the question is moot.:Ω
2017-05-04T12:19:54Z§Hi,
in what version will these changes take effect? I pulled npm install eslint@4.0.0-alpha.1 -g with the result  being:
			}
			else {

still becomes
			}			else {:S
2017-05-04T16:07:37Z;Hi @bardware, the changes should be in this week's release.:K
2017-05-08T11:29:42Z3Seen it working in Alpha.2. Very nice, thanks alot!‰ä™2015-08-23T23:13:07Z"2015-08-24T23:18:24Z*‚I'm having an issue with indentation, before I was using 0.24 and it was all good but now with multi-line var declarations I get indent errors. I may perhapse be using the wrong config but from the docs this is what I understood to be the config that would allow for declarations like I have.
Config
"indent": [2, 2, {"VariableDeclarator": 2}],
Tried
"indent": [2, 2, {"VariableDeclarator": { "var": 2, "let": 2, "const": 3}}]
Source file
export default function() {
  const HO = 'bah',
        TE = 'mah'

  var res,
      a = 5,
      b = 4

  if (a++ === b) {
    let multiplier = HO + TE

    multiplier += '329' 

    res = multiplier
  }

  return res
}

Error
9:3 error Expected indentation of 6 space characters but found 2 indent2H
(767bea32779f12693d486062b32239f9e970702c2015-08-24T22:58:42Z126780:‹
2015-08-23T23:13:23Z√Thanks for the issue! We get a lot of issues, so this message is automatically posted to each one to help you check that you've included all of the information we need to help you.
Reporting a bug? Please be sure to include:

The version of ESLint you are using (run eslint -v)
The source code that caused the problem
The configuration you're using (for the rule or your entire config file)
The actual ESLint output complete with line numbers

Requesting a new rule? Please be sure to include:

The use case for the rule - what is it trying to prevent or flag?
Whether the rule is trying to prevent an error or is purely stylistic
Why you believe this rule is generic enough to be included

Requesting a feature? Please be sure to include:

The problem you want to solve (don't mention the solution)
Your take on the correct solution to problem

Including this information in your issue helps us to triage it and get you a response as quickly as possible.
Thanks!:÷
2015-08-24T02:05:42ZΩThe rule is behaving as expected. You need to specify like this
"indent": [2, 2, {"VariableDeclarator": { "var": 2, "let": 2, "const": 3}]

Docs: http://eslint.org/docs/rules/indent#options:∏
2015-08-24T02:30:49Zü@gyandeeps I've updated my post with a better test case, I've tried {"VariableDeclarator": { "var": 2, "let": 2, "const": 3} as well and I still get the error.:⁄
2015-08-24T02:41:29Z¡What kind of parser are you using and version of eslint?
I am confused, initially you had issue with const but after your modification now the error is on line 9 which is a if. Is this correct?:ñ
2015-08-24T02:47:20Z˝@gyandeeps So it is, my bad.
I'm using eslint parser and v1.2.1. I'm actually confused on how to set this up to allow for the syntax I have in my test file without spitting errors. Currently it's erroring at the if statement with the config you supplied:ó
2015-08-24T03:00:04Z˛Its an issue, I just confirmed it. It goes away iif you put semi after the var declaration. We will take a look.
Thanks.
Its happening because the statement var is not ending with ; at the end so espree make the end location of the var node to be line 9.Ç)˝Ø=2017-01-04T21:27:14Z"2017-01-05T17:02:24Z*á!Tell us about your environment

ESLint Version: v3.12.2
Node Version: v7.3.0
npm Version: 4.0.5

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
{
  "root": true,
  "env": {
    "node": true
  },
  "parserOptions": {
      "ecmaVersion": 6
  },
  "rules": {
    "no-useless-return": "error"
  }
}

What did you do? Please include the actual source code causing the issue.
Trying to test a catch block. At the same time making sure I'm writing code that's linted (naturally).
try {
  throw new Error('intentional throw');
  while (false) {}
} catch (err) {
  // do nothing
}
What did you expect to happen?
For eslint to lint my code successfully. Perhaps reporting an unreachable code error if the rule is turned on. Perhaps eslint feels like positively surprising me with a no-throw-in-try-catch I didn't know about.
What actually happened? Please include the actual, raw output from ESLint.
Eslint encounters an unexpected error. Output with debug turned on.
$ eslint --debug index.js
  eslint:cli Running on files +0ms
  eslint:glob-util Creating list of files to process. +39ms
  eslint:ignored-paths Looking for ignore file in /Users/alexander/code/no-useless-return +4ms
  eslint:ignored-paths Could not find ignore file in cwd +1ms
  eslint:cli-engine Processing /Users/alexander/code/no-useless-return/index.js +5ms
  eslint:cli-engine Linting /Users/alexander/code/no-useless-return/index.js +1ms
  eslint:config Constructing config for /Users/alexander/code/no-useless-return/index.js +0ms
  eslint:config Using .eslintrc and package.json files +0ms
  eslint:config Loading /Users/alexander/code/no-useless-return/.eslintrc +2ms
  eslint:config-file Loading config file: /Users/alexander/code/no-useless-return/.eslintrc +1ms
  eslint:config Using /Users/alexander/code/no-useless-return/.eslintrc +59ms
  eslint:config Merging command line environment settings +1ms
  eslint:config-ops Apply environment settings to config +0ms
  eslint:config-ops Creating config for environment node +0ms
Maximum call stack size exceeded
RangeError: Maximum call stack size exceeded
    at isReturned (/Users/alexander/.nvm/versions/node/v7.3.0/lib/node_modules/eslint/lib/rules/no-useless-return.js:119:28)
    at Array.filter (native)
    at getUselessReturns (/Users/alexander/.nvm/versions/node/v7.3.0/lib/node_modules/eslint/lib/rules/no-useless-return.js:148:49)
    at getUselessReturns (/Users/alexander/.nvm/versions/node/v7.3.0/lib/node_modules/eslint/lib/rules/no-useless-return.js:146:21)
    at getUselessReturns (/Users/alexander/.nvm/versions/node/v7.3.0/lib/node_modules/eslint/lib/rules/no-useless-return.js:146:21)
    at getUselessReturns (/Users/alexander/.nvm/versions/node/v7.3.0/lib/node_modules/eslint/lib/rules/no-useless-return.js:146:21)
    at getUselessReturns (/Users/alexander/.nvm/versions/node/v7.3.0/lib/node_modules/eslint/lib/rules/no-useless-return.js:146:21)
    at getUselessReturns (/Users/alexander/.nvm/versions/node/v7.3.0/lib/node_modules/eslint/lib/rules/no-useless-return.js:146:21)
    at getUselessReturns (/Users/alexander/.nvm/versions/node/v7.3.0/lib/node_modules/eslint/lib/rules/no-useless-return.js:146:21)
    at getUselessReturns (/Users/alexander/.nvm/versions/node/v7.3.0/lib/node_modules/eslint/lib/rules/no-useless-return.js:146:21)

To be clear, I'm not sure this qualifies as a bug. One could argue you should never throw in a try / catch block. Moving the throw statement into an if-statement, or a separate function resolves the error. Since that will be the case normally this is not much of a bug. The argument in favor I can see is that this piece of code makes sense when trying to check - without writing a proper test - the catch block.
I tinkered with the code quite a bit in an attempt to reduce the amount of time you lovely people will have to spend on it. The try...catch is essential. The throw statement being made directly in the try block appears essential (tried a few variants of moving it to a different block / closure, all mitigate the issue). The while loop is essential. Removing the catch block gives an error about the try block missing an catch or finally block.
Hope you feel this is helpful!2J
(ca1f8410fcb40a9bce286e22e23ee695159d15f72017-01-05T17:02:17Z11638619:Ë
2017-01-04T21:37:11ZœWhere possible, we never want rules to crash-- if ESLint has an opinion about some bit of code, that should be expressed via a lint report in an ESLint run that eventually halts. So this is definitely a bug!:˚
2017-01-04T21:39:43Z‚Definitely was able to soft-crash the demo page with this example:
/* eslint no-useless-return:error, no-unreachable:off, no-empty:off, no-constant-condition:off */
try {
  throw new Error('intentional throw');
  while (false) {}
} catch (err) {
  // do nothing
}
After it tries linting that, it won't re-lint the code even if I make changes in the demo.:é
2017-01-05T11:05:20ZıGlad to hear platinumazure üëç
Also hi @not-an-aardvark, nice to run into you again üòÑ. Going to have a look at your PR and see if maybe next time I should try myself :]
EDIT: not before I learn more about AST's üòì  but maybe its time! üòÑ’œÊ52016-08-11T19:19:58Z"2016-08-12T19:24:11Z*†ŒRegression build failed overnight with the changes made to no-dupe-key rule yesterday. It failed while running tests of eslint-plugin-import, below is the log:

 
eslint-plugin-import

node node_modules/eslint/bin/eslint -v
v3.2.2
npm run test


eslint-plugin-import@1.12.0 test /var/lib/jenkins/workspace/Regression Build/eslint-plugin-import
cross-env BABEL_ENV=test NODE_PATH=./src nyc mocha --recursive tests/src -t 5s

CLI regression tests
issue #210
  ÔøΩÔøΩÔøΩ doesn't throw an error on gratuitous, erroneous self-reference (126ms)

getExports
ÔøΩÔøΩÔøΩ should handle ExportAllDeclaration (48ms)

ÔøΩÔøΩÔøΩ should return a cached copy on subsequent requests

ÔøΩÔøΩÔøΩ should not return a cached copy after modification

ÔøΩÔøΩÔøΩ should not return a cached copy with different settings

ÔøΩÔøΩÔøΩ should not throw for a missing file

ÔøΩÔøΩÔøΩ should export explicit names for a missing file in exports

ÔøΩÔøΩÔøΩ finds exports for an ES7 module with babel-eslint
deprecation metadata
  default parser
    deprecated imports

      ÔøΩÔøΩÔøΩ works with named imports.

      ÔøΩÔøΩÔøΩ works with default imports.

      ÔøΩÔøΩÔøΩ works with variables.
      multi-line variables

        ÔøΩÔøΩÔøΩ works for the first one

        ÔøΩÔøΩÔøΩ works for the second one

        ÔøΩÔøΩÔøΩ works for the third one, etc.
    full module

      ÔøΩÔøΩÔøΩ has JSDoc metadata
  babel-eslint
    deprecated imports

      ÔøΩÔøΩÔøΩ works with named imports.

      ÔøΩÔøΩÔøΩ works with default imports.

      ÔøΩÔøΩÔøΩ works with variables.
      multi-line variables

        ÔøΩÔøΩÔøΩ works for the first one

        ÔøΩÔøΩÔøΩ works for the second one

        ÔøΩÔøΩÔøΩ works for the third one, etc.
    full module

      ÔøΩÔøΩÔøΩ has JSDoc metadata
exported static namespaces

  ÔøΩÔøΩÔøΩ works with espree & traditional namespace exports

  ÔøΩÔøΩÔøΩ captures namespace exported as default

  ÔøΩÔøΩÔøΩ works with babel-eslint & ES7 namespace exports
deep namespace caching

  ÔøΩÔøΩÔøΩ works
Map API
  #size

    ÔøΩÔøΩÔøΩ counts the names

    ÔøΩÔøΩÔøΩ includes exported namespace size
issue #210: self-reference

  ÔøΩÔøΩÔøΩ doesn't crash

  ÔøΩÔøΩÔøΩ 'has' circular reference

  ÔøΩÔøΩÔøΩ can 'get' circular reference

importType(name)
ÔøΩÔøΩÔøΩ should return 'builtin' for node.js modules

ÔøΩÔøΩÔøΩ should return 'external' for non-builtin modules without a relative path (64ms)

ÔøΩÔøΩÔøΩ should return 'external' for scopes packages

ÔøΩÔøΩÔøΩ should return 'internal' for non-builtins resolved outside of node_modules

ÔøΩÔøΩÔøΩ should return 'parent' for internal modules that go through the parent

ÔøΩÔøΩÔøΩ should return 'sibling' for internal modules that are connected to one of the siblings

ÔøΩÔøΩÔøΩ should return 'unknown' for any unhandled cases

ÔøΩÔøΩÔøΩ should return 'builtin' for additional core modules

ÔøΩÔøΩÔøΩ should return 'external' for module from 'node_modules' with default config

ÔøΩÔøΩÔøΩ should return 'internal' for module from 'node_modules' if 'node_modules' missed in 'external-module-folders'

ÔøΩÔøΩÔøΩ should return 'external' for module from 'node_modules' if 'node_modules' contained in 'external-module-folders'

parse(content, { settings, ecmaFeatures })
ÔøΩÔøΩÔøΩ doesn't support JSX by default

ÔøΩÔøΩÔøΩ infers jsx from ecmaFeatures when using stock parser

resolve
ÔøΩÔøΩÔøΩ should throw on bad parameters.

ÔøΩÔøΩÔøΩ loads a custom resolver path (52ms)

ÔøΩÔøΩÔøΩ respects import/resolve extensions

ÔøΩÔøΩÔøΩ should test case sensitivity
case cache correctness
  ./CaseyKasem.js => ./CASEYKASEM.js
    finite cache

      ÔøΩÔøΩÔøΩ gets correct values after cache lifetime

package
ÔøΩÔøΩÔøΩ exists

ÔøΩÔøΩÔøΩ has every rule

ÔøΩÔøΩÔøΩ exports all configs

ÔøΩÔøΩÔøΩ has configs only for rules that exist

default
valid
  ÔøΩÔøΩÔøΩ import "./malformed.js"

  ÔøΩÔøΩÔøΩ import foo from "./empty-folder";

  ÔøΩÔøΩÔøΩ import { foo } from "./default-export";

  ÔøΩÔøΩÔøΩ import foo from "./default-export";

  ÔøΩÔøΩÔøΩ import foo from "./mixed-exports";

  ÔøΩÔøΩÔøΩ import bar from "./default-export";

  ÔøΩÔøΩÔøΩ import CoolClass from "./default-class";

  ÔøΩÔøΩÔøΩ import bar, { baz } from "./default-export";

  ÔøΩÔøΩÔøΩ import crypto from "crypto";

  ÔøΩÔøΩÔøΩ import common from "./common";

  ÔøΩÔøΩÔøΩ export bar from "./bar"

  ÔøΩÔøΩÔøΩ export { default as bar } from "./bar"

  ÔøΩÔøΩÔøΩ export bar, { foo } from "./bar"

  ÔøΩÔøΩÔøΩ export { default as bar, foo } from "./bar"

  ÔøΩÔøΩÔøΩ export bar, * as names from "./bar"

  ÔøΩÔøΩÔøΩ export {a} from "./named-exports"

  ÔøΩÔøΩÔøΩ import twofer from "./trampoline"

  ÔøΩÔøΩÔøΩ import MyCoolComponent from "./jsx/MyCoolComponent.jsx"

  ÔøΩÔøΩÔøΩ import foo from "./named-default-export"

  ÔøΩÔøΩÔøΩ import connectedApp from "./redux"

  ÔøΩÔøΩÔøΩ import App from "./jsx/App"

  ÔøΩÔøΩÔøΩ import Foo from './jsx/FooES7.js';

  ÔøΩÔøΩÔøΩ for (let { foo, bar } of baz) {}

  ÔøΩÔøΩÔøΩ for (let [ foo, bar ] of baz) {}

  ÔøΩÔøΩÔøΩ const { x, y } = bar

  ÔøΩÔøΩÔøΩ const { x, y, ...z } = bar

  ÔøΩÔøΩÔøΩ export { x }

  ÔøΩÔøΩÔøΩ export { x as y }

  ÔøΩÔøΩÔøΩ export const x = null

  ÔøΩÔøΩÔøΩ export var x = null

  ÔøΩÔøΩÔøΩ export let x = null

  ÔøΩÔøΩÔøΩ export default x

  ÔøΩÔøΩÔøΩ export default class x {}

  ÔøΩÔøΩÔøΩ import json from "./data.json"

  ÔøΩÔøΩÔøΩ import foo from "./foobar.json";

  ÔøΩÔøΩÔøΩ import foo from "./foobar";

  ÔøΩÔøΩÔøΩ import { foo } from "./issue-370-commonjs-namespace/bar"

  ÔøΩÔøΩÔøΩ export * from "./issue-370-commonjs-namespace/bar" (42ms)
invalid

  ÔøΩÔøΩÔøΩ import Foo from './jsx/FooES7.js'; (58ms)

  ÔøΩÔøΩÔøΩ import crypto from "./common";

  ÔøΩÔøΩÔøΩ import baz from "./named-exports";

  ÔøΩÔøΩÔøΩ import bar from "./common";

  ÔøΩÔøΩÔøΩ import Foo from './jsx/FooES7.js';

  ÔøΩÔøΩÔøΩ export baz from "./named-exports" (49ms)

  ÔøΩÔøΩÔøΩ export baz, { bar } from "./named-exports"

  ÔøΩÔøΩÔøΩ export baz, * as names from "./named-exports"

  ÔøΩÔøΩÔøΩ import twofer from "./broken-trampoline"

  ÔøΩÔøΩÔøΩ import barDefault from "./re-export"

export
valid
  ÔøΩÔøΩÔøΩ import "./malformed.js"

  ÔøΩÔøΩÔøΩ var foo = "foo"; export default foo;

  ÔøΩÔøΩÔøΩ export var foo = "foo"; export var bar = "bar";

  ÔøΩÔøΩÔøΩ export var foo = "foo", bar = "bar";

  ÔøΩÔøΩÔøΩ export var { foo, bar } = object;

  ÔøΩÔøΩÔøΩ export var [ foo, bar ] = array;

  ÔøΩÔøΩÔøΩ export var { foo, bar } = object;

  ÔøΩÔøΩÔøΩ export var [ foo, bar ] = array;

  ÔøΩÔøΩÔøΩ export { foo, foo as bar }

  ÔøΩÔøΩÔøΩ export { bar }; export * from "./export-all"

  ÔøΩÔøΩÔøΩ export * from "./export-all"

  ÔøΩÔøΩÔøΩ export * from "./does-not-exist"

  ÔøΩÔøΩÔøΩ export default foo; export * from "./bar"

  ÔøΩÔøΩÔøΩ for (let { foo, bar } of baz) {}

  ÔøΩÔøΩÔøΩ for (let [ foo, bar ] of baz) {}

  ÔøΩÔøΩÔøΩ const { x, y } = bar

  ÔøΩÔøΩÔøΩ const { x, y, ...z } = bar

  ÔøΩÔøΩÔøΩ export { x }

  ÔøΩÔøΩÔøΩ export { x as y }

  ÔøΩÔøΩÔøΩ export const x = null

  ÔøΩÔøΩÔøΩ export var x = null

  ÔøΩÔøΩÔøΩ export let x = null

  ÔøΩÔøΩÔøΩ export default x

  ÔøΩÔøΩÔøΩ export default class x {}

  ÔøΩÔøΩÔøΩ import json from "./data.json"

  ÔøΩÔøΩÔøΩ import foo from "./foobar.json";

  ÔøΩÔøΩÔøΩ import foo from "./foobar";

  ÔøΩÔøΩÔøΩ import { foo } from "./issue-370-commonjs-namespace/bar"

  ÔøΩÔøΩÔøΩ export * from "./issue-370-commonjs-namespace/bar"
invalid

  ÔøΩÔøΩÔøΩ export default foo; export default bar

  ÔøΩÔøΩÔøΩ export default function foo() {}; export default function bar() {}

  ÔøΩÔøΩÔøΩ export function foo() {}; export { bar as foo }

  ÔøΩÔøΩÔøΩ export {foo}; export {foo};

  ÔøΩÔøΩÔøΩ export {foo}; export {bar as foo};

  ÔøΩÔøΩÔøΩ export var foo = "foo"; export var foo = "bar";

  ÔøΩÔøΩÔøΩ export var foo = "foo", foo = "bar";

  ÔøΩÔøΩÔøΩ export { foo }; export * from "./export-all"

  ÔøΩÔøΩÔøΩ export * from "./malformed.js"

  ÔøΩÔøΩÔøΩ export var { foo, bar } = object; export var foo = "bar" (54ms)

  ÔøΩÔøΩÔøΩ export var { bar: { foo } } = object; export var foo = "bar"

  ÔøΩÔøΩÔøΩ export var [ foo, bar ] = array; export var bar = "baz"

  ÔøΩÔøΩÔøΩ export var [ foo, /*sparse*/, { bar } ] = array; export var bar = "baz"

  ÔøΩÔøΩÔøΩ export * from "./default-export"

extensions
valid
  ÔøΩÔøΩÔøΩ import a from "a"

  ÔøΩÔøΩÔøΩ import dot from "./file.with.dot"

  ÔøΩÔøΩÔøΩ import a from "a/index.js"

  ÔøΩÔøΩÔøΩ import dot from "./file.with.dot.js"

  ÔøΩÔøΩÔøΩ import a from "a"

import packageConfig from "./package.json"
  ÔøΩÔøΩÔøΩ import lib from "./bar"

import component from "./bar.jsx"
import data from "./bar.json"
  ÔøΩÔøΩÔøΩ import path from "path"

  ÔøΩÔøΩÔøΩ import path from "path"

  ÔøΩÔøΩÔøΩ import path from "path"

  ÔøΩÔøΩÔøΩ import thing from "./fake-file.js"

  ÔøΩÔøΩÔøΩ import thing from "non-package"
invalid

  ÔøΩÔøΩÔøΩ import a from "a/index.js"

  ÔøΩÔøΩÔøΩ import a from "a"

  ÔøΩÔøΩÔøΩ import dot from "./file.with.dot"

  ÔøΩÔøΩÔøΩ import a from "a/index.js"

import packageConfig from "./package"
  ÔøΩÔøΩÔøΩ import lib from "./bar.js"

import component from "./bar.jsx"
import data from "./bar.json"
  ÔøΩÔøΩÔøΩ import lib from "./bar.js"

import component from "./bar.jsx"
import data from "./bar.json"
  ÔøΩÔøΩÔøΩ import thing from "./fake-file.js"

  ÔøΩÔøΩÔøΩ import thing from "non-package"

imports-first
valid
  ÔøΩÔøΩÔøΩ import { x } from './foo'; import { y } from './bar';                  export { x, y }

  ÔøΩÔøΩÔøΩ import { x } from 'foo'; import { y } from './bar'

  ÔøΩÔøΩÔøΩ import { x } from './foo'; import { y } from 'bar'

  ÔøΩÔøΩÔøΩ 'use directive';                  import { x } from 'foo';
invalid

  ÔøΩÔøΩÔøΩ import { x } from './foo';                  export { x };                  import { y } from './foo';

  ÔøΩÔøΩÔøΩ import { x } from './foo';                  export { x };                  import { y } from './bar';                  import { z } from './baz';

  ÔøΩÔøΩÔøΩ import { x } from './foo'; import { y } from 'bar'

  ÔøΩÔøΩÔøΩ import { x } from 'foo';                  'use directive';                  import { y } from 'bar';

named
valid
  ÔøΩÔøΩÔøΩ import "./malformed.js"

  ÔøΩÔøΩÔøΩ import { foo } from "./bar"

  ÔøΩÔøΩÔøΩ import { foo } from "./empty-module"

  ÔøΩÔøΩÔøΩ import bar from "./bar.js"

  ÔøΩÔøΩÔøΩ import bar, { foo } from "./bar.js"

  ÔøΩÔøΩÔøΩ import {a, b, d} from "./named-exports"

  ÔøΩÔøΩÔøΩ import {ExportedClass} from "./named-exports"

  ÔøΩÔøΩÔøΩ import { ActionTypes } from "./qc"

  ÔøΩÔøΩÔøΩ import {a, b, c, d} from "./re-export"

  ÔøΩÔøΩÔøΩ import { jsxFoo } from "./jsx/AnotherComponent"

  ÔøΩÔøΩÔøΩ import {a, b, d} from "./common"; // eslint-disable-line named

  ÔøΩÔøΩÔøΩ import { foo, bar } from "./re-export-names"

  ÔøΩÔøΩÔøΩ import { foo, bar } from "./common"

  ÔøΩÔøΩÔøΩ import { foo } from "crypto"

  ÔøΩÔøΩÔøΩ import { zoob } from "a"

  ÔøΩÔøΩÔøΩ import { someThing } from "./test-module"

  ÔøΩÔøΩÔøΩ import { zoob } from "a"

  ÔøΩÔøΩÔøΩ export { foo } from "./bar"

  ÔøΩÔøΩÔøΩ export { foo as bar } from "./bar"

  ÔøΩÔøΩÔøΩ export { foo } from "./does-not-exist"

  ÔøΩÔøΩÔøΩ export bar, { foo } from "./bar"

  ÔøΩÔøΩÔøΩ import { foo, bar } from "./named-trampoline"

  ÔøΩÔøΩÔøΩ export { foo as bar }

  ÔøΩÔøΩÔøΩ import { destructuredProp } from "./named-exports"

  ÔøΩÔøΩÔøΩ import { arrayKeyProp } from "./named-exports"

  ÔøΩÔøΩÔøΩ import { deepProp } from "./named-exports"

  ÔøΩÔøΩÔøΩ import { deepSparseElement } from "./named-exports"

  ÔøΩÔøΩÔøΩ import type { MyType } from "./flowtypes"

  ÔøΩÔøΩÔøΩ /*jsnext*/ import { createStore } from "redux"

  ÔøΩÔøΩÔøΩ /*jsnext*/ import { createStore } from "redux"

  ÔøΩÔøΩÔøΩ import { foo } from "es6-module"

  ÔøΩÔøΩÔøΩ import { me, soGreat } from "./narcissist"

  ÔøΩÔøΩÔøΩ import { foo, bar, baz } from "./re-export-default"

  ÔøΩÔøΩÔøΩ import { common } from "./re-export-default"

  ÔøΩÔøΩÔøΩ for (let { foo, bar } of baz) {}

  ÔøΩÔøΩÔøΩ for (let [ foo, bar ] of baz) {}

  ÔøΩÔøΩÔøΩ const { x, y } = bar

  ÔøΩÔøΩÔøΩ const { x, y, ...z } = bar

  ÔøΩÔøΩÔøΩ export { x }

  ÔøΩÔøΩÔøΩ export { x as y }

  ÔøΩÔøΩÔøΩ export const x = null

  ÔøΩÔøΩÔøΩ export var x = null

  ÔøΩÔøΩÔøΩ export let x = null

  ÔøΩÔøΩÔøΩ export default x

  ÔøΩÔøΩÔøΩ export default class x {}

  ÔøΩÔøΩÔøΩ import json from "./data.json"

  ÔøΩÔøΩÔøΩ import foo from "./foobar.json";

  ÔøΩÔøΩÔøΩ import foo from "./foobar";

  ÔøΩÔøΩÔøΩ import { foo } from "./issue-370-commonjs-namespace/bar"

  ÔøΩÔøΩÔøΩ export * from "./issue-370-commonjs-namespace/bar"
invalid

  ÔøΩÔøΩÔøΩ import { zoob } from "a"

  ÔøΩÔøΩÔøΩ import { somethingElse } from "./test-module"

  ÔøΩÔøΩÔøΩ import {a, b, d} from "./common"

  ÔøΩÔøΩÔøΩ import { baz } from "./bar"

  ÔøΩÔøΩÔøΩ import { baz, bop } from "./bar"

  ÔøΩÔøΩÔøΩ import {a, b, c} from "./named-exports"

  ÔøΩÔøΩÔøΩ import { a } from "./default-export"

  ÔøΩÔøΩÔøΩ import { a } from "./common"

  ÔøΩÔøΩÔøΩ import { ActionTypess } from "./qc"

  ÔøΩÔøΩÔøΩ import {a, b, c, d, e} from "./re-export"

  ÔøΩÔøΩÔøΩ import { a } from "./re-export-names"

  ÔøΩÔøΩÔøΩ export { bar } from "./bar"

  ÔøΩÔøΩÔøΩ export bar2, { bar } from "./bar"

  ÔøΩÔøΩÔøΩ import { foo, bar, baz } from "./named-trampoline"

  ÔøΩÔøΩÔøΩ import { baz } from "./broken-trampoline"

  ÔøΩÔøΩÔøΩ import { a } from './test.coffee';

  ÔøΩÔøΩÔøΩ import type { MissingType } from "./flowtypes"

  ÔøΩÔøΩÔøΩ /*jsnext*/ import { createSnorlax } from "redux"

  ÔøΩÔøΩÔøΩ /*jsnext*/ import { createSnorlax } from "redux"

  ÔøΩÔøΩÔøΩ import { baz } from "es6-module"

  ÔøΩÔøΩÔøΩ import { baz } from "./bar"

  ÔøΩÔøΩÔøΩ import { foo, bar, bap } from "./re-export-default"

  ÔøΩÔøΩÔøΩ import { common } from "./re-export-default"

  ÔøΩÔøΩÔøΩ import { default as barDefault } from "./re-export"

namespace
valid
  ÔøΩÔøΩÔøΩ import "./malformed.js"

  ÔøΩÔøΩÔøΩ import * as foo from './empty-folder';

  ÔøΩÔøΩÔøΩ import * as names from "./named-exports"; console.log((names.b).c); 

  ÔøΩÔøΩÔøΩ import * as names from "./named-exports"; console.log(names.a);

  ÔøΩÔøΩÔøΩ import * as names from "./re-export-names"; console.log(names.foo);

  ÔøΩÔøΩÔøΩ import * as elements from './jsx';

  ÔøΩÔøΩÔøΩ import * as foo from './common';

  ÔøΩÔøΩÔøΩ import * as names from "./named-exports";const { a } = names

  ÔøΩÔøΩÔøΩ import * as names from "./named-exports";const { d: c } = names

  ÔøΩÔøΩÔøΩ import * as names from "./named-exports";const { c } = foo
, { length } = "names"
, alt = names

  ÔøΩÔøΩÔøΩ import * as names from "./named-exports";const { ExportedClass: { length } } = names

  ÔøΩÔøΩÔøΩ import * as names from "./named-exports";function b(names) { const { c } = names }

  ÔøΩÔøΩÔøΩ import * as names from "./named-exports";function b() { let names = null; const { c } = names }

  ÔøΩÔøΩÔøΩ import * as names from "./named-exports";const x = function names() { const { c } = names }

  ÔøΩÔøΩÔøΩ export * as names from "./named-exports"

  ÔøΩÔøΩÔøΩ export defport, * as names from "./named-exports"

  ÔøΩÔøΩÔøΩ export * as names from "./does-not-exist"

  ÔøΩÔøΩÔøΩ import * as Endpoints from "./issue-195/Endpoints"; console.log(Endpoints.Users)

  ÔøΩÔøΩÔøΩ function x() { console.log((names.b).c); } import * as names from "./named-exports"; 

  ÔøΩÔøΩÔøΩ import * as names from './default-export';

  ÔøΩÔøΩÔøΩ import * as names from './default-export'; console.log(names.default)

  ÔøΩÔøΩÔøΩ export * as names from "./default-export"

  ÔøΩÔøΩÔøΩ export defport, * as names from "./default-export"

  ÔøΩÔøΩÔøΩ import * as names from './named-exports'; console.log(names['a']);

  ÔøΩÔøΩÔøΩ for (let { foo, bar } of baz) {}

  ÔøΩÔøΩÔøΩ for (let [ foo, bar ] of baz) {}

  ÔøΩÔøΩÔøΩ const { x, y } = bar

  ÔøΩÔøΩÔøΩ const { x, y, ...z } = bar

  ÔøΩÔøΩÔøΩ export { x }

  ÔøΩÔøΩÔøΩ export { x as y }

  ÔøΩÔøΩÔøΩ export const x = null

  ÔøΩÔøΩÔøΩ export var x = null

  ÔøΩÔøΩÔøΩ export let x = null

  ÔøΩÔøΩÔøΩ export default x

  ÔøΩÔøΩÔøΩ export default class x {}

  ÔøΩÔøΩÔøΩ import json from "./data.json"

  ÔøΩÔøΩÔøΩ import foo from "./foobar.json";

  ÔøΩÔøΩÔøΩ import foo from "./foobar";

  ÔøΩÔøΩÔøΩ import { foo } from "./issue-370-commonjs-namespace/bar"

  ÔøΩÔøΩÔøΩ export * from "./issue-370-commonjs-namespace/bar"

  ÔøΩÔøΩÔøΩ import * as a from "./deep/a"; console.log(a.b.c.d.e)

  ÔøΩÔøΩÔøΩ import { b } from "./deep/a"; console.log(b.c.d.e)

  ÔøΩÔøΩÔøΩ import * as a from "./deep/a"; console.log(a.b.c.d.e.f)

  ÔøΩÔøΩÔøΩ import * as a from "./deep/a"; var {b:{c:{d:{e}}}} = a

  ÔøΩÔøΩÔøΩ import { b } from "./deep/a"; var {c:{d:{e}}} = b

  ÔøΩÔøΩÔøΩ import * as a from "./deep-es7/a"; console.log(a.b.c.d.e)

  ÔøΩÔøΩÔøΩ import { b } from "./deep-es7/a"; console.log(b.c.d.e) (40ms)

  ÔøΩÔøΩÔøΩ import * as a from "./deep-es7/a"; console.log(a.b.c.d.e.f) (49ms)

  ÔøΩÔøΩÔøΩ import * as a from "./deep-es7/a"; var {b:{c:{d:{e}}}} = a (41ms)

  ÔøΩÔøΩÔøΩ import { b } from "./deep-es7/a"; var {c:{d:{e}}} = b (49ms)
invalid

  ÔøΩÔøΩÔøΩ import * as foo from './common';

  ÔøΩÔøΩÔøΩ import * as names from './named-exports';  console.log(names.c);

  ÔøΩÔøΩÔøΩ import * as names from './named-exports'; console.log(names['a']);

  ÔøΩÔøΩÔøΩ import * as foo from './bar'; foo.foo = 'y';

  ÔøΩÔøΩÔøΩ import * as foo from './bar'; foo.x = 'y';

  ÔøΩÔøΩÔøΩ import * as names from "./named-exports"; const { c } = names

  ÔøΩÔøΩÔøΩ import * as names from "./named-exports"; function b() { const { c } = names }

  ÔøΩÔøΩÔøΩ import * as names from "./named-exports"; const { c: d } = names

  ÔøΩÔøΩÔøΩ import * as names from "./named-exports";const { c: { d } } = names

  ÔøΩÔøΩÔøΩ import * as Endpoints from "./issue-195/Endpoints"; console.log(Endpoints.Foo)

  ÔøΩÔøΩÔøΩ import * as namespace from './malformed.js';

  ÔøΩÔøΩÔøΩ import b from './deep/default'; console.log(b.e)

  ÔøΩÔøΩÔøΩ console.log(names.c);import * as names from './named-exports'; 

  ÔøΩÔøΩÔøΩ function x() { console.log(names.c) } import * as names from './named-exports'; 

  ÔøΩÔøΩÔøΩ import * as ree from "./re-export"; console.log(ree.default)

  ÔøΩÔøΩÔøΩ import * as a from "./deep/a"; console.log(a.b.e)

  ÔøΩÔøΩÔøΩ import { b } from "./deep/a"; console.log(b.e)

  ÔøΩÔøΩÔøΩ import * as a from "./deep/a"; console.log(a.b.c.e)

  ÔøΩÔøΩÔøΩ import { b } from "./deep/a"; console.log(b.c.e)

  ÔøΩÔøΩÔøΩ import * as a from "./deep/a"; var {b:{ e }} = a

  ÔøΩÔøΩÔøΩ import * as a from "./deep/a"; var {b:{c:{ e }}} = a

  ÔøΩÔøΩÔøΩ import * as a from "./deep-es7/a"; console.log(a.b.e) (43ms)

  ÔøΩÔøΩÔøΩ import { b } from "./deep-es7/a"; console.log(b.e)

  ÔøΩÔøΩÔøΩ import * as a from "./deep-es7/a"; console.log(a.b.c.e)

  ÔøΩÔøΩÔøΩ import { b } from "./deep-es7/a"; console.log(b.c.e)

  ÔøΩÔøΩÔøΩ import * as a from "./deep-es7/a"; var {b:{ e }} = a

  ÔøΩÔøΩÔøΩ import * as a from "./deep-es7/a"; var {b:{c:{ e }}} = a

newline-after-import
valid
  ÔøΩÔøΩÔøΩ var path = require('path');

var foo = require('foo');
  ÔøΩÔøΩÔøΩ require('foo');

  ÔøΩÔøΩÔøΩ switch ('foo') { case 'bar': require('baz'); }

  ÔøΩÔøΩÔøΩ 
    const x = () => require('baz')
        , y = () => require('bar')

  ÔøΩÔøΩÔøΩ const x = () => require('baz') && require('bar')

  ÔøΩÔøΩÔøΩ function x(){ require('baz'); }

  ÔøΩÔøΩÔøΩ a(require('b'), require('c'), require('d'));

  ÔøΩÔøΩÔøΩ function foo() {
  switch (renderData.modalViewKey) {
    case 'value':
      var bar = require('bar');
      return bar(renderData, options)
    default:
      return renderData.mainModalContent.clone()
  }
}

  ÔøΩÔøΩÔøΩ //issue 441
function bar() {
  switch (foo) {
    case '1':
      return require('../path/to/file1.jst.hbs')(renderData, options);
    case '2':
      return require('../path/to/file2.jst.hbs')(renderData, options);
    case '3':
      return require('../path/to/file3.jst.hbs')(renderData, options);
    case '4':
      return require('../path/to/file4.jst.hbs')(renderData, options);
    case '5':
      return require('../path/to/file5.jst.hbs')(renderData, options);
    case '6':
      return require('../path/to/file6.jst.hbs')(renderData, options);
    case '7':
      return require('../path/to/file7.jst.hbs')(renderData, options);
    case '8':
      return require('../path/to/file8.jst.hbs')(renderData, options);
    case '9':
      return require('../path/to/file9.jst.hbs')(renderData, options);
    case '10':
      return require('../path/to/file10.jst.hbs')(renderData, options);
    case '11':
      return require('../path/to/file11.jst.hbs')(renderData, options);
    case '12':
      return something();
    default:
      return somethingElse();
  }
} (92ms)

  ÔøΩÔøΩÔøΩ import path from 'path';

import foo from 'foo';
  ÔøΩÔøΩÔøΩ import path from 'path';import foo from 'foo';


  ÔøΩÔøΩÔøΩ import path from 'path';import foo from 'foo';

var bar = 42;
  ÔøΩÔøΩÔøΩ import foo from 'foo';

var foo = 'bar';
  ÔøΩÔøΩÔøΩ var foo = require('foo-module');

var foo = 'bar';
  ÔøΩÔøΩÔøΩ require('foo-module');

var foo = 'bar';
  ÔøΩÔøΩÔøΩ import foo from 'foo';

import { bar } from './bar-lib';
  ÔøΩÔøΩÔøΩ import foo from 'foo';

var a = 123;
import { bar } from './bar-lib';
  ÔøΩÔøΩÔøΩ var foo = require('foo-module');

var a = 123;
var bar = require('bar-lib');
invalid
  ÔøΩÔøΩÔøΩ import foo from 'foo';

export default function() {};
  ÔøΩÔøΩÔøΩ var foo = require('foo-module');

var something = 123;
  ÔøΩÔøΩÔøΩ import foo from 'foo';

var a = 123;
import { bar } from './bar-lib';
var b=456;
  ÔøΩÔøΩÔøΩ var foo = require('foo-module');

var a = 123;
var bar = require('bar-lib');
var b=456;
  ÔøΩÔøΩÔøΩ var foo = require('foo-module');

var a = 123;
require('bar-lib');
var b=456;
  ÔøΩÔøΩÔøΩ var path = require('path');

var foo = require('foo');
var bar = 42;
  ÔøΩÔøΩÔøΩ var assign = Object.assign || require('object-assign');

var foo = require('foo');
var bar = 42;
  ÔøΩÔøΩÔøΩ function a() {

var assign = Object.assign || require('object-assign');
var foo = require('foo');
var bar = 42; }
  ÔøΩÔøΩÔøΩ require('a');

foo(require('b'), require('c'), require('d'));
require('d');
var foo = 'bar';
  ÔøΩÔøΩÔøΩ require('a');

foo(
require('b'),
require('c'),
require('d')
);
var foo = 'bar';
  ÔøΩÔøΩÔøΩ import path from 'path';

import foo from 'foo';
var bar = 42;
  ÔøΩÔøΩÔøΩ import path from 'path';import foo from 'foo';var bar = 42;

no-amd
valid
  ÔøΩÔøΩÔøΩ import "x";

  ÔøΩÔøΩÔøΩ import x from "x"

  ÔøΩÔøΩÔøΩ var x = require("x")

  ÔøΩÔøΩÔøΩ require("x")

  ÔøΩÔøΩÔøΩ require("x", "y")

  ÔøΩÔøΩÔøΩ setTimeout(foo, 100)

  ÔøΩÔøΩÔøΩ (a || b)(1, 2, 3)

  ÔøΩÔøΩÔøΩ function x() { define(["a"], function (a) {}) }

  ÔøΩÔøΩÔøΩ function x() { require(["a"], function (a) {}) }

  ÔøΩÔøΩÔøΩ define(0, 1, 2)

  ÔøΩÔøΩÔøΩ define("a")
invalid

  ÔøΩÔøΩÔøΩ define([], function() {})

  ÔøΩÔøΩÔøΩ define(["a"], function(a) { console.log(a); })

  ÔøΩÔøΩÔøΩ require([], function() {})

  ÔøΩÔøΩÔøΩ require(["a"], function(a) { console.log(a); })

no-commonjs
valid
  ÔøΩÔøΩÔøΩ import "x";

  ÔøΩÔøΩÔøΩ import x from "x"

  ÔøΩÔøΩÔøΩ import x from "x"

  ÔøΩÔøΩÔøΩ import { x } from "x"

  ÔøΩÔøΩÔøΩ export default "x"

  ÔøΩÔøΩÔøΩ export function house() {}

  ÔøΩÔøΩÔøΩ function a() { var x = require("y"); }

  ÔøΩÔøΩÔøΩ require.resolve("help")

  ÔøΩÔøΩÔøΩ require.ensure([])

  ÔøΩÔøΩÔøΩ require([], function(a, b, c) {})

  ÔøΩÔøΩÔøΩ var bar = require('./bar', true);

  ÔøΩÔøΩÔøΩ var bar = proxyquire('./bar');

  ÔøΩÔøΩÔøΩ var bar = require('./ba' + 'r');

  ÔøΩÔøΩÔøΩ var zero = require(0);

  ÔøΩÔøΩÔøΩ module.exports = function () {}

  ÔøΩÔøΩÔøΩ module.exports = "foo"
invalid

  ÔøΩÔøΩÔøΩ var x = require("x")

  ÔøΩÔøΩÔøΩ require("x")

  ÔøΩÔøΩÔøΩ exports.face = "palm"

  ÔøΩÔøΩÔøΩ module.exports.face = "palm"

  ÔøΩÔøΩÔøΩ module.exports = face

  ÔøΩÔøΩÔøΩ exports = module.exports = {}

  ÔøΩÔøΩÔøΩ var x = module.exports = {}

  ÔøΩÔøΩÔøΩ module.exports = {}

  ÔøΩÔøΩÔøΩ var x = module.exports

no-deprecated
valid
  ÔøΩÔøΩÔøΩ import { x } from './fake' 

  ÔøΩÔøΩÔøΩ import bar from './bar'

  ÔøΩÔøΩÔøΩ import { fine } from './deprecated'

  ÔøΩÔøΩÔøΩ import { _undocumented } from './deprecated'

  ÔøΩÔøΩÔøΩ import { fn } from './deprecated'

  ÔøΩÔøΩÔøΩ import { fine } from './tomdoc-deprecated'

  ÔøΩÔøΩÔøΩ import { _undocumented } from './tomdoc-deprecated'

  ÔøΩÔøΩÔøΩ import * as depd from './deprecated'

  ÔøΩÔøΩÔøΩ import * as depd from './deprecated'; console.log(depd.fine())

  ÔøΩÔøΩÔøΩ import { deepDep } from './deep-deprecated'

  ÔøΩÔøΩÔøΩ import { deepDep } from './deep-deprecated'; console.log(deepDep.fine())

  ÔøΩÔøΩÔøΩ import { deepDep } from './deep-deprecated'; function x(deepDep) { console.log(deepDep.MY_TERRIBLE_ACTION) }

  ÔøΩÔøΩÔøΩ for (let { foo, bar } of baz) {}

  ÔøΩÔøΩÔøΩ for (let [ foo, bar ] of baz) {}

  ÔøΩÔøΩÔøΩ const { x, y } = bar

  ÔøΩÔøΩÔøΩ const { x, y, ...z } = bar

  ÔøΩÔøΩÔøΩ export { x }

  ÔøΩÔøΩÔøΩ export { x as y }

  ÔøΩÔøΩÔøΩ export const x = null

  ÔøΩÔøΩÔøΩ export var x = null

  ÔøΩÔøΩÔøΩ export let x = null (57ms)

  ÔøΩÔøΩÔøΩ export default x

  ÔøΩÔøΩÔøΩ export default class x {}

  ÔøΩÔøΩÔøΩ import json from "./data.json"

  ÔøΩÔøΩÔøΩ import foo from "./foobar.json";

  ÔøΩÔøΩÔøΩ import foo from "./foobar";

  ÔøΩÔøΩÔøΩ import { foo } from "./issue-370-commonjs-namespace/bar"

  ÔøΩÔøΩÔøΩ export * from "./issue-370-commonjs-namespace/bar"
invalid

  ÔøΩÔøΩÔøΩ import './malformed.js'

  ÔøΩÔøΩÔøΩ import { fn } from './deprecated'

  ÔøΩÔøΩÔøΩ import TerribleClass from './deprecated'

  ÔøΩÔøΩÔøΩ import { MY_TERRIBLE_ACTION } from './deprecated'

  ÔøΩÔøΩÔøΩ import { fn } from './deprecated'

  ÔøΩÔøΩÔøΩ import { fn } from './tomdoc-deprecated'

  ÔøΩÔøΩÔøΩ import TerribleClass from './tomdoc-deprecated'

  ÔøΩÔøΩÔøΩ import { MY_TERRIBLE_ACTION } from './tomdoc-deprecated'

  ÔøΩÔøΩÔøΩ import { MY_TERRIBLE_ACTION } from './deprecated'; function shadow(MY_TERRIBLE_ACTION) { console.log(MY_TERRIBLE_ACTION); }

  ÔøΩÔøΩÔøΩ import { MY_TERRIBLE_ACTION, fine } from './deprecated'; console.log(fine)

  ÔøΩÔøΩÔøΩ import { MY_TERRIBLE_ACTION } from './deprecated'; console.log(MY_TERRIBLE_ACTION)

  ÔøΩÔøΩÔøΩ import { MY_TERRIBLE_ACTION } from './deprecated'; console.log(someOther.MY_TERRIBLE_ACTION)

  ÔøΩÔøΩÔøΩ import { MY_TERRIBLE_ACTION } from './deprecated'; console.log(MY_TERRIBLE_ACTION.whatever())

  ÔøΩÔøΩÔøΩ import { MY_TERRIBLE_ACTION } from './deprecated'; console.log(MY_TERRIBLE_ACTION(this, is, the, worst))

  ÔøΩÔøΩÔøΩ import Thing from './deprecated-file'

  ÔøΩÔøΩÔøΩ import Thing from './deprecated-file'; console.log(other.Thing)

  ÔøΩÔøΩÔøΩ import * as depd from './deprecated'; console.log(depd.MY_TERRIBLE_ACTION)

  ÔøΩÔøΩÔøΩ import * as deep from './deep-deprecated'; console.log(deep.deepDep.MY_TERRIBLE_ACTION)

  ÔøΩÔøΩÔøΩ import { deepDep } from './deep-deprecated'; console.log(deepDep.MY_TERRIBLE_ACTION)

  ÔøΩÔøΩÔøΩ import { deepDep } from './deep-deprecated'; function x(deepNDep) { console.log(deepDep.MY_TERRIBLE_ACTION) }

no-deprecated: hoisting
valid
  ÔøΩÔøΩÔøΩ function x(deepDep) { console.log(deepDep.MY_TERRIBLE_ACTION) } import { deepDep } from './deep-deprecated'
invalid

  ÔøΩÔøΩÔøΩ console.log(MY_TERRIBLE_ACTION); import { MY_TERRIBLE_ACTION } from './deprecated'

no-duplicates
valid
  ÔøΩÔøΩÔøΩ import "./malformed.js"

  ÔøΩÔøΩÔøΩ import { x } from './foo'; import { y } from './bar'

  ÔøΩÔøΩÔøΩ import foo from "234artaf";import { shoop } from "234q25ad"

  ÔøΩÔøΩÔøΩ import { x } from './foo'; import type { y } from './foo'
invalid

  ÔøΩÔøΩÔøΩ import { x } from './foo'; import { y } from './foo'

  ÔøΩÔøΩÔøΩ import { x } from './foo'; import { y } from './foo'; import { z } from './foo'

  ÔøΩÔøΩÔøΩ import { x } from './bar'; import { y } from 'bar';

  ÔøΩÔøΩÔøΩ import foo from 'non-existent'; import bar from 'non-existent'; (41ms)

  ÔøΩÔøΩÔøΩ import type { x } from './foo'; import type { y } from './foo'

no-extraneous-dependencies
valid
  ÔøΩÔøΩÔøΩ import "lodash.cond"

  ÔøΩÔøΩÔøΩ import "pkg-up"

  ÔøΩÔøΩÔøΩ import foo, { bar } from "lodash.cond"

  ÔøΩÔøΩÔøΩ import foo, { bar } from "pkg-up"

  ÔøΩÔøΩÔøΩ import "eslint"

  ÔøΩÔøΩÔøΩ import "eslint/lib/api"

  ÔøΩÔøΩÔøΩ require("lodash.cond")

  ÔøΩÔøΩÔøΩ require("pkg-up")

  ÔøΩÔøΩÔøΩ var foo = require("lodash.cond")

  ÔøΩÔøΩÔøΩ var foo = require("pkg-up")

  ÔøΩÔøΩÔøΩ import "fs"

  ÔøΩÔøΩÔøΩ import "./foo"

  ÔøΩÔøΩÔøΩ import "lodash.isarray"

  ÔøΩÔøΩÔøΩ import "@scope/core"

  ÔøΩÔøΩÔøΩ import "electron"

  ÔøΩÔøΩÔøΩ import "eslint"

  ÔøΩÔøΩÔøΩ import "eslint"

  ÔøΩÔøΩÔøΩ import "importType"
invalid

  ÔøΩÔøΩÔøΩ import "not-a-dependency"

  ÔøΩÔøΩÔøΩ var donthaveit = require("@scope/donthaveit")

  ÔøΩÔøΩÔøΩ var donthaveit = require("@scope/donthaveit/lib/foo")

  ÔøΩÔøΩÔøΩ import "eslint"

  ÔøΩÔøΩÔøΩ import "lodash.isarray"

  ÔøΩÔøΩÔøΩ var foo = require("not-a-dependency")

  ÔøΩÔøΩÔøΩ var glob = require("glob")

  ÔøΩÔøΩÔøΩ var eslint = require("lodash.isarray")

no-mutable-exports
valid
  ÔøΩÔøΩÔøΩ export const count = 1

  ÔøΩÔøΩÔøΩ export function getCount() {}

  ÔøΩÔøΩÔøΩ export class Counter {}

  ÔøΩÔøΩÔøΩ export default count = 1

  ÔøΩÔøΩÔøΩ export default function getCount() {}

  ÔøΩÔøΩÔøΩ export default class Counter {}

  ÔøΩÔøΩÔøΩ const count = 1

export { count }
  ÔøΩÔøΩÔøΩ const count = 1

export { count as counter }
  ÔøΩÔøΩÔøΩ const count = 1

export default count
  ÔøΩÔøΩÔøΩ const count = 1

export { count as default }
  ÔøΩÔøΩÔøΩ function getCount() {}

export { getCount }
  ÔøΩÔøΩÔøΩ function getCount() {}

export { getCount as getCounter } (79ms)
  ÔøΩÔøΩÔøΩ function getCount() {}

export default getCount
  ÔøΩÔøΩÔøΩ function getCount() {}

export { getCount as default }
  ÔøΩÔøΩÔøΩ class Counter {}

export { Counter }
  ÔøΩÔøΩÔøΩ class Counter {}

export { Counter as Count }
  ÔøΩÔøΩÔøΩ class Counter {}

export default Counter
  ÔøΩÔøΩÔøΩ class Counter {}

export { Counter as default }
  ÔøΩÔøΩÔøΩ export Something from "./something";
invalid

  ÔøΩÔøΩÔøΩ export let count = 1

  ÔøΩÔøΩÔøΩ export var count = 1

  ÔøΩÔøΩÔøΩ let count = 1

export { count }
  ÔøΩÔøΩÔøΩ var count = 1

export { count }
  ÔøΩÔøΩÔøΩ let count = 1

export { count as counter }
  ÔøΩÔøΩÔøΩ var count = 1

export { count as counter }
  ÔøΩÔøΩÔøΩ let count = 1

export default count
  ÔøΩÔøΩÔøΩ var count = 1

export default count
no-named-as-default-member
valid
  ÔøΩÔøΩÔøΩ import bar, {foo} from "./bar";

  ÔøΩÔøΩÔøΩ import bar from "./bar"; const baz = bar.baz

  ÔøΩÔøΩÔøΩ import {foo} from "./bar"; const baz = foo.baz;

  ÔøΩÔøΩÔøΩ import * as named from "./named-exports"; const a = named.a

  ÔøΩÔøΩÔøΩ for (let { foo, bar } of baz) {}

  ÔøΩÔøΩÔøΩ for (let [ foo, bar ] of baz) {}

  ÔøΩÔøΩÔøΩ const { x, y } = bar

  ÔøΩÔøΩÔøΩ const { x, y, ...z } = bar

  ÔøΩÔøΩÔøΩ export { x }

  ÔøΩÔøΩÔøΩ export { x as y }

  ÔøΩÔøΩÔøΩ export const x = null

  ÔøΩÔøΩÔøΩ export var x = null

  ÔøΩÔøΩÔøΩ export let x = null

  ÔøΩÔøΩÔøΩ export default x

  ÔøΩÔøΩÔøΩ export default class x {}

  ÔøΩÔøΩÔøΩ import json from "./data.json"

  ÔøΩÔøΩÔøΩ import foo from "./foobar.json";

  ÔøΩÔøΩÔøΩ import foo from "./foobar";

  ÔøΩÔøΩÔøΩ import { foo } from "./issue-370-commonjs-namespace/bar"

  ÔøΩÔøΩÔøΩ export * from "./issue-370-commonjs-namespace/bar"
invalid

  ÔøΩÔøΩÔøΩ import bar from "./bar"; const foo = bar.foo;

  ÔøΩÔøΩÔøΩ import bar from "./bar"; bar.foo();

  ÔøΩÔøΩÔøΩ import bar from "./bar"; const {foo} = bar;

  ÔøΩÔøΩÔøΩ import bar from "./bar"; const {foo: foo2, baz} = bar;

no-named-as-default
valid
  ÔøΩÔøΩÔøΩ import "./malformed.js"

  ÔøΩÔøΩÔøΩ import bar, { foo } from "./bar";

  ÔøΩÔøΩÔøΩ import bar, { foo } from "./empty-folder";

  ÔøΩÔøΩÔøΩ export bar, { foo } from "./bar";

  ÔøΩÔøΩÔøΩ export bar from "./bar";

  ÔøΩÔøΩÔøΩ for (let { foo, bar } of baz) {}

  ÔøΩÔøΩÔøΩ for (let [ foo, bar ] of baz) {}

  ÔøΩÔøΩÔøΩ const { x, y } = bar

  ÔøΩÔøΩÔøΩ const { x, y, ...z } = bar

  ÔøΩÔøΩÔøΩ export { x }

  ÔøΩÔøΩÔøΩ export { x as y }

  ÔøΩÔøΩÔøΩ export const x = null

  ÔøΩÔøΩÔøΩ export var x = null

  ÔøΩÔøΩÔøΩ export let x = null

  ÔøΩÔøΩÔøΩ export default x

  ÔøΩÔøΩÔøΩ export default class x {}

  ÔøΩÔøΩÔøΩ import json from "./data.json"

  ÔøΩÔøΩÔøΩ import foo from "./foobar.json";

  ÔøΩÔøΩÔøΩ import foo from "./foobar";

  ÔøΩÔøΩÔøΩ import { foo } from "./issue-370-commonjs-namespace/bar"

  ÔøΩÔøΩÔøΩ export * from "./issue-370-commonjs-namespace/bar"
invalid

  ÔøΩÔøΩÔøΩ import foo from "./bar";

  ÔøΩÔøΩÔøΩ import foo, { foo as bar } from "./bar";

  ÔøΩÔøΩÔøΩ export foo from "./bar";

  ÔøΩÔøΩÔøΩ export foo, { foo as bar } from "./bar";

  ÔøΩÔøΩÔøΩ import foo from "./malformed.js"

no-namespace
valid
  ÔøΩÔøΩÔøΩ import { a, b } from 'foo';

  ÔøΩÔøΩÔøΩ import { a, b } from './foo';

  ÔøΩÔøΩÔøΩ import bar from 'bar';

  ÔøΩÔøΩÔøΩ import bar from './bar';
invalid

  ÔøΩÔøΩÔøΩ import * as foo from 'foo';

  ÔøΩÔøΩÔøΩ import defaultExport, * as foo from 'foo';

  ÔøΩÔøΩÔøΩ import * as foo from './foo';

no-nodejs-modules
valid
  ÔøΩÔøΩÔøΩ import _ from "lodash"

  ÔøΩÔøΩÔøΩ import find from "lodash.find"

  ÔøΩÔøΩÔøΩ import foo from "./foo"

  ÔøΩÔøΩÔøΩ import foo from "../foo"

  ÔøΩÔøΩÔøΩ import foo from "foo"

  ÔøΩÔøΩÔøΩ import foo from "./"

  ÔøΩÔøΩÔøΩ import foo from "@scope/foo"

  ÔøΩÔøΩÔøΩ var _ = require("lodash")

  ÔøΩÔøΩÔøΩ var find = require("lodash.find")

  ÔøΩÔøΩÔøΩ var foo = require("./foo")

  ÔøΩÔøΩÔøΩ var foo = require("../foo")

  ÔøΩÔøΩÔøΩ var foo = require("foo")

  ÔøΩÔøΩÔøΩ var foo = require("./")

  ÔøΩÔøΩÔøΩ var foo = require("@scope/foo")
invalid

  ÔøΩÔøΩÔøΩ import path from "path"

  ÔøΩÔøΩÔøΩ import fs from "fs"

  ÔøΩÔøΩÔøΩ var path = require("path")

  ÔøΩÔøΩÔøΩ var fs = require("fs")

no-restricted-paths
valid
  ÔøΩÔøΩÔøΩ import a from "../client/a.js"

  ÔøΩÔøΩÔøΩ const a = require("../client/a.js")

  ÔøΩÔøΩÔøΩ import b from "../server/b.js"
invalid

  ÔøΩÔøΩÔøΩ import b from "../server/b.js"

  ÔøΩÔøΩÔøΩ import a from "../client/a"

import c from "./c"
  ÔøΩÔøΩÔøΩ import b from "../server/b.js"

  ÔøΩÔøΩÔøΩ const b = require("../server/b.js")

no-unresolved (node)
valid
  ÔøΩÔøΩÔøΩ import "./malformed.js"

  ÔøΩÔøΩÔøΩ import foo from "./bar";

  ÔøΩÔøΩÔøΩ import bar from './bar.js';

  ÔøΩÔøΩÔøΩ import {someThing} from './test-module';

  ÔøΩÔøΩÔøΩ import fs from 'fs';

  ÔøΩÔøΩÔøΩ import * as foo from "a"

  ÔøΩÔøΩÔøΩ export { foo } from "./bar"

  ÔøΩÔøΩÔøΩ export * from "./bar"

  ÔøΩÔøΩÔøΩ export { foo }

  ÔøΩÔøΩÔøΩ export * as bar from "./bar"

  ÔøΩÔøΩÔøΩ export bar from "./bar"

  ÔøΩÔøΩÔøΩ import foo from "./jsx/MyUnCoolComponent.jsx"

  ÔøΩÔøΩÔøΩ var foo = require("./bar")

  ÔøΩÔøΩÔøΩ require("./bar")

  ÔøΩÔøΩÔøΩ require("./does-not-exist")

  ÔøΩÔøΩÔøΩ require("./does-not-exist")

  ÔøΩÔøΩÔøΩ require(["./bar"], function (bar) {})

  ÔøΩÔøΩÔøΩ define(["./bar"], function (bar) {})

  ÔøΩÔøΩÔøΩ require(["./does-not-exist"], function (bar) {})

  ÔøΩÔøΩÔøΩ define(["require", "exports", "module"], function (r, e, m) { })

  ÔøΩÔøΩÔøΩ require(["./does-not-exist"])

  ÔøΩÔøΩÔøΩ define(["./does-not-exist"], function (bar) {})

  ÔøΩÔøΩÔøΩ require("./does-not-exist", "another arg")

  ÔøΩÔøΩÔøΩ proxyquire("./does-not-exist")

  ÔøΩÔøΩÔøΩ (function() {})("./does-not-exist")

  ÔøΩÔøΩÔøΩ define([0, foo], function (bar) {})

  ÔøΩÔøΩÔøΩ require(0)

  ÔøΩÔøΩÔøΩ require(foo)
invalid

  ÔøΩÔøΩÔøΩ import reallyfake from "./reallyfake/module"

  ÔøΩÔøΩÔøΩ import bar from './baz';

  ÔøΩÔøΩÔøΩ import bar from './baz';

  ÔøΩÔøΩÔøΩ import bar from './empty-folder';

  ÔøΩÔøΩÔøΩ import { DEEP } from 'in-alternate-root';

  ÔøΩÔøΩÔøΩ export { foo } from "./does-not-exist"

  ÔøΩÔøΩÔøΩ export * from "./does-not-exist"

  ÔøΩÔøΩÔøΩ export * as bar from "./does-not-exist"

  ÔøΩÔøΩÔøΩ export bar from "./does-not-exist"

  ÔøΩÔøΩÔøΩ import foo from "./jsx/MyUncoolComponent.jsx"

  ÔøΩÔøΩÔøΩ var bar = require("./baz")

  ÔøΩÔøΩÔøΩ require("./baz")

  ÔøΩÔøΩÔøΩ require(["./baz"], function (bar) {})

  ÔøΩÔøΩÔøΩ define(["./baz"], function (bar) {})

  ÔøΩÔøΩÔøΩ define(["./baz", "./bar", "./does-not-exist"], function (bar) {})

issue #333 (node)
valid
  ÔøΩÔøΩÔøΩ import foo from "./bar.json"

  ÔøΩÔøΩÔøΩ import foo from "./bar"

  ÔøΩÔøΩÔøΩ import foo from "./bar.json"

  ÔøΩÔøΩÔøΩ import foo from "./bar"
invalid

  ÔøΩÔøΩÔøΩ import bar from "./foo.json"

no-unresolved (webpack)
valid
  ÔøΩÔøΩÔøΩ import "./malformed.js"

  ÔøΩÔøΩÔøΩ import foo from "./bar"; (153ms)

  ÔøΩÔøΩÔøΩ import bar from './bar.js';

  ÔøΩÔøΩÔøΩ import {someThing} from './test-module';

  ÔøΩÔøΩÔøΩ import fs from 'fs';

  ÔøΩÔøΩÔøΩ import * as foo from "a"

  ÔøΩÔøΩÔøΩ export { foo } from "./bar"

  ÔøΩÔøΩÔøΩ export * from "./bar"

  ÔøΩÔøΩÔøΩ export { foo }

  ÔøΩÔøΩÔøΩ export * as bar from "./bar"

  ÔøΩÔøΩÔøΩ export bar from "./bar"

  ÔøΩÔøΩÔøΩ import foo from "./jsx/MyUnCoolComponent.jsx"

  ÔøΩÔøΩÔøΩ var foo = require("./bar")

  ÔøΩÔøΩÔøΩ require("./bar")

  ÔøΩÔøΩÔøΩ require("./does-not-exist")

  ÔøΩÔøΩÔøΩ require("./does-not-exist")

  ÔøΩÔøΩÔøΩ require(["./bar"], function (bar) {})

  ÔøΩÔøΩÔøΩ define(["./bar"], function (bar) {})

  ÔøΩÔøΩÔøΩ require(["./does-not-exist"], function (bar) {})

  ÔøΩÔøΩÔøΩ define(["require", "exports", "module"], function (r, e, m) { })

  ÔøΩÔøΩÔøΩ require(["./does-not-exist"])

  ÔøΩÔøΩÔøΩ define(["./does-not-exist"], function (bar) {})

  ÔøΩÔøΩÔøΩ require("./does-not-exist", "another arg")

  ÔøΩÔøΩÔøΩ proxyquire("./does-not-exist")

  ÔøΩÔøΩÔøΩ (function() {})("./does-not-exist")

  ÔøΩÔøΩÔøΩ define([0, foo], function (bar) {})

  ÔøΩÔøΩÔøΩ require(0)

  ÔøΩÔøΩÔøΩ require(foo)
invalid

  ÔøΩÔøΩÔøΩ import reallyfake from "./reallyfake/module"

  ÔøΩÔøΩÔøΩ import bar from './baz';

  ÔøΩÔøΩÔøΩ import bar from './baz';

  ÔøΩÔøΩÔøΩ import bar from './empty-folder';

  ÔøΩÔøΩÔøΩ import { DEEP } from 'in-alternate-root';

  ÔøΩÔøΩÔøΩ export { foo } from "./does-not-exist"

  ÔøΩÔøΩÔøΩ export * from "./does-not-exist"

  ÔøΩÔøΩÔøΩ export * as bar from "./does-not-exist"

  ÔøΩÔøΩÔøΩ export bar from "./does-not-exist"

  ÔøΩÔøΩÔøΩ import foo from "./jsx/MyUncoolComponent.jsx"

  ÔøΩÔøΩÔøΩ var bar = require("./baz")

  ÔøΩÔøΩÔøΩ require("./baz")

  ÔøΩÔøΩÔøΩ require(["./baz"], function (bar) {})

  ÔøΩÔøΩÔøΩ define(["./baz"], function (bar) {})

  ÔøΩÔøΩÔøΩ define(["./baz", "./bar", "./does-not-exist"], function (bar) {})

issue #333 (webpack)
valid
  ÔøΩÔøΩÔøΩ import foo from "./bar.json"

  ÔøΩÔøΩÔøΩ import foo from "./bar"

  ÔøΩÔøΩÔøΩ import foo from "./bar.json"

  ÔøΩÔøΩÔøΩ import foo from "./bar"
invalid

  ÔøΩÔøΩÔøΩ import bar from "./foo.json"

no-unresolved (import/resolve legacy)
valid
  ÔøΩÔøΩÔøΩ import { DEEP } from 'in-alternate-root';

  ÔøΩÔøΩÔøΩ import { DEEP } from 'in-alternate-root'; import { bar } from 'src-bar';

  ÔøΩÔøΩÔøΩ import * as foo from "jsx-module/foo"
invalid

  ÔøΩÔøΩÔøΩ import * as foo from "jsx-module/foo"

no-unresolved (webpack-specific)
valid
  ÔøΩÔøΩÔøΩ import * as foo from "jsx-module/foo"

  ÔøΩÔøΩÔøΩ import * as foo from "some-loader?with=args!jsx-module/foo"
invalid

  ÔøΩÔøΩÔøΩ import * as foo from "jsx-module/foo" (50ms)

no-unresolved ignore list
valid
  ÔøΩÔøΩÔøΩ import "./malformed.js"

  ÔøΩÔøΩÔøΩ import "./test.giffy"

  ÔøΩÔøΩÔøΩ import "./test.gif"

  ÔøΩÔøΩÔøΩ import "./test.png"
invalid

  ÔøΩÔøΩÔøΩ import "./test.gif"

  ÔøΩÔøΩÔøΩ import "./test.png"

no-unresolved unknown resolver
invalid
  ÔøΩÔøΩÔøΩ import "./malformed.js"

  ÔøΩÔøΩÔøΩ import "./malformed.js"; import "./fake.js"

no-unresolved electron
valid
  ÔøΩÔøΩÔøΩ import "electron"
invalid

  ÔøΩÔøΩÔøΩ import "electron"

no-unresolved syntax verification
valid
  ÔøΩÔøΩÔøΩ for (let { foo, bar } of baz) {}

  ÔøΩÔøΩÔøΩ for (let [ foo, bar ] of baz) {}

  ÔøΩÔøΩÔøΩ const { x, y } = bar

  ÔøΩÔøΩÔøΩ const { x, y, ...z } = bar

  ÔøΩÔøΩÔøΩ export { x }

  ÔøΩÔøΩÔøΩ export { x as y }

  ÔøΩÔøΩÔøΩ export const x = null

  ÔøΩÔøΩÔøΩ export var x = null

  ÔøΩÔøΩÔøΩ export let x = null

  ÔøΩÔøΩÔøΩ export default x

  ÔøΩÔøΩÔøΩ export default class x {}

  ÔøΩÔøΩÔøΩ import json from "./data.json"

  ÔøΩÔøΩÔøΩ import foo from "./foobar.json";

  ÔøΩÔøΩÔøΩ import foo from "./foobar";

  ÔøΩÔøΩÔøΩ import { foo } from "./issue-370-commonjs-namespace/bar"

  ÔøΩÔøΩÔøΩ export * from "./issue-370-commonjs-namespace/bar"

order
valid
  ÔøΩÔøΩÔøΩ 
    var fs = require('fs');
    var async = require('async');
    var relParent1 = require('../foo');
    var relParent2 = require('../foo/bar');
    var relParent3 = require('../');
    var sibling = require('./foo');
    var index = require('./');

  ÔøΩÔøΩÔøΩ 
    import fs from 'fs';
    import async, {foo1} from 'async';
    import relParent1 from '../foo';
    import relParent2, {foo2} from '../foo/bar';
    import relParent3 from '../';
    import sibling, {foo3} from './foo';
    import index from './';

  ÔøΩÔøΩÔøΩ 
    var fs = require('fs');
    var fs = require('fs');
    var path = require('path');
    var _ = require('lodash');
    var async = require('async');

  ÔøΩÔøΩÔøΩ 
    var index = require('./');
    var sibling = require('./foo');
    var relParent3 = require('../');
    var relParent2 = require('../foo/bar');
    var relParent1 = require('../foo');
    var async = require('async');
    var fs = require('fs');


  ÔøΩÔøΩÔøΩ 
    var path = require('path');
    var _ = require('lodash');
    var async = require('async');
    var fs = require('f' + 's');

  ÔøΩÔøΩÔøΩ 
    var path = require('path');
    var result = add(1, 2);
    var _ = require('lodash');

  ÔøΩÔøΩÔøΩ 
    var index = require('./');
    function foo() {
      var fs = require('fs');
    }
    () => require('fs');
    if (a) {
      require('fs');
    }

  ÔøΩÔøΩÔøΩ 
    var unknown1 = require('/unknown1');
    var fs = require('fs');
    var unknown2 = require('/unknown2');
    var async = require('async');
    var unknown3 = require('/unknown3');
    var foo = require('../foo');
    var unknown4 = require('/unknown4');
    var bar = require('../foo/bar');
    var unknown5 = require('/unknown5');
    var parent = require('../');
    var unknown6 = require('/unknown6');
    var foo = require('./foo');
    var unknown7 = require('/unknown7');
    var index = require('./');
    var unknown8 = require('/unknown8');


  ÔøΩÔøΩÔøΩ 
    require('./foo');
    require('fs');
    var path = require('path');


  ÔøΩÔøΩÔøΩ 
    import './foo';
    import 'fs';
    import path from 'path';


  ÔøΩÔøΩÔøΩ 
    function add(a, b) {
      return a + b;
    }
    var foo;


  ÔøΩÔøΩÔøΩ 
    var fs = require('fs');
    var index = require('./');
    var path = require('path');

    var sibling = require('./foo');
    var relParent3 = require('../');
    var async = require('async');
    var relParent1 = require('../foo');


  ÔøΩÔøΩÔøΩ 
    var index = require('./');
    var path = require('path');


  ÔøΩÔøΩÔøΩ 
    import async, {foo1} from 'async';
    import relParent2, {foo2} from '../foo/bar';
    import sibling, {foo3} from './foo';
    var fs = require('fs');
    var relParent1 = require('../foo');
    var relParent3 = require('../');
    var index = require('./');


  ÔøΩÔøΩÔøΩ 
    var fs = require('fs');
    var index = require('./');
    var path = require('path');



    var sibling = require('./foo');


    var relParent1 = require('../foo');
    var relParent3 = require('../');
    var async = require('async');


  ÔøΩÔøΩÔøΩ 
    var fs = require('fs');
    var index = require('./');
    var path = require('path');
    var sibling = require('./foo');
    var relParent1 = require('../foo');
    var relParent3 = require('../');
    var async = require('async');


  ÔøΩÔøΩÔøΩ 
    import path from 'path';

    import {
        I,
        Want,
        Couple,
        Imports,
        Here
    } from 'bar';
    import external from 'external'


  ÔøΩÔøΩÔøΩ 
    import path from 'path';
    import net
      from 'net';

    import external from 'external'


  ÔøΩÔøΩÔøΩ 
    import foo
      from '../../../../this/will/be/very/long/path/and/therefore/this/import/has/to/be/in/two/lines';

    import bar
      from './sibling';


  ÔøΩÔøΩÔøΩ 
    import path from 'path';

    import 'loud-rejection';
    import 'something-else';

    import _ from 'lodash';


  ÔøΩÔøΩÔøΩ 
    import path from 'path';
    import 'loud-rejection';
    import 'something-else';
    import _ from 'lodash';


  ÔøΩÔøΩÔøΩ 
    var path = require('path');

    require('loud-rejection');
    require('something-else');

    var _ = require('lodash');


  ÔøΩÔøΩÔøΩ 
    var path = require('path');
    require('loud-rejection');
    require('something-else');
    var _ = require('lodash');


  ÔøΩÔøΩÔøΩ 
    var some = require('asdas');
    var config = {
      port: 4444,
      runner: {
        server_path: require('runner-binary').path,

        cli_args: {
            'webdriver.chrome.driver': require('browser-binary').path
        }
      }
    }


  ÔøΩÔøΩÔøΩ 
    var some = require('asdas');
    var config = {
      port: 4444,
      runner: {
        server_path: require('runner-binary').path,
        cli_args: {
            'webdriver.chrome.driver': require('browser-binary').path
        }
      }
    }

invalid

  ÔøΩÔøΩÔøΩ 
    var async = require('async');
    var fs = require('fs');


  ÔøΩÔøΩÔøΩ 
    import async from 'async';
    import fs from 'fs';


  ÔøΩÔøΩÔøΩ 
    var async = require('async');
    import fs from 'fs';


  ÔøΩÔøΩÔøΩ 
    var parent = require('../parent');
    var async = require('async');


  ÔøΩÔøΩÔøΩ 
    var sibling = require('./sibling');
    var parent = require('../parent');


  ÔøΩÔøΩÔøΩ 
    var index = require('./');
    var sibling = require('./sibling');


  ÔøΩÔøΩÔøΩ 
    var sibling = require('./sibling');
    var async = require('async');
    var fs = require('fs');


  ÔøΩÔøΩÔøΩ 
    var index = require('./');
    var fs = require('fs');
    var path = require('path');
    var _ = require('lodash');
    var foo = require('foo');
    var bar = require('bar');


  ÔøΩÔøΩÔøΩ 
    var fs = require('fs');
    var index = require('./');


  ÔøΩÔøΩÔøΩ 
    var foo = require('./foo').bar;
    var fs = require('fs');


  ÔøΩÔøΩÔøΩ 
    var foo = require('./foo').bar.bar.bar;
    var fs = require('fs');


  ÔøΩÔøΩÔøΩ 
    var fs = require('fs');
    var index = require('./');
    var sibling = require('./foo');
    var path = require('path');


  ÔøΩÔøΩÔøΩ 
    var path = require('path');
    var async = require('async');


  ÔøΩÔøΩÔøΩ 
    var async = require('async');
    var index = require('./');


  ÔøΩÔøΩÔøΩ 
    var async = require('async');
    var index = require('./');


  ÔøΩÔøΩÔøΩ 
    var async = require('async');
    var index = require('./');


  ÔøΩÔøΩÔøΩ 
    var async = require('async');
    var index = require('./');


  ÔøΩÔøΩÔøΩ 
    import async, {foo1} from 'async';
    import relParent2, {foo2} from '../foo/bar';
    var fs = require('fs');
    var relParent1 = require('../foo');
    var relParent3 = require('../');
    import sibling, {foo3} from './foo';
    var index = require('./');


  ÔøΩÔøΩÔøΩ 
    var fs = require('fs');
    import async, {foo1} from 'async';
    import relParent2, {foo2} from '../foo/bar';


  ÔøΩÔøΩÔøΩ 
    var fs = require('fs');
    var index = require('./');
    var path = require('path');

    var sibling = require('./foo');

    var relParent1 = require('../foo');
    var relParent3 = require('../');
    var async = require('async');
   (39ms)

  ÔøΩÔøΩÔøΩ 
    var fs = require('fs');
    var index = require('./');
    var path = require('path');
    var sibling = require('./foo');
    var relParent1 = require('../foo');
    var relParent3 = require('../');
    var async = require('async');


  ÔøΩÔøΩÔøΩ 
    var fs = require('fs');

    var path = require('path');
    var index = require('./');

    var sibling = require('./foo');

    var async = require('async');


  ÔøΩÔøΩÔøΩ 
    import path from 'path';
    import 'loud-rejection';

    import 'something-else';
    import _ from 'lodash';


  ÔøΩÔøΩÔøΩ 
    import path from 'path';
    import 'loud-rejection';
    import 'something-else';
    import _ from 'lodash';

prefer-default-export
valid
  ÔøΩÔøΩÔøΩ 
    export const foo = 'foo';
    export const bar = 'bar';

  ÔøΩÔøΩÔøΩ 
    export default function bar() {};

  ÔøΩÔøΩÔøΩ 
    export const foo = 'foo';
    export function bar() {};

  ÔøΩÔøΩÔøΩ 
    export const foo = 'foo';
    export default bar;

  ÔøΩÔøΩÔøΩ 
    export { foo, bar }

  ÔøΩÔøΩÔøΩ 
    export const { foo, bar } = item;

  ÔøΩÔøΩÔøΩ 
    export const { foo, bar: baz } = item;

  ÔøΩÔøΩÔøΩ 
    export const { foo: { bar, baz } } = item;

  ÔøΩÔøΩÔøΩ 
    export const foo = item;
    export { item };

  ÔøΩÔøΩÔøΩ 
    export { foo as default }

  ÔøΩÔøΩÔøΩ 
    export * from './foo';

  ÔøΩÔøΩÔøΩ 
    import * as foo from './foo';
invalid

  ÔøΩÔøΩÔøΩ 
    export function bar() {};

  ÔøΩÔøΩÔøΩ 
    export const foo = 'foo';

  ÔøΩÔøΩÔøΩ 
    const foo = 'foo';
    export { foo };

  ÔøΩÔøΩÔøΩ 
    export const { foo } = { foo: "bar" };

  ÔøΩÔøΩÔøΩ 
    export const { foo: { bar } } = { foo: { bar: "baz" } };

781 passing (11s)
--------------------------------|----------|----------|----------|----------|----------------|
File                            |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |
--------------------------------|----------|----------|----------|----------|----------------|
All files                       |    94.64 |    89.76 |    97.46 |    95.68 |                |
config                         |      100 |      100 |      100 |      100 |                |
electron.js                   |      100 |      100 |      100 |      100 |                |
errors.js                     |      100 |      100 |      100 |      100 |                |
react-native.js               |      100 |      100 |      100 |      100 |                |
react.js                      |      100 |      100 |      100 |      100 |                |
stage-0.js                    |      100 |      100 |      100 |      100 |                |
warnings.js                   |      100 |      100 |      100 |      100 |                |
src                            |      100 |      100 |      100 |      100 |                |
importDeclaration.js          |      100 |      100 |      100 |      100 |                |
index.js                      |      100 |      100 |      100 |      100 |                |
src/core                       |     88.4 |    81.25 |    95.12 |    90.14 |                |
declaredScope.js              |    85.71 |       75 |      100 |      100 |                |
getExports.js                 |    94.42 |    86.51 |    95.35 |    95.74 |... 330,332,333 |
hash.js                       |      100 |      100 |      100 |      100 |                |
ignore.js                     |      100 |      100 |      100 |      100 |                |
importType.js                 |      100 |      100 |      100 |      100 |                |
module-require.js             |    72.73 |      100 |      100 |    72.73 |       20,22,26 |
parse.js                      |       80 |       50 |      100 |      100 |                |
resolve.js                    |    69.66 |       56 |    86.67 |     71.6 |... 136,137,152 |
staticRequire.js              |      100 |      100 |      100 |      100 |                |
src/rules                      |    97.61 |    94.43 |      100 |    98.15 |                |
default.js                    |      100 |      100 |      100 |      100 |                |
export.js                     |    97.44 |    95.65 |      100 |      100 |                |
extensions.js                 |      100 |    95.45 |      100 |      100 |                |
imports-first.js              |      100 |    94.12 |      100 |      100 |                |
named.js                      |      100 |      100 |      100 |      100 |                |
namespace.js                  |    94.81 |    95.24 |      100 |    93.75 |   89,90,94,158 |
newline-after-import.js       |      100 |      100 |      100 |      100 |                |
no-amd.js                     |      100 |      100 |      100 |      100 |                |
no-commonjs.js                |      100 |      100 |      100 |      100 |                |
no-deprecated.js              |    93.42 |       90 |      100 |    98.31 |             49 |
no-duplicates.js              |      100 |      100 |      100 |      100 |                |
no-extraneous-dependencies.js |    92.11 |    81.08 |      100 |    92.11 |        9,21,79 |
no-mutable-exports.js         |      100 |    92.86 |      100 |      100 |                |
no-named-as-default-member.js |    93.75 |    94.12 |      100 |     93.1 |          28,29 |
no-named-as-default.js        |      100 |      100 |      100 |      100 |                |
no-namespace.js               |      100 |      100 |      100 |      100 |                |
no-nodejs-modules.js          |      100 |       75 |      100 |      100 |                |
no-restricted-paths.js        |    95.24 |    66.67 |      100 |    95.24 |             22 |
no-unresolved.js              |      100 |      100 |      100 |      100 |                |
order.js                      |      100 |    97.83 |      100 |      100 |                |
prefer-default-export.js      |      100 |      100 |      100 |      100 |                |
tests/files                    |      100 |      100 |      100 |      100 |                |
foo-bar-resolver.js           |      100 |      100 |      100 |      100 |                |
issue210.config.js            |      100 |      100 |      100 |      100 |                |
webpack.config.js             |      100 |      100 |      100 |      100 |                |
webpack.empty.config.js       |      100 |      100 |      100 |      100 |                |
tests/src                      |    93.33 |       75 |      100 |      100 |                |
cli.js                        |      100 |      100 |      100 |      100 |                |
package.js                    |    90.32 |       50 |      100 |      100 |                |
utils.js                      |      100 |      100 |      100 |      100 |                |
tests/src/core                 |    94.51 |       50 |    94.38 |    95.08 |                |
getExports.js                 |      100 |      100 |      100 |      100 |                |
importType.js                 |      100 |      100 |      100 |      100 |                |
parse.js                      |    92.31 |       50 |      100 |      100 |                |
resolve.js                    |    72.92 |       50 |    76.19 |    73.91 |... 83,87,88,89 |
tests/src/rules                |      100 |      100 |      100 |      100 |                |
default.js                    |      100 |      100 |      100 |      100 |                |
export.js                     |      100 |      100 |      100 |      100 |                |
extensions.js                 |      100 |      100 |      100 |      100 |                |
imports-first.js              |      100 |      100 |      100 |      100 |                |
named.js                      |      100 |      100 |      100 |      100 |                |
namespace.js                  |      100 |      100 |      100 |      100 |                |
newline-after-import.js       |      100 |      100 |      100 |      100 |                |
no-amd.js                     |      100 |      100 |      100 |      100 |                |
no-commonjs.js                |      100 |      100 |      100 |      100 |                |
no-deprecated.js              |      100 |      100 |      100 |      100 |                |
no-duplicates.js              |      100 |      100 |      100 |      100 |                |
no-extraneous-dependencies.js |      100 |      100 |      100 |      100 |                |
no-mutable-exports.js         |      100 |      100 |      100 |      100 |                |
no-named-as-default-member.js |      100 |      100 |      100 |      100 |                |
no-named-as-default.js        |      100 |      100 |      100 |      100 |                |
no-namespace.js               |      100 |      100 |      100 |      100 |                |
no-nodejs-modules.js          |      100 |      100 |      100 |      100 |                |
no-restricted-paths.js        |      100 |      100 |      100 |      100 |                |
no-unresolved.js              |      100 |      100 |      100 |      100 |                |
order.js                      |      100 |      100 |      100 |      100 |                |
prefer-default-export.js      |      100 |      100 |      100 |      100 |                |
--------------------------------|----------|----------|----------|----------|----------------|

eslint-plugin-import@1.12.0 posttest /var/lib/jenkins/workspace/Regression Build/eslint-plugin-import
eslint ./src

Cannot read property 'isPropertyDefined' of null
TypeError: Cannot read property 'isPropertyDefined' of null
at EventEmitter.Property (/var/lib/jenkins/workspace/Regression Build/eslint-plugin-import/node_modules/eslint/lib/rules/no-dupe-keys.js:116:25)
at emitOne (events.js:77:13)
at EventEmitter.emit (events.js:169:7)
at NodeEventGenerator.enterNode (/var/lib/jenkins/workspace/Regression Build/eslint-plugin-import/node_modules/eslint/lib/util/node-event-generator.js:40:22)
at CodePathAnalyzer.enterNode (/var/lib/jenkins/workspace/Regression Build/eslint-plugin-import/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:608:23)
at CommentEventGenerator.enterNode (/var/lib/jenkins/workspace/Regression Build/eslint-plugin-import/node_modules/eslint/lib/util/comment-event-generator.js:97:23)
at Controller.traverser.traverse.enter (/var/lib/jenkins/workspace/Regression Build/eslint-plugin-import/node_modules/eslint/lib/eslint.js:895:36)
at Controller.__execute (/var/lib/jenkins/workspace/Regression Build/eslint-plugin-import/node_modules/eslint/node_modules/estraverse/estraverse.js:397:31)
at Controller.traverse (/var/lib/jenkins/workspace/Regression Build/eslint-plugin-import/node_modules/eslint/node_modules/estraverse/estraverse.js:501:28)
at Controller.Traverser.controller.traverse (/var/lib/jenkins/workspace/Regression Build/eslint-plugin-import/node_modules/eslint/lib/util/traverser.js:36:33)
npm ERR! Linux 3.16.0-4-amd64
npm ERR! argv "/usr/bin/nodejs" "/usr/bin/npm" "run" "test"
npm ERR! node v4.4.7
npm ERR! npm  v2.15.8
npm ERR! code ELIFECYCLE
npm ERR! eslint-plugin-import@1.12.0 posttest: eslint ./src
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the eslint-plugin-import@1.12.0 posttest script 'eslint ./src'.
npm ERR! This is most likely a problem with the eslint-plugin-import package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     eslint ./src
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs eslint-plugin-import
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!
npm ERR!     npm owner ls eslint-plugin-import
npm ERR! There is likely additional logging output above.

@mysticatea Could you take a quick look please?2I
(055742c68c51b6bc3a56981759dda81a9c4c60d72016-08-12T19:24:10Z1937871:3
2016-08-12T12:41:16ZWow, thanks for good catch!Ì∏™>2017-01-25T01:12:22Z"2017-02-03T22:36:41Z*ÔTell us about your environment

ESLint Version: master
Node Version: 7.4.0
npm Version: 4.0.5

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

rules:
  no-extra-parens: error
parserOptions:
  ecmaVersion: 2016
What did you do? Please include the actual source code causing the issue.

(new Foo)();

-(foo ** bar);

(-foo) ** bar;
What did you expect to happen?
I expected no errors to be reported, because removing parentheses from each of those cases results in a change in behavior or a syntax error.
What actually happened? Please include the actual, raw output from ESLint.
3 errors were reported:
<text>
  1:1  error  Gratuitous parentheses around expression  no-extra-parens
  3:2  error  Gratuitous parentheses around expression  no-extra-parens
  5:1  error  Gratuitous parentheses around expression  no-extra-parens2G
(f2a358098137c07f8d96e8cca956a7e38db84aef2017-02-03T22:36:37Z72561£z˚!2015-11-06T04:33:05Z"2015-11-17T18:04:54Z*ΩThe version of ESLint you are using
1.8.0


What you did (the source code and ESLint configuration)
myObj.env = true;
with the following configuration:
  "id-length": [2, {
      "min": 4,
      "properties": "never",
  }],


The actual ESLint output complete with numbers
error Identifier name 'env' is too short. (< 4) id-length


What you expected to happen instead
No error. Since "properties" is set to "never", this error should not occur.2I
(6d59e0ebeb74c7cb52f0e62ebe4b17a67436bf652015-11-15T03:44:05Z1937871:Ó
2015-11-06T04:33:06Z’Thanks for the issue! If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead

Requesting a new rule? Please see Proposing a New Rule for instructions.:F
2015-11-06T06:10:55Z.Reproducible in online demo. Looks like a bug.:,
2015-11-15T02:34:13ZI'm working on this.ÜOÄO2018-03-21T10:22:36Z"2018-03-22T01:20:12Z*∆Hi all, since few times, I have an issue with linting in a regex. It seems that variables are not allowed for flags.
Tell us about your environment

ESLint Version: ?
Node Version: v6.11.3
npm Version: 3.10.10

What parser (default, Babel-ESLint, etc.) are you using? Babel-ESLint
Please show your full configuration:

Configuration

---
extends:
  - eslint:recommended
  - plugin:lodash/canonical
  - angular
plugins:
  - angular
  - lodash
  - compat
env:
  browser: true
  jasmine: true
# maybe one day
# parserOptions:
#   ecmaVersion: 6
rules:
  array-bracket-spacing:
    - 1
    - never
  arrow-body-style:
    - 1
    - 'as-needed'
  arrow-spacing:
    - 2
  semi:
    - 1
    - 'always'
  semi-spacing:
    - 1
  no-extra-parens:
    - 1
    - all
    - nestedBinaryExpressions: false
  quote-props:
    - 1
    - as-needed
  quotes:
    - 1
    - single
  no-whitespace-before-property:
    - 2
  object-curly-spacing:
    - 1
    - always
  key-spacing:
    - 1
  comma-dangle:
    - 2
    - 'only-multiline'
  angular/controller-name:
    - 2
    - /[A-Z].*Ctrl$/
  angular/controller-as-vm:
    - 2
    - 'ctrl'
  angular/no-http-callback:
    - 2
  angular/di-unused:
    - 1
  angular/no-service-method:
    - off
  lodash/chaining:
    - 1
    - 'always'
    - 3
  lodash/matches-shorthand:
    - 1
    - 'always'
    - 1
  lodash/matches-prop-shorthand:
    - 0
  lodash/prefer-constant:
    - off
  lodash/prefer-lodash-method:
    - 1
    - ignoreObjects:
      - 'angular.module'
      - 'elem.css'
      - 'cloneElement'
      - 'elem'
      - 'clone'
  lodash/identity-shorthand:
    - 1
  lodash/prefer-map:
    - 1
  lodash/prefer-some:
    - 1
  lodash/prefer-lodash-chain:
    - off
  lodash/prefer-reject:
    - 1
  lodash/chain-style:
    - off
  lodash/prefer-filter:
    - 1
  lodash/prefer-includes:
    - 1
  lodash/preferred-alias:
    - 1
  lodash/no-double-unwrap:
    - 1
  lodash/prefer-get:
    - 1
  lodash/no-extra-args:
    - 2
  lodash/collection-method-value:
    - 1
  lodash/unwrap:
    - 1
  lodash/prefer-is-nil:
    - 1
  lodash/prefer-noop:
    - 0
  compat/compat:
    - 1
globals:
  angular: true,
  module: true,
  inject: true,
  _: true,
  moment: true,
  require: true,
  jstz: true,
  $: true,
  protractor : true,
  browser: true,
  $$: true,
  element: true,
  by: true,
  Uint16Array: true

What did you do? Please include the actual source code causing the issue, as well as the command that you used to run ESLint.

var flags = 'ig';
var regex = new RegExp('([\\w_-]+)\\s*', flags);

gulp serve
What did you expect to happen?
No error on flags.
What actually happened? Please include the actual, raw output from ESLint.
error  Invalid flags supplied to RegExp constructor 'null'  no-invalid-regexp2J
(3ff5d11fe2ed601d4e0226bde50c06fe7c7f16ac2018-03-22T01:20:00Z13050025:>
2018-03-21T16:38:20Z&Thanks for the report! I can repro it.ö˝∞=2017-01-05T02:27:20Z"2017-01-05T17:02:18Z*ÛWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (see #7855)



What changes did you make? (Give an overview)
This updates no-useless-return to avoid circular backtracking through unreachable loops.
This is similar to #7583, but it's a different issue. (There are two places in no-useless-return where unreachable segments are traversed, and the fix for #7583 only addressed one of the places.)
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(ca1f8410fcb40a9bce286e22e23ee695159d15f72017-01-05T17:02:17Z11638619:¿
2017-01-05T02:27:20Zß@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea and @alangpierce to be potential reviewers.:
2017-01-05T02:27:21ZLGTM:C
2017-01-05T17:02:02Z+That was fast, as usual @not-an-aardvark <3öµE2017-07-14T04:48:14Z"2017-07-21T16:22:25Z*°What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:



What changes did you make? (Give an overview)
Avoid fixing objects containing comments proposed by @not-an-aardvark in PR #84872I
(96df8c9a76a60bdc134c44aa6939a1d75f5795042017-07-21T16:22:24Z2801321:
2017-07-14T04:48:16ZLGTM:…
2017-07-14T04:48:17Z∞@schempy, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @not-an-aardvark and @kaicataldo to be potential reviewers.:
2017-07-18T01:56:03ZLGTM:
2017-07-18T01:58:45ZLGTM:
2017-07-18T01:59:22ZLGTM:‚
2017-07-18T02:33:05Z…By the way, is it intentional that no fix is performed even when the comment is between properties? For example, no fix will be performed for this object:
/* eslint object-curly-newline: [error, always] */

({ foo: 1,
  bar: 2,
  // comment
  baz: 3
});
But it seems like such a fix would clearly be safe. Maybe it would be better to explicitly check between the { and the first token in the object, rather than checking for comments anywhere in the object.:
2017-07-19T04:28:01ZLGTM:
2017-07-19T05:03:10ZLGTM:á
2017-07-19T05:11:55ZÓ@not-an-aardvark I made updates to check between the  { and the first token in the object for comments. Updated tests as well.  Do you think I should update the commit message since this is not avoiding fixing objects containing comments?:È
2017-07-19T22:42:11Z–Do you think I should update the commit message since this is not avoiding fixing objects containing comments?

Sure, feel free. It might be good to mention object-curly-spacing in the commit message as well.:
2017-07-20T05:54:59ZLGTM:
2017-07-20T21:40:48ZLGTM:`
2017-07-20T21:44:16ZHThanks for the feedback! Code updates and commit message have been made.Â©>2017-01-25T01:01:14Z"2017-02-09T23:03:29Z*¸Tell us about your environment

ESLint Version: master
Node Version: 7.4.0
npm Version: 4.0.5

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

rules:
  no-extra-boolean-cast: error
parserOptions:
  ecmaVersion: 2015
What did you do? Please include the actual source code causing the issue.
I ran eslint theFile.js --fix on three different files:
// Case 1
!Boolean(...foo);
// Case 2
!Boolean(foo, bar());
// Case 3
!Boolean();
What did you expect to happen?
I expected the syntax of the files to be valid after autofixing
What actually happened? Please include the actual, raw output from ESLint.
In the first two files, the code was autofixed to
// Case 1
!...foo;
// Case 2
!foo;
An error was thrown when running the command on the third file:
TypeError: Cannot read property 'type' of undefined
    at Object.getPrecedence (/path/to/eslint/lib/ast-utils.js:620:21)
    at Object.fix (/path/to/eslint/lib/rules/no-extra-boolean-cast.js:103:42)
    at RuleContext.report (/path/to/eslint/lib/rule-context.js:127:34)
    at EventEmitter.CallExpression (/path/to/eslint/lib/rules/no-extra-boolean-cast.js:97:29)
    at emitOne (events.js:96:13)
    at EventEmitter.emit (events.js:188:7)
    at NodeEventGenerator.enterNode (/path/to/eslint/lib/util/node-event-generator.js:39:22)
    at CodePathAnalyzer.enterNode (/path/to/eslint/lib/code-path-analysis/code-path-analyzer.js:607:23)
    at CommentEventGenerator.enterNode (/path/to/eslint/lib/util/comment-event-generator.js:98:23)
    at Controller.enter (/path/to/eslint/lib/eslint.js:928:36)


The first autofixed line is a syntax error, and the second autofixed line changes the behavior of the code (it no longer calls bar()).
To fix this, I think we need to avoid doing an autofix for no-extra-boolean-cast in the following cases:

Boolean is called with more than one argument
Boolean is called with a spread element as the first argument
Boolean is called with no arguments. (Alternatively, we could just fix !Boolean() to true.)2H
(16248e2aff3d0a706c955f1fa811a2aefba696972017-02-09T23:03:24Z567607:†
2017-01-25T01:02:51ZáWhy would anyone call Boolean with more than one argument?
Boolean() should be equivalent to Boolean(undefined), in other words, false.:≈
2017-01-25T01:04:39Z¨Why would anyone call Boolean with more than one argument?

¬Ø\_(„ÉÑ)_/¬Ø

Boolean() should be equivalent to Boolean(undefined), in other words, false.

Yes, but the rule only activates when the expression is negated to !Boolean() (since the Boolean call is then a useless cast), which would be true.Ãj¡;2016-11-17T03:06:25Z"2016-11-19T03:47:10Z*ÂWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
See #7610


What changes did you make? (Give an overview)
This updates quotes to avoid fixing template literals that are in directive position, so that the fixer doesn't accidentally enable strict mode.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(5c9a4add1ecbc9c9ea70a3bb68f974167f8b64f52016-11-19T03:47:10Z11638619:∆
2016-11-17T03:06:26Z≠@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @nzakas, @vitorbal and @mysticatea to be potential reviewers.:
2016-11-17T03:06:26ZLGTM£OÅO2018-03-21T17:36:53Z"2018-03-22T01:20:01Z*£What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (template)



What changes did you make? (Give an overview)
flags was Initialized to "", but sometimes it could be null -- this might cause confusing.
Is there anything you'd like reviewers to focus on?
no. üòÉ2J
(3ff5d11fe2ed601d4e0226bde50c06fe7c7f16ac2018-03-22T01:20:00Z13050025ıÌø=2017-01-06T03:26:57Z"2017-01-13T01:20:38Z*ØWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (see #7608)
What changes did you make? (Give an overview)
This updates brace-style to validate ClassBody nodes.
Is there anything you'd like reviewers to focus on?
This builds on the changes in #7870. This PR should not be merged until #7870 is merged.
In the meantime, see the second commit of this PR for the changes that are relevant to this issue.2J
(bd5e2199a33f2530461df4d19f032a0a77c181362017-01-13T01:20:37Z11638619:…
2017-01-06T03:26:57Z∞@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @gyandeeps and @mysticatea to be potential reviewers.:
2017-01-06T03:26:58ZLGTM:
2017-01-10T06:09:36ZLGTM:;
2017-01-11T17:32:53Z#@platinumazure Yes, that's correct.µû∆<2016-12-12T10:27:23Z"2016-12-14T20:12:29Z*‚What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
What changes did you make? (Give an overview)
This updates indent to apply array/object offsets even when they don't have a VariableDeclarator parent.
Is there anything you'd like reviewers to focus on?
This builds off of #7734, so it should not be merged until that PR is merged. Since this bug is not a regression, it might be better to do a patch release with only #7734 rather than rushing this PR.2J
(dec3ec6a1d1ded6f931a0b9e31c324e3fea505502016-12-14T20:12:29Z11638619:
2016-12-12T10:27:25ZLGTM:¬
2016-12-12T10:27:26Z©@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @gyandeeps and @BYK to be potential reviewers.:»
2016-12-12T16:08:50ZØ@not-an-aardvark I was going to label this but I'm not sure what to label it as since this is a "maybe patch candidate". When you get a chance, could you please label this PR?:õ
2016-12-12T18:42:07ZÇLabeled, sorry about that. To clarify, this is a patch candidate, but I don't think we should include it in today's patch release.:«
2016-12-12T19:05:16ZÆ@not-an-aardvark Should we add "do not merge" in that case, to avoid accidental merge before today's patch release? (This isn't really covered in our maintainer guidelines, but I think "patch candidate" + "do not merge" will help flag that it should go in a patch release, just not this patch release.):
2016-12-13T20:36:17ZLGTM:
2016-12-14T20:02:56ZLGTMíŒëD2017-06-13T06:47:23Z"2017-06-15T03:19:36Z*û	Tell us about your environment

ESLint Version: 4.0.0
Node Version: 8.1.0
npm Version: 5.0.3

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:

rules:
  indent: [2, 2, {ArrayExpression: first,
                  CallExpression: {arguments: first},
                  FunctionDeclaration: {parameters: first},
                  FunctionExpression: {parameters: first},
                  MemberExpression: off,
                  ObjectExpression: first,
                  SwitchCase: 1}]

What did you do? Please include the actual source code causing the issue.

var foo = bar(function() {
  doSomething();
}).baz(function() {
  doSomethingElse();
});
What did you expect to happen? No errors.
What actually happened? Please include the actual, raw output from ESLint.
$ eslint foo.js

/Users/trott/test/foo.js
  4:1  error  Expected indentation of 4 spaces but found 2  indent
  5:1  error  Expected indentation of 2 spaces but found 0  indent

‚úñ 2 problems (2 errors, 0 warnings)
  2 errors, 0 warnings potentially fixable with the `--fix` option.

$
I'm not sure if this has the same root cause as #8717 or if it is distinct...2J
(ab8b0167bdaf3b8851eab3fbc2769f2bdd71677b2017-06-15T03:19:30Z11638619:q
2017-06-13T07:14:23ZYThanks, I can reproduce this. It seems to be a bug with the MemberExpression: off option.ˆåÉF2017-07-19T01:23:47Z"2017-07-24T18:58:33Z*ıTell us about your environment

ESLint Version: 4.2.0
Node Version: 8.1.4
npm Version: 5.0.3

What parser (default, Babel-ESLint, etc.) are you using?
N/A
Please show your full configuration:
(see below)
What did you do? Please include the actual source code causing the issue.
My config file looks like this:
# .eslintrc.yml
extends:
  - ./foo.yml
  - ./bar.yml
foo.yml looks like this:
# foo.yml
env: {}
bar.yml, an invalid config file, looks like this:
# bar.yml
invalidProperty: 5
I have an index.js file that looks like this:

a;
I tried to lint index.js: node_modules/.bin/eslint index.js
What did you expect to happen?
I expected to get an error about the invalid config file, and I expected the error message to mention that the invalid config file is bar.yml.
What actually happened? Please include the actual, raw output from ESLint.
A config validation error was thrown, and the following output was produced:
[object Object]:
	ESLint configuration is invalid:
	- Unexpected top-level property "invalidProperty".

Referenced from: /path/to/.eslintrc.yml
Error: [object Object]:
	ESLint configuration is invalid:
	- Unexpected top-level property "invalidProperty".

Referenced from: /path/to/.eslintrc.yml
    at validateConfigSchema (/path/to/node_modules/eslint/lib/config/config-validator.js:192:15)
    at Object.validate (/path/to/node_modules/eslint/lib/config/config-validator.js:205:5)
    at loadFromDisk (/path/to/node_modules/eslint/lib/config/config-file.js:549:19)
    at load (/path/to/node_modules/eslint/lib/config/config-file.js:592:20)
    at configExtends.reduceRight (/path/to/node_modules/eslint/lib/config/config-file.js:421:36)
    at Array.reduceRight (native)
    at applyExtends (/path/to/node_modules/eslint/lib/config/config-file.js:405:28)
    at loadFromDisk (/path/to/node_modules/eslint/lib/config/config-file.js:556:22)
    at Object.load (/path/to/node_modules/eslint/lib/config/config-file.js:592:20)
    at Config.getLocalConfigHierarchy (/path/to/node_modules/eslint/lib/config.js:228:44)


The message does not mention bar.yml (although did does mention that the invalid config was referenced from .eslintrc.yml). This is probably because we used to assume that all config-loading errors were related to not being able to find the file, so it didn't make sense to repeat the filename before.
Also, the error message is printed twice. That part is probably a separate issue.2J
(d2f8f9fbd5f5be7e4f4514b0a4d89c685e58389e2017-07-24T18:58:26Z11638619œìπ>2017-01-28T11:15:40Z"2017-02-03T22:30:51Z*πWhat is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix (template)
Tell us about your environment

ESLint Version: 3.14.1
Node Version: 6.9.4
npm Version: 3.8.8

What parser (default, Babel-ESLint, etc.) are you using?

default

Please show your full configuration:

nothing

What did you do? Please include the actual source code causing the issue.
for (var i = 0; i < 10; ++i) {
    foo(i)
}
$ eslint test.js --env es6 --rule no-var:error --fix --no-eslintrc --no-ignore
What did you expect to happen?
The var declaration is fixed then no errors.
What actually happened? Please include the actual, raw output from ESLint.
path/to/test.js
  1:6  error  Unexpected var, use let or const instead  no-var

‚úñ 1 problem (1 error, 0 warnings)

What changes did you make? (Give an overview)
I changed no-var rule to fix var declarations at ForStatement.init.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2I
(d6b6ba1d0322f87819c40108fa174d6b126f8a4f2017-02-03T22:30:50Z1937871:À
2017-01-28T11:15:41Z≤@mysticatea, thanks for your PR! By analyzing the history of the files in this pull request, we identified @alangpierce, @vitorbal and @not-an-aardvark to be potential reviewers.:
2017-01-28T11:15:41ZLGTM:
2017-01-28T11:53:19ZLGTM:±
2017-01-29T04:24:16Zò@not-an-aardvark No. This PR does not change those cases. This is a revision of #7962; it removes ForStatement.init from ignored cases that #7962 added.:Z
2017-01-29T04:32:14ZBOh, I see. LGTM then.
I'll look into those cases in a separate PR.:
2017-01-29T05:03:13ZLGTM:\
2017-01-29T05:28:24ZDI rebased to resolve conflicts and just added tests for those cases.◊û√<2016-12-12T05:15:00Z"2016-12-14T20:12:32Z*ôESLint Version: 3.12.0
Node Version: 7.2.1
npm Version: 3.10.10

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
no configuration






What did you do? Please include the actual source code causing the issue.
Running this:
eslint --no-eslintrc --rule='indent: [2, 2, {CallExpression: {arguments: first}, ArrayExpression: first}]' test.js
on file test.js:

echo = spawn('cmd.exe',
             ['/c', 'echo', 'hello&&', 'echo',
              'node&&', 'echo', 'and&&', 'echo', 'world']);





What did you expect to happen?
No error
What actually happened? Please include the actual, raw output from ESLint.
/Users/trott/test/test.js
  2:14  error  Expected indentation of 2 spaces but found 13  indent

‚úñ 1 problem (1 error, 0 warnings)2J
(dec3ec6a1d1ded6f931a0b9e31c324e3fea505502016-12-14T20:12:29Z11638619:;
2016-12-12T06:15:45Z#Thanks, I can reproduce this issue.ÑÁá"2015-11-08T00:46:37Z"2015-11-11T17:54:44Z*∆Currently (v1.9.0), if the no-multiple-empty-lines rule has a max value of 1, the message reads:

"More than 1 blank lines not allowed."

It's a tiny thing, but it would be nicer if the message singularized "line" when max is 1, like this:

"More than 1 blank line not allowed."

What do you think? I'll be happy to send a PR!2H
(b9d1fc67bee75183765beca713b99cb92aebef432015-11-09T22:40:42Z947523:Ó
2015-11-08T00:46:45Z’Thanks for the issue! If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead

Requesting a new rule? Please see Proposing a New Rule for instructions.:ù
2015-11-08T17:53:12ZÑSure, happy to accept a PR. Please be sure to read our contribution guidelines: http://eslint.org/docs/developer-guide/contributing/:,
2015-11-08T18:30:28ZHere we go: #4357 :)ƒÉáE2017-06-29T22:11:33Z"2017-07-30T04:26:36Z*“Tell us about your environment

ESLint Version: 4.1.1
Node Version: 7.10.0
npm Version: 4.5.0

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:
{
    "rules": {
      "padding-line-between-statements": [
        "warn", { "blankLine": "always", "prev": "block-like", "next": "block-like" }
      ]
    }
};

What did you do? Please include the actual source code causing the issue.
function test() {
};

What did you expect to happen?
No errors should occur.
What actually happened? Please include the actual, raw output from ESLint.
The semicolon after the closing brace causes an error to occur.
Cannot read property 'value' of null
TypeError: Cannot read property 'value' of null
    at Object.isClosingBraceToken (C:\...\node_modules\eslint\lib\ast-utils.js:364:17)
    at isBlockLikeStatement (C:\...\node_modules\eslint\lib\rules\padding-line-between-statements.js:96:36)
    at Object.test (C:\...\node_modules\eslint\lib\rules\padding-line-between-statements.js:331:37)
    at match (C:\...\node_modules\eslint\lib\rules\padding-line-between-statements.js:473:41)
    at getPaddingType (C:\...\node_modules\eslint\lib\rules\padding-line-between-statements.js:489:21)
    at Linter.verify (C:\...\node_modules\eslint\lib\rules\padding-line-between-statements.js:551:30)
    at emitOne (events.js:96:13)
    at Linter.emit (events.js:191:7)
    at NodeEventGenerator.applySelector (C:\...\node_modules\eslint\lib\util\node-event-generator.js:265:26)
    at NodeEventGenerator.applySelectors (C:\...\node_modules\eslint\lib\util\node-event-generator.js:292:22)2H
(cdb82f2de35e1e6e4d7a40e018b257996f1079c42017-07-30T04:26:27Z221166:I
2017-06-29T23:52:46Z1Thanks for reporting, I can reproduce this issue.:•
2017-06-30T05:39:20Zå@not-an-aardvark @kaicataldo The following also produces an error (same call stack as before):
function test() {
  var x = 1;
  return x;
};ã∞ÖE2017-06-29T15:34:45Z"2017-07-05T00:03:06Z*Â‚Ä¶tructuring assignment

What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (template)



What changes did you make? (Give an overview)
fixes #8815
Is there anything you'd like reviewers to focus on?2J
(931a9f17bac0d5cb8071dd7c65cf2ff15746c1632017-07-05T00:03:05Z13050025:±
2017-06-29T15:34:46ZòThanks for the pull request, @Aladdin-ADD! I took a look to make sure it's ready for merging and found some changes are needed:

The commit summary must be 72 characters or shorter. Please check out our guide for how to properly format your commit summary and update it on this pull request.

Can you please update the pull request to address these?
(More information can be found in our pull request guide.): 
2017-06-29T15:34:58Z±@Aladdin-ADD, thanks for your PR! By analyzing the history of the files in this pull request, we identified @not-an-aardvark, @vitorbal and @gyandeeps to be potential reviewers.:±
2017-06-29T15:45:57ZòThanks for the pull request, @Aladdin-ADD! I took a look to make sure it's ready for merging and found some changes are needed:

The commit summary must be 72 characters or shorter. Please check out our guide for how to properly format your commit summary and update it on this pull request.

Can you please update the pull request to address these?
(More information can be found in our pull request guide.):±
2017-06-29T16:54:46ZòThanks for the pull request, @Aladdin-ADD! I took a look to make sure it's ready for merging and found some changes are needed:

The commit summary must be 72 characters or shorter. Please check out our guide for how to properly format your commit summary and update it on this pull request.

Can you please update the pull request to address these?
(More information can be found in our pull request guide.):±
2017-07-01T00:45:25ZòThanks for the pull request, @Aladdin-ADD! I took a look to make sure it's ready for merging and found some changes are needed:

The commit summary must be 72 characters or shorter. Please check out our guide for how to properly format your commit summary and update it on this pull request.

Can you please update the pull request to address these?
(More information can be found in our pull request guide.):ü
2017-07-01T01:22:10ZÜHi @Aladdin-ADD, sorry about the delay in reviewing this. I'm planning to test it out tonight or tomorrow and give some feedback then.:±
2017-07-01T05:37:46ZòThanks for the pull request, @Aladdin-ADD! I took a look to make sure it's ready for merging and found some changes are needed:

The commit summary must be 72 characters or shorter. Please check out our guide for how to properly format your commit summary and update it on this pull request.

Can you please update the pull request to address these?
(More information can be found in our pull request guide.):0
2017-07-05T00:03:12ZThanks for contributing!üÆ’:2016-11-01T17:02:25Z"2016-11-03T20:12:51Z*∂	What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: 3.9.1
Node Version: 6.9.1
npm Version: 3.10.8

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
(none)
What did you do? Please include the actual source code causing the issue.
/* eslint curly: ["error", "multi-line"] */

if (foo) bar()

; [1, 2, 3].map(baz)
What did you expect to happen?
I expected no errors to be reported, because bar() is typically considered to be a single-line statement in this context (even though it has a semicolon on a different line)
What actually happened? Please include the actual, raw output from ESLint.
3:1 - Expected { after 'if' condition. (curly)



What changes did you make? (Give an overview)
The rule had a false positive because the semicolon before [ is considered to be part of the same statement as bar(), so curly identified bar() as a multiline statement. This fixes curly to ignore trailing semicolons when determining whether a statement is multiline.
Originally reported here: standard/standard#664
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(ea0970d184358fa99f2d16730c65b42c84e8c9a12016-11-03T20:12:51Z11638619:
2016-11-01T17:02:26ZLGTM:«
2016-11-01T17:02:27ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @alberto and @vitorbal to be potential reviewers.¯vè2015-03-30T20:57:04Z"2015-04-11T21:04:19Z*∆"indent": [ 2, "tab" ],
"space-in-parens": [2, "always", { "exceptions": ["empty", "{}"] }]
space-in-parens seems to count newlines for required space, but not when followed by tab(s)
// ok
myfn(
    1,
    2
);

// err
if ( true ) {
    myfn(
        1,
        2
    ); // <- here "there must be a space inside this paren"
}2I
(69a79b112a0f749c41cfda143d79c34bf04f67e92015-04-11T20:39:49Z5642190:z
2015-03-30T22:14:04ZbCan you please paste the console output as well? It helps us to see what's actually being flagged.:¥
2015-03-30T22:36:35Zõmyfile.js (indented with tabs, not spaces)
function abc ( a ) {
    console.log( a );
}

abc(
    1
);
if ( true ) {
    abc(
        1
    );
}
$ eslint myfile.js

myfile.js
  11:1  error  There must be a space inside this paren  space-in-parens

‚úñ 1 problem (1 error, 0 warnings)¶síE2017-07-01T03:35:44Z"2017-07-03T08:23:54Z*æWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8832)



What changes did you make? (Give an overview)
Previously, the indent rule handled JSXExpressionContainer nodes by only setting the first token's offset, incorrectly assuming that all the other tokens in the expression would be dependent on the first token. (This had been a problem since JSX support was added to the rule.) As a result of an unrelated, correct fix in b5a70b4, the bug ended up also appearing for BinaryExpressions in JSXExpressionContainers.
This commit updates the JSXExpression logic to offset all of its inner tokens.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(676af9eb156e8c1884c29a788df367d52ef69af52017-07-03T08:23:54Z11638619:
2017-07-01T03:35:45ZLGTM:«
2017-07-01T03:35:56ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @gyandeeps and @valorkin to be potential reviewers.”M =2017-01-07T02:08:50Z"2017-01-09T23:08:15Z*ˇWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (see #7881)
What changes did you make? (Give an overview)
This updates prefer-destructuring to avoid reporting compound assignments such as foo += bar.foo, since these assignments can't be replaced with destructuring assignments.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(3fc4e3f7a5e0d04950490ed8af08dfba0b270ecc2017-01-09T23:08:14Z11638619:≥
2017-01-07T02:08:51Zö@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @alexlafroscia to be a potential reviewer.:
2017-01-07T02:08:51ZLGTM”M…=2017-01-07T01:52:55Z"2017-01-09T23:08:18Z*ÃTell us about your environment

ESLint Version: 3.13.0
Node Version: 7.3.0
npm Version: 4.0.5

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

{ "parserOptions": { "ecmaVersion": 6 } }

What did you do? Please include the actual source code causing the issue.

/* eslint prefer-destructuring: error */

let foo = 0;
foo += bar.foo;
What did you expect to happen?
No error, I guess.
What actually happened? Please include the actual, raw output from ESLint.
  4:1  error  Use object destructuring                  prefer-destructuring2J
(3fc4e3f7a5e0d04950490ed8af08dfba0b270ecc2017-01-09T23:08:14Z11638619:≈
2017-01-07T01:58:43Z¨I can reproduce this, thanks for the report.
It's happening because the rule is treating the line the same as
let foo = bar.foo;
...which could be fixed to
let {foo} = bar;:Ω
2017-01-08T20:20:01Z§This rule should only test variable definitions, not all types of assignments.
For example, this line is also a false positive:
global.window = jsdom().defaultView;:£
2017-01-08T20:52:56Zä@thealjey Actually, that looks like it's working as intended -- you can replace that line with
({ defaultView: global.window } = jsdom());:≈
2017-01-08T21:21:34Z¨@not-an-aardvark Adding parentheses, seriously?
This rule has a big potential to cleanup the code in variable definitions and function arguments.
But instead you're advising to just overcome its shortcomings, to write longer and harder to read code, simply to make a linting rule pass.
Do you really like what you've written, do you think it's an improvement?
Also, I don't think this rule should complain about things like this:
const {param} = something.property;
because:

I might not need a property variable
there already is a destructuring assignment:µ
2017-01-08T21:32:13ZúThere certainly might be room for improvement in the rule's design -- I was just clarifying that the rule is currently working as intended for your example.:é
2017-01-08T21:37:29Zıthis rule is a very good idea, big üëç  to its author
I would never have come up with something like this myself
it's just that as an average ESLint user I got used to everything always being off the charts awesome
you guys are spoiling us üòÉ:ã
2017-01-09T04:08:37Zs@thealjey Feel free to write up a proposal and submit a new issue if you see something you think could be improved.:˝
2017-01-09T21:20:44Z‰@kaicataldo
I personally am not that big on helping people :) Creating and properly writing an issue just seems like too much work, sorry üòä
And my suggestion is already out there, it's pretty simple.
It goes like this:
This rule should completely ignore everything but variable definitions (var, const, let, function arguments, commonjs imports) and ignore things that are already a destructuring assignment.
That's it, at least I cannot think of any other valid use for this rule.:8
2017-01-09T21:29:32Z @thealjey Thanks for your input.™ï‰K2017-12-09T00:45:31Z"2017-12-12T00:00:38Z*ıTell us about your environment

ESLint Version: v4.13.0
Node Version: v8.9.3
npm Version: v5.5.1

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

Configuration

{
    "parserOptions": {
        "ecmaVersion": 8,
        "sourceType": "module",
        "ecmaFeatures": {}
    },
    "rules": {
        "camelcase": 2
    },
    "env": {}
}

What did you do? Please include the actual source code causing the issue, as well as the command that you used to run ESLint.
Contents of test.js:

function shouldAllowUndercoreVars() {
	let { _value } = this;
	return _value;
}
shouldAllowUndercoreVars()
Shell command used:

eslint test.js
This is currently reproducible on the eslint demo site:
https://eslint.org/demo/#eyJ0ZXh0IjoiZnVuY3Rpb24gc2hvdWxkQWxsb3dVbmRlcmNvcmVWYXJzKCkge1xuXHRsZXQgeyBfdmFsdWUgfSA9IHRoaXM7XG5cdHJldHVybiBfdmFsdWU7XG59XG5zaG91bGRBbGxvd1VuZGVyY29yZVZhcnMoKSIsIm9wdGlvbnMiOnsicGFyc2VyT3B0aW9ucyI6eyJlY21hVmVyc2lvbiI6OCwic291cmNlVHlwZSI6Im1vZHVsZSIsImVjbWFGZWF0dXJlcyI6e319LCJydWxlcyI6eyJjYW1lbGNhc2UiOjJ9LCJlbnYiOnt9fX0=
What did you expect to happen?
I would have expected it to allow the variable name based on the camelcase docs docs quoted below:

It ignores leading and trailing underscores and only checks those in the middle of a variable name.

What actually happened? Please include the actual, raw output from ESLint.
/Users/kyle/tmp/test.js
  2:8  error  Identifier '_value' is not in camel case  camelcase

‚úñ 1 problem (1 error, 0 warnings)2H
(d80aa7c87fb35355823576bb96e03f61e36bb9862017-12-12T00:00:28Z284282:å
2017-12-09T01:56:11ZÛAgreed, this seems to only apply to destructuring however.
No lint errors:
const _value = true;
Has lint errors (incorrectly):
const { _value } = obj;
@KylePDavis Does this occur in 4.12.x for you? Wondering if this was a side-effect of #9468.:ª
2017-12-09T02:39:03Z¢Applying "patch candidate" label because the original change intentionally added more warnings, but the change actually added even more warnings than anticipated.:¨
2017-12-09T05:12:22Zì@platinumazure I think you've got this but if you need more info this is a greenkeeper/travis combo showing the fail from 4.12.1 to 4.13.0:
https://travis-ci.org/guyellis/plant/builds/313796790
Your PR LGTM. Is there an easy way for me to test your branch/PR against my repo?:¶
2017-12-09T05:16:42ZçIf you changed your package.json to point at my commit or branch (see NPM
docs for details), you could push that to a branch (presumably something
other than your master branch) and let Travis run against that to see if
all is well. (This assumes you have the ability to push branches to your
GitHub. If not, you could just make the change locally and run your tests
locally as well.)

Hope this helps!
‚Ä¶
On Dec 8, 2017 10:12 PM, "Guy Ellis" ***@***.***> wrote:
 @platinumazure <https://github.com/platinumazure> I think you've got this
 but if you need more info this is a greenkeeper/travis combo showing the
 fail from 4.12.1 to 4.13.0:
 https://travis-ci.org/guyellis/plant/builds/313796790

 Your PR LGTM. Is there an easy way for me to test your branch/PR against
 my repo?

 ‚Äî
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#9700 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AARWekTl2M85b1rHGFMBOMoC-GyUH-Yhks5s-gingaJpZM4Q7yaT>
 .:⁄
2017-12-09T05:19:44Z¡Thanks @platinumazure
I referenced this in package.json:
"eslint": "git@github.com:eslint/eslint.git#camelcase-destructuring-leading-trailing",
And that fixes the linting in my project. Thanks.:„
2017-12-09T05:54:00Z I'm hoping the team agrees that this should justify a patch release; if so, that patch release will probably occur sometime on Monday. Thanks for your patience and thank you also for testing the change!:L
2017-12-11T19:24:27Z4Thanks for the speedy response. The fix works great!—˜Ë92016-10-19T09:49:54Z"2016-10-23T20:23:37Z*ãWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
This PR fixes: #7366 and possibly #7320.



What changes did you make? (Give an overview)
Updated indent.js and tests to ensure support for function bodies inside of MemberExpressions.
Is there anything you'd like reviewers to focus on?2J
(c7105847273c62690dae85de5e98dd012e663de42016-10-23T20:23:37Z10355544:
2016-10-19T09:49:55ZLGTM:Ω
2016-10-19T09:49:56Z§@sstern6, thanks for your PR! By analyzing the history of the files in this pull request, we identified @nzakas, @gyandeeps and @vitorbal to be potential reviewers.:
2016-10-20T01:42:43ZLGTM:J
2016-10-20T01:51:06Z2@platinumazure Back up with your comments resolved:A
2016-10-22T01:27:31Z)@platinumazure want to take another look?:n
2016-10-22T03:56:09ZVIrritating, I could swear I reviewed this already. Sorry folks. LGTM, thanks @sstern6!:r
2016-10-22T04:01:47ZZI will merge.. just want feedback from our other indent experts like @not-an-aardvark @BYK:
2016-10-22T19:53:44ZLGTM:
2016-10-22T19:55:26ZLGTM:
2016-10-22T20:04:10ZLGTM:
2016-10-23T19:46:42ZLGTM:Ω
2016-10-23T19:54:53Z§@platinumazure @not-an-aardvark back up with your feedback to check for ArrowFunctionExpressions, while also supporting a list for stopAt.  Because of this, I needed to create a helper function that allowed me to check if the parent.type === stop At NodeType.
Looking forward to your feedback:
2016-10-23T20:11:58ZLGTMµïÂK2017-12-09T02:37:40Z"2017-12-12T00:00:29Z*∂What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #9700.


What changes did you make? (Give an overview)
The camelcase rule has a subtle requirement that we keep track of both the original property/identifier name, as well as a version of the name with leading and trailing underscores stripped out. During review, we missed that the original property/identifier name was being checked in the new destructuring case.
This pull request should be followed with a chore to ensure that all underscore checks will strip leading/trailing underscores, to make future contributions to this rule easier.
Is there anything you'd like reviewers to focus on?
I've added a few different test cases. Have I missed anything?2H
(d80aa7c87fb35355823576bb96e03f61e36bb9862017-12-12T00:00:28Z284282≈‹L2018-01-07T07:16:11Z"2018-01-10T01:06:17Z*≈What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#9061)



What changes did you make? (Give an overview)
This updates the indent rule to handle multiline template arguments correctly to fix the issue described in #9061.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(133336e04edc59c7441fc0670b0b24dd15ded9b32018-01-10T01:06:16Z11638619€åçF2017-07-21T03:07:27Z"2017-07-24T18:58:27Z*ÄWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8963)



What changes did you make? (Give an overview)
Previously, if an ESLint configuration was invalid, the error message would not contain the filename of the offending config. Instead, the error message contained [object Object], which was probably a bug. This commit updates the error message to clearly indicate which config file contains the error.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(d2f8f9fbd5f5be7e4f4514b0a4d89c685e58389e2017-07-24T18:58:26Z11638619:
2017-07-21T03:07:28ZLGTM:
2017-07-21T03:42:43ZLGTM:
2017-07-21T05:43:03ZLGTMÇ∆Õ=2017-01-07T22:13:41Z"2017-01-09T23:08:04Z*óWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: 3.13.0
Node Version: 7.3.0
npm Version: 3.10.10

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
(none)
What did you do? Please include the actual source code causing the issue.
/* eslint no-extra-label: error */

A: while (true) {
  break A;
  while (true) {
    break A;
  }
}
What did you expect to happen?
I expected an error to be reported on line 2, and the code to be fixed to
/* eslint no-extra-label: error */

A: while (true) {
  break;
  while (true) {
    break A;
  }
}
What actually happened? Please include the actual, raw output from ESLint.
An error was reported on line 2 as expected, but the code was fixed to
/* eslint no-extra-label: error */

while (true) {
  break;
  while (true) {
    break A;
  }
}
...which is a syntax error, because the A label no longer exists even though it's used elsewhere.
What changes did you make? (Give an overview)
This changes the behavior of the no-extra-label autofixer. Previously, the autofixer would behave like this:
A: while (true) {
  break A;
}

// gets fixed to

while (true) {
  break;
}
However, it now behaves like this:
A: while (true) {
  break A;
}

// gets fixed to

A: while (true) {
  break;
}
In other words, it now only fixes the break/continue statement that got reported, but doesn't touch the loop. In my opinion, this is a better fix, because the no-extra-label rule is only concerned about extra break/continue labels, not unused labels on loops. (The no-unused-labels rule can be used to enforce no missing loop labels, and it will be able to do this automatically when/if #7841 is merged.)
Is there anything you'd like reviewers to focus on?
It would be good to verify that this change is a good idea. My only concern is that there was some opposition to adding a fixer for no-unused-labels in #7841, so if that PR stalls or is rejected, people might have more unused labels in their code after autofixing.2J
(f90462efe568d83f3bf66544c06dd0529c80b49c2017-01-09T23:08:03Z11638619:
2017-01-07T22:13:42ZLGTM:…
2017-01-07T22:13:44Z∞@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @mysticatea and @gyandeeps to be potential reviewers.Ú≠◊2015-08-05T19:33:09Z"2015-08-06T18:16:35Z*äI was running ESLint through my project and encountered an issue with the no-invalid-this rule.
ESLint version 1.0.0 and the output:

This is the code I was linting: https://ghostbin.com/paste/jfgjn
Log.apply(this, args); is where the error shows up.
I am using my own ESLint config , it extends off of XO.
The rule causing the issue is 'no-invalid-this': 2 in XO config that I extended off of.2I
(90c1e7c2f6ec5130cb3b1b62815541c5851a1f992015-08-06T14:48:19Z1937871:‹
2015-08-05T19:33:09Z√Thanks for the issue! We get a lot of issues, so this message is automatically posted to each one to help you check that you've included all of the information we need to help you.
Reporting a bug? Please be sure to include:

The version of ESLint you are using (run eslint -v)
The source code that caused the problem
The configuration you're using (for the rule or your entire config file)
The actual ESLint output complete with line numbers

Requesting a new rule? Please be sure to include:

The use case for the rule - what is it trying to prevent or flag?
Whether the rule is trying to prevent an error or is purely stylistic
Why you believe this rule is generic enough to be included

Requesting a feature? Please be sure to include:

The problem you want to solve (don't mention the solution)
Your take on the correct solution to problem

Including this information in your issue helps us to triage it and get you a response as quickly as possible.
Thanks!:h
2015-08-06T06:26:38ZPThank you for the report.
I can reproduce that. I will work on this today (JST).:ú
2015-08-06T06:32:08ZÉFor a first aid: puts the comment after return.:
"use strict";

function foo() {
    return /* @this Log */ function() { this; };
}ôô®2014-01-20T21:38:21Z"2014-01-20T21:39:12Z*rSince max-len listens on the program node, it ends up reporting the wrong line in the output when an error occurs.2G
(8061f35223fd52b4d9398bd0d9a6c2c96025f3652014-01-20T21:39:08Z38546:(
2014-01-20T21:38:27ZWorking on this.ﬂ*¯≥2013-12-03T20:57:59Z"2013-12-06T02:46:38Z*µ	cf #433, #434
Using node v0.10.21 and eslint 0.1.3 on Windows 7
If the parameters supplied as options in a block-comment are not invalid enough to kill the parser (should this be an issue all by itself?):
/*eslint quotes:2 3 */ yields
undefined:1
undefined
^
SyntaxError: Unexpected token u
    at Object.parse (native)
    at \path\to\npm\node_modules\eslint\lib\eslint.js:162:40
    at \path\to\npm\node_modules\eslint\lib\eslint.js:49:9
    at Array.forEach (native)
    at forEachOption (\path\to\npm\node_modules\eslint\lib\eslint.js:39:27)
    at \path\to\npm\node_modules\eslint\lib\eslint.js:161:17
    at Array.forEach (native)
    at modifyRulesFromComments (\path\to\npm\node_modules\eslint\lib\eslint.js:154:18)
    at EventEmitter.module.exports.api.verify (\path\to\npm\node_modules\eslint\lib\eslint.js:247:28)
    at processFile (\path\to\npm\node_modules\eslint\lib\cli.js:115:27)

they disable the rule entirely:
/*eslint quotes:"foo" */

var x ='this should be double-quoted';

yields 1 error: Error - x is defined but never used
whereas:
/*eslint */

var x ='this should be double-quoted';

yields 2 errors: Error - Strings must use doublequote. and Error - x is defined but never used2G
(c77870b90b219ab68da47e5423c9e3c65944abcf2013-12-06T02:46:38Z38546:ì
2013-12-04T03:53:07Z{Apparently, enabling/disabling rules through comments for configurable rules doesn't work at all... Trying to fix that now.:´
2013-12-04T04:02:50ZíI kind of think we need two behaviors:

There must be an array for configurable rules to specify more than just the error level.
If there isn't an array, the value is considered to be the error level.

That way, you can change error level without changing the other options.:¶
2013-12-04T04:39:17Zç@nzakas Point 2, do you mean that if we pass non-array into a rule that is configurable (i.e. takes an array), we should only override an error level? Does the same behavior should apply to local configs? If main config file specifies quotes: [2, 'single'] and local config specifies quotes:1 should they be merged into quotes: [1, 'single']? I've fixed the code already to handle unexpected values as a parameter, but I need to fix it to work with arrays, and that requires some complex tweaks to RegEx that parses comments.:ﬂ
2013-12-04T05:13:25Z∆Yes, that's what I mean. If it's not an array, then it should be an error
level.
For parsing the comments, can you simplify into something like this:
function makeObject(comment) {
// strip of /*eslint and */

var code = "{" + comment + "}",

return (new Function("'use strict'; return " + code))();

}
So you basically end up doing a kind of eval?
On Tue, Dec 3, 2013 at 7:39 PM, Ilya Volodin notifications@github.comwrote:

@nzakas https://github.com/nzakas Point 2, do you mean that if we pass
non-array into a rule that is configurable (i.e. takes an array), we should
only override an error level? I've fixed the code already to handle
unexpected values as a parameter, but I need to fix it to work with arrays,
and that requires some complex tweaks to RegEx that parses comments.
‚Äî
Reply to this email directly or view it on GitHubhttps://github.com//issues/435#issuecomment-29776270
.



Nicholas C. Zakas
@SlickNet
Author, Professional JavaScript for Web Developers
Buy it at Amazon.com:
http://www.amazon.com/Professional-JavaScript-Developers-Nicholas-Zakas/dp/1118026691/ref=sr_1_3:ø
2013-12-04T05:16:05Z¶Ahh.. very nice idea! Didn't think of that myself. Spent last hour beating my head against negative lookarounds in RegEx and getting nowhere... I'll change the code for it tomorrow. I probably will have to separate parsing code for globals from rules enabling/disabling, but that's ok, I think.:º
2013-12-04T05:30:15Z£I just tried your suggested approach. It doesn't work with something like /* eslint: no-alert: 1 */ because it's evaluating - as a minus... Any suggestions? JSON.Parse also doesn't work due to not having quotes around rule names. Should we just require quotes around rule names for comments?:⁄
2013-12-05T02:57:46Z¡I don't want to require quotes around the rules, it's yucky. :) We could do
a simply regex replacement of something like
text.replace(/([a-z0-9-]+):/g, ""$1":");
Then use the function approach?:l
2013-12-05T04:21:27ZT@nzakas: That's a little too naive. It will replace inside strings given as options.:V
2013-12-05T04:54:02Z>Is that true? The colon is unique to the rule name, is it not?:r
2013-12-05T05:51:20ZZPull requested. I can't say that I like the code to do this... But I think it should work.:S
2013-12-05T06:19:35Z;@nzakas: some-rule-name: [1, "configuration: with a colon"]:D
2013-12-05T18:00:20Z,We don't have configurations with colons. :):ª
2013-12-05T18:25:42Z¢Not yet. Also, eslint allows users to define their own rules, and we can't assume that they will not parameterise their custom rules by strings containing colons.:x
2013-12-05T20:05:44Z`We can fix that by conventions easily. "Don't do it" :)
moot point now, Ilya already fixed this.:±
2013-12-06T00:21:01Zò@michaelficarra I agree that this is not the best way to do this, but I couldn't find better approach outside of coding a full tokenizer for comments...:ª
2013-12-06T01:41:46Z¢Let's not worry too much more about this right now. I'm happy with the
progress, and I fully expect people to mostly use .eslintrc files to
specify their options.ãœ2015-08-05T04:09:36Z"2015-08-24T22:48:01Z*ÁPreviously we had code similar to this dummy code below and it looks and linted fine in eslint@0.24.x. Since moving to eslint@1 (awesome work, btw!) it seems like we're getting a few rogue errors like:

"Expected indentation of 4 characters but found 6"


dummy.js
/*eslint-env node */

var p = {};

var obj = {
  foo: function () {
    return new p()
      .then(function (ok) {
        return ok;
      }, function () {
        // ignore things
      });
  }
};
console.log(obj);
.eslintrc
{
  "extends": "eslint:recommended",
  "rules": {
    "handle-callback-err": 0,
    "no-console": 0,
    "strict": [2, "never"],
    "indent": [2, 2]
  }
}
Output:
‚ûú  fxa-esl1 git:(devdeps44) ‚úó npm run lint

> fxa-content-server@0.43.0 lint /Users/pdehaan/dev/tmp/del/fxa-esl1
> eslint dummy.js


dummy.js
  12:8  error  Expected indentation of 4 characters but found 6  indent

‚úñ 1 problem (1 error, 0 warnings)

Workaround:
If I'm understanding this correctly, this seems to be because my "ignore things" function is an empty block and doesn't have any statements. If I change that to return; then the eslint dummy.js succeeds.2H
(020a94e32a87ae46e62cec7992efd6e2aa4836782015-08-24T14:26:11Z126780:G
2015-08-05T16:21:33Z/Multiline is a known issue.
Kinda related #1801:[
2015-08-05T17:28:01ZC@gyandeeps so is this a new bug? Or is it covered by another issue?›∆ÖF2017-07-19T03:25:36Z"2017-07-21T03:45:42Z*†What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8964)



What changes did you make? (Give an overview)
This updates the uncaught exception handler to avoid printing the error message twice. The error message is included in the stack, so it's not necessary to print the error message and the stack separately.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(a5fd1011bd4bd9ea119d70c1d980816f96672f972017-07-21T03:45:41Z11638619:
2017-07-19T03:25:37ZLGTM:
2017-07-19T03:40:07ZLGTMπ∏ø>2017-01-30T00:26:22Z"2017-02-03T22:36:38Z*ïWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:



What changes did you make? (Give an overview)
Fix bug #7978
Is there anything you'd like reviewers to focus on?
No.2G
(f2a358098137c07f8d96e8cca956a7e38db84aef2017-02-03T22:36:37Z72561:«
2017-01-30T00:26:23ZÆ@alberto, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @not-an-aardvark and @kaicataldo to be potential reviewers.:
2017-01-30T00:26:23ZLGTM:
2017-01-30T01:52:51ZLGTM:b
2017-01-30T01:54:02ZJGood catch @not-an-aardvark, thanks!
Let me know if you think it's ok now.:
2017-01-30T03:46:45ZLGTM:
2017-01-30T03:52:31ZLGTM†ŒîD2017-06-13T09:22:52Z"2017-06-15T03:19:31Z*ÅWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8721)



What changes did you make? (Give an overview)
This fixes a bug where token dependencies were configured incorrectly when the "off" MemberExpression option was set, resulting in incorrect behavior for chained expressions.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(ab8b0167bdaf3b8851eab3fbc2769f2bdd71677b2017-06-15T03:19:30Z11638619:
2017-06-13T09:22:52ZLGTM±‘⁄L2018-01-07T06:21:13Z"2018-01-10T01:05:40Z*∞What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#9729)



What changes did you make? (Give an overview)
This updates the indent rule to fix an issue where comments would interfere with token logic.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(add1e703a52b86662386f9b9b177b0fc86a33acc2018-01-10T01:05:39Z11638619Ω"∫ôD2017-06-14T02:56:05Z"2017-06-20T07:31:57Z*€Tell us about your environment

ESLint Version: 4.0.0
Node Version: 6.9.1
npm Version: 3.10.8

What parser (default, Babel-ESLint, etc.) are you using?
deafault
Please show your full configuration:
var path = require('path')

// Warnings are errors in production.
var OFF = 'off';
var ERROR = 'error';
var WARNING = isTruthy(process.env.CI) ? ERROR : 'warn';

function isTruthy(value) {
  if (!value) return false;
  return ['1', 'true'].indexOf(value.toLowerCase()) >= 0;
}

module.exports = {
  "settings": {
    "import/extensions": [
      ".js",
    ],
    "import/ignore": [
      "node_modules",
    ],
    "import/resolver": {
      "webpack": {
        "config": path.join(__dirname, 'config', 'webpack.config.js')
      }
    }
  },
  "parserOptions": {
    "ecmaVersion": 8,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true,
      "experimentalObjectRestSpread": true
    }
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/warnings",
    "plugin:import/errors",
    "plugin:react/recommended"
  ],
  "plugins": ["import", "react"],
  "rules": {
    "comma-dangle": OFF,
    "eqeqeq": [WARNING, "allow-null"],
    "import/imports-first": OFF,
    "jindent": [WARNING, 2, {"SwitchCase": 1}],
    "max-len": [WARNING, 100, 2],
    "no-console": [WARNING, {"allow": ["warn", "error"]}],
    "no-debugger": WARNING,
    "no-fallthrough": WARNING,
    "no-unreachable": WARNING,
    "no-unused-vars": [WARNING, {"vars": "all", "args": "none"}],
    "no-var": ERROR,
    "prefer-const": WARNING,
    "react/prop-types": [WARNING, {"ignore": ["className"]}],
    "semi": [WARNING, "never"],
    "no-warning-comments": [WARNING, {"location": "anywhere"}],
    "react/no-deprecated": OFF,
    "react/no-unescaped-entities": OFF,
  },
  "env": {
    "commonjs": true
  },
  "globals": {
    "alert": false,
    "ArrayBuffer": false,
    "Audio": false,
    "clearInterval": false,
    "clearTimeout": false,
    "confirm": false,
    "console": false,
    "document": false,
    "File": false,
    "FileReader": false,
    "FormData": false,
    "Image": false,
    "process": false,
    "Promise": false,
    "setInterval": false,
    "setTimeout": false,
    "Uint8Array": false,
    "window": false
  }
}
What did you do? Please include the actual source code causing the issue.

  const {
    a
  } = {
    a: 1
  }

  const [
    b
  ] = [
    2
  ]
What did you expect to happen?
No complaint from ESLint, equivalent to:
const c = [
  3
]
What actually happened? Please include the actual, raw output from ESLint.
 ESLintError:
 /Users/rhys/[some path]
   53:5  warning  'a' is assigned a value but never used        no-unused-vars
   55:1  warning  Expected indentation of 6 spaces but found 4  indent
   56:1  warning  Expected indentation of 4 spaces but found 2  indent
   59:5  warning  'b' is assigned a value but never used        no-unused-vars
   61:1  warning  Expected indentation of 6 spaces but found 4  indent
   62:1  warning  Expected indentation of 4 spaces but found 2  indent2I
(98512881f1fc2417011247931fa089d987ee8cc62017-06-20T07:31:49Z3211873:6
2017-06-14T19:51:40ZCould I take a look into this?:ñ
2017-06-14T20:10:17Z˝@VictorHom Yes, issue is accepted so please go ahead. Just post back if you're no longer able to work on the issue so someone else can pick it up (if something comes up). Stop by our Gitter chat if you need help or want to chat. Thanks for volunteering!:L
2017-06-16T14:20:48Z4Could I take a look into this?

Any updates on this?:¶
2017-06-17T19:49:36ZçHey @gajus sorry for the drop. I was learning through rule and it took longer than anticipated. I have a WIP pr and will wait for a review :):ä
2017-07-13T01:48:27ZÒ@VictorHom this is still happening when using Flow:
// @flow
function test(
  hello: number,
  {
    world,
  }: { world: number }
) {
  return Math.min(hello, world);
}
Gives error:
"Expected indentation of 4 spaces but found 2."  on line 6:ä
2017-07-13T02:53:40ZÒ@idris can you please create a new issue? I'm not sure your problem is the same as the one from this issue.
Also, keep in mind that we don't officially support flow, so it's not guaranteed that all the core rules will work well with it. (That said, we are trying to make the indent rule work reasonably well in most cases when it encounters syntax it's unfamiliar with)ÑNüC2017-05-16T03:20:39Z"2017-05-19T19:35:53Z*ΩTell us about your environment

ESLint Version:
master
Node Version:
4
npm Version:
4

What parser (default, Babel-ESLint, etc.) are you using?
typescript
Please show your full configuration:
module.exports = {
    "env": {
        "es6": true,
        "node": true,
        "mocha": true
    },
    "parser": "typescript-eslint-parser",
    "parserOptions": {
        "sourceType": "module",
        "ecmaFeatures": {
            "jsx": true
        }
    },
    "rules": {
        "indent": [
            "error",
            4,
            {
                MemberExpression: 1,
                SwitchCase: 1,
                FunctionDeclaration: {
                    body: 1,
                    parameters: 1
                },
                FunctionExpression: {
                    body: 1,
                    parameters: 1
                },
                CallExpression: {
                    arguments: 1
                },
                VariableDeclarator: 1
            }
        ]
    }
};


What did you do? Please include the actual source code causing the issue.
// Invalid
const foo = a.b(),
    longName
        = memberFunction(
            'bar'
        );
What did you expect to happen?
Should be a valid indent. If I move the equal operator to the same line as the variable identifier it is consider valid indentation.
// Valid
const foo = a.b(),
    longName =
        memberFunction(
            'bar'
        );
What actually happened? Please include the actual, raw output from ESLint.
Invalid indentation.
/home/reyad/Workspace/eslint-test/test-indent.ts
  4:1  error  Expected indentation of 8 spaces but found 12  indent
  5:1  error  Expected indentation of 4 spaces but found 8   indent2I
(3fc9653adf462e4646d2f25e8f3b7be19b848e392017-05-19T19:35:43Z2373964:î
2017-05-16T03:22:28Z|I'll try and create a fix. This is a test case I forgot about when ignoring the equal operator in variable declarator nodes.:/
2017-05-17T07:31:56ZSeems like a bug to me.È	wŸL2018-01-07T06:14:25Z"2018-01-10T01:05:24Z*éWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#9784)



What changes did you make? (Give an overview)
This fixes the prefer-destructuring bug described in #9784.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(6a5cd32e5a75b23558ad0282e080ffbb6affcad02018-01-10T01:05:24Z11638619:Ì
2018-01-07T06:36:57Z‘Not sure I understand the issue.
One could destructure like ({ [foo] } = bar), right? Or would that assign not to foo but to whatever foo holds? Or will that do an array destructure or something weird?
I'm just trying to figure out if there's ever a use case for allowing prefer-destructuring to enforce for computed properties, that's all.:Ë
2018-01-07T06:47:53ZœI don't think ({ [foo] } = bar) is valid syntax. It would be possible to use ({ [foo]: foo } = bar) here, but I think the rule should only enforce that when the enforceForRenamedProperties option is used. I think the goal of the enforceForRenamedProperties: false behavior is to enforce destructuring when it would be possible to use object shorthand (e.g. ({ foo } = bar) rather than ({ foo: foo } = bar)), which is never possible when using computed properties.ªU’=2017-01-10T13:16:44Z"2017-01-12T18:31:20Z*Û
Tell us about your environment

ESLint Version:
3.13.1
Node Version:
6.9.2
npm Version:
3.10.9

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
{
  "rules": {
    "no-multiple-empty-lines": [2, { "max": 1 }]  
  }
}

What did you do
Linted a large file: app.txt
(I have changed the extension to .txt in order to attach it to this issue. It is obviously a js file and you should change the extension to the original .js).
What did you expect to happen?
Expected ESLint to produce output in a reasonable amount of time.
What actually happened? Please include the actual, raw output from ESLint.
ESLint did not produce any output after 10 minutes while consuming 100% of 1 CPU core.

The file is a file generated by WebPack. I am aware that linting generated files makes no sense and have added the generated files dir to .eslintignore so that performance on large files per se is not a problem for me.
The reason I would like to see some fix (a timeout? if improving the performance is not possible?) is that I was using ESLint from inside an IDE that became unresponsive while waiting for linting to complete. It took me a while to figure out what file and combination of rules was causing the behavior and it would be great if others would not have to spend more time only to figure out that they forgot to exclude their build output folder.2J
(427543afb4bf024869b8a243c793824eca73ad672017-01-12T18:31:15Z11638619:û
2017-01-10T16:09:34ZÖThanks for the report. This is a bit confusing, because we just fixed an issue in 3.13.0 (#7803) where no-multiple-empty-lines would hang on large files. However, it seems like you're using 3.13.1, which would already have gotten that fix.
Just to make sure, could you run eslint -v to double-check that you have 3.13.1 installed? If you have 3.13.1 in your package.json file but haven't run npm install recently, it's possible that the installed version of ESLint doesn't match the version in your package.json file.:™
2017-01-10T16:47:48ZëI've looked at the issue before reporting and specifically checked, and confirmed now that eslint-v returns v3.13.1. There is no eslint installed globally or anywhere else, so I can't think of other things that could be wrong with my install.
Have you tried reproducing it?:x
2017-01-10T17:03:26Z`Not yet, I'm planning to look at it a bit later today. Thanks for confirming the ESLint version.é0≤12016-06-04T20:49:18Z"2016-06-10T18:18:26Z*êWhat version of ESLint are you using? 2.11.1 (from my package.json: ^2.11.1)
What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration: full config piece concerned with:
"max-len": [
  2,
  {
    "code": Infinity,
    "comments": 80,
    "tabWidth": 2
  }
],
What did you do? Please include the actual source code causing the issue. I found the issues when a single line comment was indented but longer than my set comments length
function foo(something) {
  if (!something) throw new Error('something is reqquired');

  // this is a really long commnet this is a really long commnet this is a really long commnet this is a really long commnet
  return somethingDifferent;
}
actual code with issue:
export default class Maitre {
  set port(p) {
    if (this.__port__ !== undefined) throw new Error('Port should not be reassigned.');

    //this is a long comment this is a long comment this is a long comment this is a long comment this is a long commentthis is a long comment this is a long comment this is a long comment this is a long comment this is a long commentthis is a long comment this is a long comment this is a long comment this is a long comment this is a long comment
    this.__port__ = p;
  }
}
What did you expect to happen? max-len to throw an error
What actually happened? Please include the actual, raw output from ESLint. went a long like everything was cool.2I
(2d63370186742a4a43efe13d0a33ec9ae10afb552016-06-10T18:18:24Z7041728:©
2016-06-04T21:22:42ZêThis is actually pretty easy to recreate:
function foo() {
  //this is a long comment this is a long comment this is a long comment this is a long comment this is a long commentthis is a long comment this is a long comment this is a long comment this is a long comment this is a long commentthis is a long comment this is a long comment this is a long comment this is a long comment this is a long comment
}
I could be making a bad assumption here, but this could be as simple as a check in isFullLineComment to trim whitespace?:È
2016-06-05T06:47:53Z–Was able to recreate locally with the latest version of ESLint.
With the provided configuration,
function foo() {
//this is a long comment this is a long comment this is a long comment this is a long comment this is a long commentthis is a long comment this is a long comment this is a long comment this is a long comment this is a long commentthis is a long comment this is a long comment this is a long comment this is a long comment this is a long comment
}
errors, but
function foo() {
  //this is a long comment this is a long comment this is a long comment this is a long comment this is a long commentthis is a long comment this is a long comment this is a long comment this is a long comment this is a long commentthis is a long comment this is a long comment this is a long comment this is a long comment this is a long comment
}
does not.:•
2016-06-05T06:54:46ZåIn looking over it quickly, it looks to me like a bug in isFullLineComment - probably the start.column === 0 check. I can fix this tomorrow.:º
2016-06-05T17:31:41Z£I wasn't sure about the === 0 because of multiline comments, but playing with the parser a bit I saw that multiline's were broken down as well.
Thanks @kaicataldo!í	)§32016-06-30T01:32:09Z"2016-07-03T06:23:10Z*∑What version of ESLint are you using? 2.13.1
What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:
{
  "rules": {
    "max-len": [2, 20, {"ignoreComments": true}]
  }
}
What did you do? Please include the actual source code causing the issue.
// This commented line has the same length as the line below
var foo = 'this line is longer than the maximum line length'
What did you expect to happen?
I expected ESLint to report an error on the second line, since that line is longer than 20 characters.
What actually happened? Please include the actual, raw output from ESLint.
ESLint did not report any errors.
This bug only seems to occur when there is a long commented line somewhere in the file, and there is a non-commented line of exactly the same length later in the file.2J
(25fc7b7d74149c8e8e3843b97690936ac382746a2016-07-03T06:23:10Z11638619:K
2016-06-30T01:49:49Z3Definitely seems like a bug. Thanks for the report!:ã
2016-06-30T04:25:16ZsI think I have a fix for this; I'm reading the docs at the moment to figure out how to test it/make a PR correctly.®ë®D2017-06-16T00:56:35Z"2017-06-18T23:53:15Z*éAs of eslint 4.0 there is no way anymore for a parser to determine what parser options the user supplied, because there are default parserOptions now merged into the user supplied options before they are handed over to the parser.
This breaks the behaviour of babel-eslint, as we were relying on getting the raw parserOptions from the user and if not set applying our own defaults for this options.
With the current defaults in eslint 4.0 there is no way for us to know what the user supplied.
It would be nice to have the possibility to influence the default parserOptions in some standardized way. We are also monkeypatching escope to be able to set our default values, which is really ugly and could probably be removed if the parser creates the default config. There are probably even more cases where eslint does different things based on this options, which are now out of sync with the options babel-eslint uses. (see babel/babel-eslint#458)
Maybe it would be possible that a parser exposes an optional API that sets the default values for the parser options.
export function getDefaultOptions(rawConfig) {
  return {...};
}
Then eslint could consume this if available and merge it with your own default configs.
let parserOptions = Object.assign({}, defaultConfig.parserOptions, parser.getDefaultOptions(config.parserOptions));
Would that be something you would be open to? Or can you think of any other solutions.2J
(7a1bc3893ab55d0ab16ccf4b7a62c85329ab40072017-06-18T23:53:07Z11638619:∑
2017-06-16T01:27:20ZûOops, this seems like a bug. I think this was caused by #8381, which was supposed to just be a refactor and not change the options that get passed to parsers.:Ù
2017-06-16T11:09:16Z€Thanks very much for the quick reply and PR.
But even though this might be a bug, it brought up a general problem that we are currently facing, which is that the parser cannot supply default parserOptions. In the case of babel-eslint we set sourceType to module and ecmaVersion to the latest available by default, but this also means that the rest of eslint - outside of the parser - does not know about our default settings and therefore might produce unpredictable results.:Ã
2017-06-16T11:17:10Z≥I think the parser can communicate the sourceType because there is a sourceType property on the root of the AST. (That said, I'm not sure the rest of eslint actually uses that property -- if it doesn't, it probably should.)
Is there a reason the other parts of eslint would need to know the ecmaVersion? The sourceType affects the semantics of the file, but it seems like the ecmaVersion is just a parser-specific detail in most cases.:ñ
2017-06-16T14:38:03Z˝There are certainly some rules behaving differently when having a different ecmaVersion
https://github.com/eslint/eslint/blob/6a718ba/lib/rules/func-name-matching.js#L40-L51
https://github.com/eslint/eslint/blob/6a718ba/lib/rules/no-redeclare.js#L86-L98π	é∑2015-10-02T23:29:53Z"2015-10-07T17:43:06Z*ò/* eslint no-cond-assign: 2 */
for (var i = 0, item; (item = arr[i]); i++) { }
Even with the no-cond-assign set to the default except-parens rule, this still fails. Intentional?
Output:
  2:1   error  Expected a conditional expression and instead saw an assignment  no-cond-assign2I
(781785ec24deb2826fcd5579f4e75f6b35e945d02015-10-06T21:52:12Z1937871:Ó
2015-10-02T23:29:53Z’Thanks for the issue! If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead

Requesting a new rule? Please see Proposing a New Rule for instructions.:d
2015-10-03T01:53:31ZLCan you provide version of ESLint you are using and your config file please?:I
2015-10-03T08:44:29Z1v1.6.0
No config except for that one inline rule.:À
2015-10-03T17:40:50Z≤Based on the code of the rule, it looks like this is a bug, and rule should allow it. Also error message is pointing to the wrong location (for keyword instead of the test node).:/
2015-10-06T21:41:29ZI will try to fix this.Á	’‚M2018-02-06T08:02:47Z"2018-02-24T00:20:03Z*ìTell us about your environment

ESLint Version: v4.16.0
Node Version: v8.9.1
npm Version: v5.6.0

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

Configuration

{
  "rules": {
    "max-len": [2, { "code": 5", "ignoreStrings": true }],
  },
}

What did you do? Please include the actual source code causing the issue, as well as the command that you used to run ESLint.

<input placeholder="something long" />

eslint foo.js
What did you expect to happen?
No error.
What actually happened? Please include the actual, raw output from ESLint.
1:1  error  Line 1 exceeds the maximum line length of 5  max-len2J
(aea07dc88689ff0d6fea27e4099ce7f1a42ff90a2018-02-24T00:20:03Z16644412:ß
2018-02-14T14:15:30ZéI have the same problem. Right now I'm using an ugly workaround:
        <div
          className={
            'flex-100 layout-row layout-wrap ' +
            'layout-align-space-between-center input_box_full'
          }
        >
          <input type="text" value={editor.city} name="city" onChange={this.handleChange} />
        </div>
As you can see, it's very ugly and distracting/confusing:'
2018-02-17T04:39:57ZWorking on this“ﬂM2018-02-06T05:10:59Z"2018-02-16T22:16:11Z* What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#9882)



What changes did you make? (Give an overview)
This updates the indent rule to avoid setting the offset of the right-hand side of a BinaryExpression to depend on the token after the operator, which was unnecessary and could cause problems when the right-hand side of the expression was ignored.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(0e4ae22d4adebd1cb603ac9cb55daf70c9b921d02018-02-16T22:16:10Z11638619:º
2018-02-06T05:49:34Z£For the test case you've added-- what does indent currently do, and how does your change fix it? Is there an invalid case that could be added based on this change?:î
2018-02-06T05:56:14Z˚The current behavior can be viewed here (for posterity, it reports errors on the last two lines). I don't think there are any invalid cases that would make sense here, since this bug seems to only affect cases where the node is supposed to be ignored.:0
2018-02-16T22:16:17ZThanks for contributing!ü^Â:2016-11-02T19:57:08Z"2016-11-09T19:20:59Z*≠Using ESLint 3.9.1 with  { "keyword-spacing": "error" }
if ("alert"in window) {
    alert("Hi");
}
I would expect the above snipped to trigger an error because of the missing whitespace before in, but this isn't the case. If I'm misunderstanding the rule, please consider clarifying the documentation.2J
(5003b1cf6f37c1a89e8dedf446576ab8925791732016-11-09T19:20:55Z11638619:Í
2016-11-02T20:28:38Z—Thanks for the report; I can confirm that no error is reported there. However, I wonder if this should be handled by space-infix-ops rather than keyword-spacing. (At the moment, neither rule reports an error.):Ü
2016-11-03T05:31:41ZÌThank you for the report.
space-infix-ops should warn it.
keyword-spacing has the test to check confliction: 
  
    
      eslint/tests/lib/rules/keyword-spacing.js
    
    
        Lines 772 to 774
      in
      578c373
    
    
    
    

        
          
           // not conflict with `space-infix-ops` 
        

        
          
           {code: "if (\"foo\"in{foo: 0}) {}"}, 
        

        
          
           {code: "if(\"foo\" in {foo: 0}) {}", options: [NEITHER]},:˘
2016-11-03T09:59:07Z‡Thanks for the replies. space-infix-ops seems fine here, I hadn't thought of that rule.
After a quick test, I think instanceof shows the same behavior, and neither space-infix-ops nor keyword-spacing reports an error when a space is missing before the keyword (like in "foo"instanceof Object). I haven't checked this with unary ops like new, void, etc.¨…ﬁ;2016-11-24T06:48:59Z"2016-11-25T19:09:09Z*´Tell us about your environment

ESLint Version: master
Node Version: 7.2.0
npm Version: 3.10.9

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
(none)
What did you do? Please include the actual source code causing the issue.

/* eslint quotes: [error, "single"] */

var foo = `foo\nbar`;

What did you expect to happen?
ESLint should report an error, and be able to fix the line to:
var foo = 'foo\nbar';
What actually happened? Please include the actual, raw output from ESLint.
No errors were reported.
I'm guessing this is a bug in the logic that detects multiline template literals. The rule does not report lines like this (as expected):
var foo = `foo
bar`; // No error (working as intended)
But it should still report lines that literally contain \n.2J
(faf5f56e87cf02a5feb8f2feabf341bf9454afd92016-11-25T19:09:05Z11638619‘∂öE2017-07-01T19:20:47Z"2017-07-04T19:57:46Z*ÊWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

See #8675.


What changes did you make? (Give an overview)
When --quiet is specified by user, lib/cli.js will pass a fix predicate function to CLIEngine so that only errors are fixed. That way, warnings (which aren't even reported in --quiet mode and about which they might know nothing) are not fixed and users are thus no longer surprised by extra changes being made to ESLint.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2H
(f00854e068b5d453c99139daf216221eb920a9cb2017-07-04T19:57:45Z284282:
2017-07-01T19:20:48ZLGTM:À
2017-07-01T19:20:51Z≤@platinumazure, thanks for your PR! By analyzing the history of the files in this pull request, we identified @jrajav, @not-an-aardvark and @mysticatea to be potential reviewers.:¬
2017-07-02T05:54:51Z©Hmm... Possible improvement might be to expose the fix predicate as CLIEngine.fixErrorsOnlyPredicate or similar so CLIEngine users can easily emulate --quiet on the CLI.:O
2017-07-03T18:00:19Z7Adding "do not merge" so I can make a suggested change.:
2017-07-04T16:19:56ZLGTM:M
2017-07-04T16:20:34Z5@not-an-aardvark Updated per your suggestion, thanks!ıÓ92016-10-19T22:03:27Z"2016-11-05T08:12:48Z*™Tell us about your environment

ESLint Version: 3.8.1

What parser (default, Babel-ESLint, etc.) are you using?
babel-eslint@7.0.0
Please show your full configuration:

{
  'arrow-parens': [1, 'as-needed'],
}

What did you do? Please include the actual source code causing the issue.

 const fn = (foo: FooT) => {}
What did you expect to happen?
No arrow-parens issue.
What actually happened? Please include the actual, raw output from ESLint.
arrow-parens mistakenly is suggesting the removal of the parens around foo - doing so would be a syntax error.2I
(c0f49378f2d43c83065f85d5adff25ac24a9dc822016-11-05T08:12:45Z1937871:I
2016-10-19T22:34:04Z1Thanks for reporting this! I agree this is a bug.æœıN2018-03-19T20:58:43Z"2018-03-21T23:23:46Z*ˆTell us about your environment
Ubuntu 17.10

ESLint Version: 4.19.0
Node Version: 9.6.1
npm Version: 5.7.1

(Also validated on OSX, Node 7.10.0, npm 4.2.0)
What parser (default, Babel-ESLint, etc.) are you using?
Default, I believe(?), with sourceType: module. Full configuration:

Configuration
.eslintrc
{
	"root": true,
	"env": { "es6": true },
	"extends": [
		"eslint:recommended"
	],
	"parserOptions": {
		"sourceType": "module"
	},
	"rules": {
		"object-curly-newline": [ "error", {
			"minProperties": 2,
			"consistent": true
		} ]
	}
}

What did you do? Please include the actual source code causing the issue, as well as the command that you used to run ESLint.
This gist contains a reduced test case with the package.json, .eslintrc and test.js as described here; downloading that gist, running npm install and then npm test replicates the issue on every environment I can access.

test.js
import DefaultExport, { NamedExport } from 'some-module';
import { NamedExportWithoutDefaultImport } from 'some-other-module';

export default {
  DefaultExport,
  NamedExport,
  NamedExportWithoutDefaultImport,
};
package.json
{
  "name": "test-object-curly-newline",
  "scripts": {
    "test": "eslint ./test.js"
  },
  "devDependencies": {
    "eslint": "^4.19.0"
  }
}

npm test # runs `eslint ./test.js`
What did you expect to happen?
I expected no object-curly-newline issue to be reported for either of these imports, as they both have only a single named export within curly brackets:
import DefaultExport, { NamedExport } from 'some-module';
import { NamedExportWithoutDefaultImport } from 'some-other-module';
however the default export on the first line is being counted as an object property, meaning that the rule matches the minProperties and I get errors for each curly bracket on Line 1, but not Line 2
What actually happened? Please include the actual, raw output from ESLint.
$ npm test

> test-object-curly-newline@ test /hm/gh/coding-standards/packages/eslint-config-humanmade/test
> eslint ./test.js


/hm/gh/coding-standards/packages/eslint-config-humanmade/test/test.js
  1:23  error  Expected a line break after this opening brace   object-curly-newline
  1:37  error  Expected a line break before this closing brace  object-curly-newline

‚úñ 2 problems (2 errors, 0 warnings)
  2 errors, 0 warnings potentially fixable with the `--fix` option.

npm ERR! Test failed.  See above for more details.2H
(abc765c1bc6b546db82cb5cd038b66a3aa68b3152018-03-21T23:23:34Z284282:∆
2018-03-19T23:25:36Z≠I've confirmed this in our online demo. Setting minProperties: 3 makes the example pass linting, so the proposed explanation is very likely to be correct.
I'll work on this.·
…ﬂ;2016-11-24T07:33:17Z"2016-11-25T19:09:06Z*€What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
See #7646

What changes did you make? (Give an overview)
This updates the newline detection in quotes. quotes needs to detect whether a raw template literal contains a newline, so that it can determine whether it should suggest that the template literal be fixed to another quote type. However, it previously detected newlines by searching for LF characters in the cooked TemplateElement value. As a result, if the template literally contained \n, it wouldn't get reported.
The previous behavior also had a few other bugs:

It incorrectly reported/fixed template literals that contained other characters recognized as newlines in JS (\r, \u2028, or \u2029), if they didn't contain LF characters.
It failed to report template literals with escaped newlines. These can be replaced with single/double quotes without breaking the code.

Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(faf5f56e87cf02a5feb8f2feabf341bf9454afd92016-11-25T19:09:05Z11638619:∆
2016-11-24T07:33:19Z≠@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @nzakas and @vitorbal to be potential reviewers.:
2016-11-24T07:33:19ZLGTM:
2016-11-24T20:04:02ZLGTMï	œ˜N2018-03-19T23:47:21Z"2018-03-21T23:23:35Z*ñminProperties only tracks ImportSpecifier and ExportSpecifier nodes

What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

See #10101.


What changes did you make? (Give an overview)
The object-curly-newline rule used to count all specifiers under an ImportDeclaration or ExportDeclaration node when determining if there are enough specifiers to require line breaks. However, ImportDefaultSpecifier and ImportNamespaceSpecifier nodes are not actually part of the "object" (i.e., nodes surrounded by curly brace tokens), so they should be ignored by this rule. This change fixes the logic to only check for the count of ImportSpecifier or ExportSpecifier nodes associated with the ImportDeclaration or ExportDeclaration nodes.
Is there anything you'd like reviewers to focus on?
Any other unit tests I should add?2H
(abc765c1bc6b546db82cb5cd038b66a3aa68b3152018-03-21T23:23:34Z284282 N´C2017-05-18T04:39:44Z"2017-05-19T19:35:44Z*ΩWhat is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix (template)
What changes did you make? (Give an overview)
Variable Declaration initial value should now be indented the same way as Assignment Expressions. We ignore the equal operator token and the token after it instead of just ignoring the initial value. By ignoring both of these token we can allow for an optional indent whether the equal operator is on a new line or not. Since a parenthesis token is not part of the initial value node it needs to be ignored in case it appears on a new line. We must also match indent of the first token after the equal since it might be a parenthesis that should have the same indentation of the equal when they are on the same line.
Is there anything you'd like reviewers to focus on?
Any test cases missing?2I
(3fc9653adf462e4646d2f25e8f3b7be19b848e392017-05-19T19:35:43Z2373964:
2017-05-19T17:58:54ZLGTM:n
2017-05-19T18:00:42ZV@platinumazure Changed the test name to baz from memberFunction. Thanks for the reviewÚ®Ò92016-10-20T07:19:05Z"2016-10-22T00:41:54Z*∏What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7363


What changes did you make? (Give an overview)
This updates camelcase to allow NewExpressions with non-camelcase identifiers. Previously, CallExpressions were allowed but NewExpressions were not.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(8dfd802f993b302328faaa278260e6ee82badfab2016-10-22T00:41:54Z11638619:∆
2016-10-20T07:19:06Z≠@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @lordgiotto and @nzakas to be potential reviewers.:
2016-10-20T07:19:06ZLGTM:
2016-10-21T22:18:32ZLGTM:2
2016-10-21T22:18:50ZUpdated the documentation.≥QÌ2015-07-28T19:47:07Z"2015-07-30T16:31:38Z*ìVersion: v1.0.0-rc-1
Rule: "quotes": [2, "backtick"]
If I require backticks as my quote style, ESLint complains when I use single or double quotes for imports, like so:
import foo from 'foo.js';
However, you can't use backticks to reference imported modules (it isn't valid).2I
(40eda5957d52ccad8070db86a3e2aa983e2fc0f82015-07-30T12:52:07Z1937871:‹
2015-07-28T19:47:08Z√Thanks for the issue! We get a lot of issues, so this message is automatically posted to each one to help you check that you've included all of the information we need to help you.
Reporting a bug? Please be sure to include:

The version of ESLint you are using (run eslint -v)
The source code that caused the problem
The configuration you're using (for the rule or your entire config file)
The actual ESLint output complete with line numbers

Requesting a new rule? Please be sure to include:

The use case for the rule - what is it trying to prevent or flag?
Whether the rule is trying to prevent an error or is purely stylistic
Why you believe this rule is generic enough to be included

Requesting a feature? Please be sure to include:

The problem you want to solve (don't mention the solution)
Your take on the correct solution to problem

Including this information in your issue helps us to triage it and get you a response as quickly as possible.
Thanks!:™
2015-07-28T20:58:31ZëWe just went though a similar issue with directives (#3132).  What other uses of template strings are not valid?  @michaelficarra or @mysticatea?:ü
2015-07-28T21:02:20ZÜBoth of these places are not string expressions, though, so I don't even think of them as exceptions -- these are bugs. An allowed exception to this rule would be property names ({"a-b": 0}), but that can be avoided by using computed property names ({[a-b]: 0}).:z
2015-07-28T21:04:35ZbThen let's ask this, what are uses of quotes (single or double), which are not string expressions?:2
2015-07-28T21:04:53ZSee above: property names.:«
2015-07-29T00:24:34ZÆTo clarify (in case there is confusion): ESLint shouldn't raise a flag in this case when you use quotes instead of ticks, as quotes are the only syntactically-correct option.:
2015-07-29T02:34:26ZgOh...
Similar issues are:

import sources.
property names (not computed).

Does anyone have more ideas?:n
2015-07-29T06:58:18ZV@mysticatea don't forget about exports. This issue should cover all module specifiers.:Ö
2015-07-29T14:09:24ZÏ@michaelficarra Thank you.
I searched in the language spec, syntax which uses StringLiteral is below:

Directive Prologues (‚úî)
LiteralPropertyName
ModuleSpecifier - this is included in FromClause, and FromClause is included in ImportDeclaration and ExportDeclaration

And

In CommonToken and PrimaryExpression, both StringLiteral and TemplateLiteral can be used.–4W≤22016-06-17T20:04:35Z"2016-06-20T18:20:12Z*ØRef #6359 I think, @mysticatea
What version of ESLint are you using?
2.13.0 (just released)
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
{
  "extends": "./node_modules/eslint-preset-behance/.eslintrc"
}
What did you do? Please include the actual source code causing the issue.
run eslint app_folder/
Updated to 2.13.0 in CI
What did you expect to happen?
No issues
What actually happened? Please include the actual, raw output from ESLint.
Cannot read config file: app/node_modules/node_modules/eslint-preset-behance/.eslintrc
Error: ENOENT: no such file or directory, open 'app/node_modules/node_modules/eslint-preset-behance/.eslintrc'

It's checking node_modules/node_modules for some reason
Workaround I guess is that we don't have to use ./node_modules/2I
(434de7f5999bab18b3f53eb321b29eea9f62ea592016-06-20T18:20:12Z1937871:≤
2016-06-17T20:13:27ZôThis seems to also result in going up too many parent directories: { "extends": "../../../test/.eslintrc" }
Results in:
Cannot read config file: /Users/test/.eslintrc
Referenced from: /Users/Mardak/foo/bar/baz/test/.eslintrc

Before it would extend /Users/Mardak/foo/test/.eslintrc::
2016-06-17T20:14:15Z"Same here. It broke all our builds::
2016-06-17T20:17:40Z"Issue was introduced by #6359 fix.:à
2016-06-17T20:31:20ZÔfor the change: path.join(relativeTo || path.dirname(filePath), parentPath)
parentPath: ./node_modules/eslint-preset-behance/.eslintrc
relativeTo: app/node_modules
path.dirname(filePath): app
path.join(path.dirname(filePath), parentPath)):
app/node_modules/eslint-preset-behance/.eslintrc
path.join(relativeTo, parentPath)):
app/node_modules/node_modules/eslint-preset-behance/.eslintrc
And it looks like the test wasn't testing the change in applyExtends but the input/output of ConfigFile.load:¡
2016-06-17T21:08:49Z®This is an issue for me as well. In my instance, this error appears to be related to using eslint as a non-global package and running it with ./node_modules/.bin/eslint:ë
2016-06-17T21:34:26ZyLet's see what @mysticatea thinks. He should be around soonish and then we can decide whether there's an easy fix or not.:à
2016-06-17T23:13:40ZpI apologize for this.
I will investigate this.
I think relativeTo should be the directory that .eslintrc exists.:€
2016-06-17T23:20:00Z¬@mysticatea That's what relativeTo should be, but it doesn't look like it is in this case, for some reason. Might be a deeper bug in relativeTo itself (which would affect a lot of other things).:Ω
2016-06-17T23:39:52Z§Mmm, weird, we also have relative path in our setting and it's working: https://github.com/eslint/eslint/blob/414206cdec53f4967f56ee23ac0c1eb45b31846a/.eslintrc.yml:Í
2016-06-18T00:00:09Z—That relativeTo seems to be 
  
    
      eslint/lib/config/config-file.js
    
    
         Line 328
      in
      414206c
    
    
    
    

        
          
           return path.join(projectPath);:‡
2016-06-18T00:15:56Z«load( C:\Users\starc\Documents\GitHub\eslint\.eslintrc.yml undefined undefined )
    resolvedPath: { filePath: 'C:\\Users\\starc\\Documents\\GitHub\\eslint\\.eslintrc.yml' }
    dirname: C:\Users\starc\Documents\GitHub\eslint
    basedir: C:\Users\starc\Documents\GitHub\eslint\node_modules
    lookupPath: C:\Users\starc\Documents\GitHub\eslint\node_modules\node_modules

getBaseDir seems wrong, but if I fixed getBaseDir, I get failures of some tests...:Å
2016-06-18T00:33:22ZiFixed: 4c80417#diff-3ca2712fe1d95b19637e57eb1a8b3a5bR318
But I'm not sure this is a correct way or not...:X
2016-06-18T02:30:35Z@I don't think special-casing node_modules is the right approach.:u
2016-06-18T18:37:00Z]Is there a deadline at which point the change that broke this will be reverted, absent a fix?:ê
2016-06-18T19:50:27Z˜@ljharb We are usually try to release patches on the following Monday after the release that created an issue.
@mysticatea Another problem related to this change. You can't run global eslint at all anymore:
$ eslint .
Cannot read config file: C:\Users\ilya\AppData\Roaming\npm\node_modules\packages\eslint-config-eslint\default.yml
Error: ENOENT: no such file or directory, open 'C:\Users\ilya\AppData\Roaming\npm\node_modules\packages\eslint-config-eslint\default.yml'
Referenced from: c:\Users\ilya\Documents\github\eslint\.eslintrc.yml
Error: Cannot read config file: C:\Users\ilya\AppData\Roaming\npm\node_modules\packages\eslint-config-eslint\default.yml
Error: ENOENT: no such file or directory, open 'C:\Users\ilya\AppData\Roaming\npm\node_modules\packages\eslint-config-eslint\default.yml'
Referenced from: c:\Users\ilya\Documents\github\eslint\.eslintrc.yml
    at Error (native)
    at Object.fs.openSync (fs.js:549:18)
    at Object.fs.readFileSync (fs.js:397:15)
    at readFile (C:\Users\ilya\AppData\Roaming\npm\node_modules\eslint\lib\config\config-file.js:71:15)
    at loadYAMLConfigFile (C:\Users\ilya\AppData\Roaming\npm\node_modules\eslint\lib\config\config-file.js:102:30)
    at loadConfigFile (C:\Users\ilya\AppData\Roaming\npm\node_modules\eslint\lib\config\config-file.js:219:22)
    at load (C:\Users\ilya\AppData\Roaming\npm\node_modules\eslint\lib\config\config-file.js:500:18)
    at C:\Users\ilya\AppData\Roaming\npm\node_modules\eslint\lib\config\config-file.js:392:36
    at Array.reduceRight (native)
    at applyExtends (C:\Users\ilya\AppData\Roaming\npm\node_modules\eslint\lib\config\config-file.js:363:28)
It's looking for C:\Users\ilya\AppData\Roaming\npm\node_modules\packages\eslint-config-eslint\default.yml and correct path should be C:\Users\ilya\AppData\Roaming\npm\node_modules\eslint\packages\eslint-config-eslint\default.yml
So it's going one directory too far up.:;
2016-06-18T21:23:52Z#I think I figured it out. See #6468:á
2016-06-20T20:52:09ZÓI'm not sure this fully resolved the problem. I'm still seeing this error in a CI build that shows that it is pulling in the latest version, including this patch.
I started seeing this at the end of last week and have tracked it down to my use of grunt-eslint, which depends on "eslint": "^2.0.0". Therefore, my project does not directly define the eslint version to use since the grunt plugin depends on ^2.0.0
The piece that might be different in my case is that my extends definition is relative to the rule file rather than node_modules: https://github.com/travi/eslint-config-travi/blob/master/rules/tests/react.js#L2:S
2016-06-20T22:21:41Z;(This fix did resolve my issue from #6458, fwiw, thanks!!!):P
2016-06-21T00:12:43Z8@travi please open a new issue and provide your details.:A
2016-06-21T04:41:24Z)sure thing: #6489. thank you for the helpì)´2015-03-17T22:31:23Z"2015-06-18T02:59:00Z*˘The new always-multiline behavior of comma-dangle requires a trailing comma if a newline appears anywhere in the literal. It would probably make more sense if it only considered the space right before the closing bracket.
E.g. these two cases are currently not allowed, but they probably should be:
{x: {
  foo: 'bar',
}}
{a: 1, b: 2,
  c: 3, d: 4}
This is a followup to #1984.2G
(09594ef29673c206641d291ff5d0f45c6e03716b2015-06-17T20:50:26Z61787:·
2015-03-18T01:23:00Z»Can you paste the output you get when running each of those examples?
In general, when filing issues it's useful to include the source code, your configuration, and the output. Really helps us triage.:ö
2015-03-18T01:35:17ZÅ// test.js
var a = {x: {
  foo: 'bar',
}};
var b = {a: 1, b: 2,
         c: 3, d: 4};
// config.json
{
    "rules": {
        "comma-dangle": [2, "always-multiline"]
    }
}
$ eslint --reset --no-eslintrc --config config.json test.js

test.js
  3:1   error  Missing trailing comma  comma-dangle
  5:19  error  Missing trailing comma  comma-dangle

‚úñ 2 problems (2 errors, 0 warnings):a
2015-03-18T01:48:22ZISo you're saying that the rule should ignore these situations because...?:ò
2015-03-18T01:55:48ZˇBecause the following looks really weird and I doubt this was the intent of always-multiline:
var a = {x: {
  foo: 'bar',
},};
var b = {a: 1, b: 2,
         c: 3, d: 4,};
always-multiline makes sense if you want to enforce commas at the end of each line. I can't think of why anyone would want a line-break anywhere in the literal to cause the last property to need a dangling comma.:ö
2015-03-18T03:08:05ZÅI'm just trying to come up with an explanation that can be turned into code. Part of me thinks that if you use weird formats like this, you are voiding your warranty on having a linter understand it. The other part of me is trying to accept that there's an exception that would make sense for these samples and wouldn't be unreasonable to implement. I'm asking for your help with that, so I need more than "this would be weird" (because another option would be to use a more normalized style to appease the rule).:†
2015-03-18T04:18:27ZáI think the rule that can be turned into code is pretty simple, and is what what originally proposed in #1984: require a dangling comma if and only if there is a newline between the last value and the closing parenthesis.
Here's the reasoning behind this. The goal is to enforce a comma at the end of each line:
var x = {
  a: 1,
  b: 2,
  c: 3,
  d: 4,
};
Typically when you split an object or array, you place one value/property per line. The goal is to make all lines look alike, and to make it so a code modification that appends one element only has to touch one line.
This formulation of the rule takes care of a bunch of cases where the rule as implemented today doesn't make sense. For example, I can't think of why anyone would ever want a dangling comma in this case:
var x = [{
  a: 1,
  b: 2,
  c: 3,
  d: 4,
},];
Why would anyone allow this:
var x = [{a: 1, b: 2, c: 3, d: 4}];
But not this?
var x = [{a: 1, b: 2,
          c: 3, d: 4}];
Any time there is no new line before the closing parenthesis, the dangling comma doesn't make sense:
var x = {
  a: 1,
  b: 2,
  c: 3,
  d: 4,};
This is a weird edge case, but I don't think anyone would argue that a comma is better than no comma in this case. The last line is already different from the others, so there is no reason for it to have a comma. The dangling comma right before the closing parenthesis on the same line would look really weird in a codebase that explicitly disallows dangling commas on one-line literals (which is what always-multiline does).
Does this make sense?:˜
2015-03-18T16:29:22ZﬁAh, got it, thanks for explaining. I guess my hope is always that ESLint will help people recognize how strange their code style is and adapt accordingly. I suppose that's unrealistic. :)
Seems like a simple enough change.:´
2015-03-18T16:48:45ZíGlad I could help. I'm curious though, are you saying the always-multiline comma dangle is strange? I guess if you're talking about the current rule (anywhere in the literal), then I agree with you. The way I'm proposing, I find that much less strange than always (who likes {x:2,}?!?).
Btw, the multiline behavior I'm describing is part of the code standards at Facebook, so I'm not making it up. üòÅ:x
2015-03-18T17:00:51Z`The style of the code is very strange, regardless if it comes from Facebook or anywhere else. :):°
2015-05-06T22:13:06Zàüëç  on this ‚Äì¬†I don't think it's a "very" strange style ‚Äì and I think you've hit the nail on the head that the always-multiline should be about the ability to copy/paste/shift-lines around ‚Äì ie, for cases where the comma is the last character on the line.:Ö
2015-05-06T23:01:18ZÏalways-multiline should be about the ability to copy/paste/shift-lines around ‚Äì ie, for cases where the comma is the last character on the line.

Exactly the same opinion over here. üëç I guess it means we're a bunch of weirdos! üòú:d
2015-06-12T17:59:59ZLAnother example:
new Map([
  [key, {
    a: 1,
    b: 2,
    c: 3,
  }],
]);:(
2015-06-16T22:22:04ZWorking on this.ÏL'£42016-07-16T03:08:44Z"2016-08-30T02:04:57Z*“4What version of ESLint are you using?
ESLint 3.1.0
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
case1.js
module.exports = {
    "rules"   : {
        "key-spacing"                  : [
            "error",
            {
                "multiLine" : {
                    "beforeColon": false,
                    "afterColon" : true,
                    "mode"       : "strict",
                    "align"      : {
                        "beforeColon": false,
                        "afterColon" : true,
                        "on"         : "colon",
                        "mode"       : "minimum"
                    }
                }
            }
        ]
    }
};
case2.js
module.exports = {
    "rules": {
        "key-spacing": [
            "error",
            {
                "multiLine": {
                    "beforeColon": false,
                    "afterColon" : true,
                    "mode"       : "strict"
                },
                "align"    : {
                    "beforeColon": false,
                    "afterColon" : true,
                    "on"         : "colon",
                    "mode"       : "minimum"
                }
            }
        ]
    }
};
What did you do? Please include the actual source code causing the issue.
test.js
var a = {
    foo   : 1,
    align1: {
        foo:    2
    },
    align2: {
        foo:    3
    },
    bar: 4
};
What did you expect to happen?
Case 1
  5:5   warning  Unexpected a line break before this close brace  object-curly-newline
  6:13  warning  Unexpected a line break after this open brace    object-curly-newline
Case2
  1:1   error    Unexpected var, use let or const instead         no-var
  1:5   error    'a' is defined but never used                    no-unused-vars
  3:13  warning  Unexpected a line break after this open brace    object-curly-newline
  5:5   warning  Unexpected a line break before this close brace  object-curly-newline
  6:13  warning  Unexpected a line break after this open brace    object-curly-newline
  8:5   warning  Unexpected a line break before this close brace  object-curly-newline
What actually happened? Please include the actual, raw output from ESLint.
Case 1
  4:17  error    Extra space before value for key 'foo'           key-spacing
  5:5   warning  Unexpected a line break before this close brace  object-curly-newline
  6:13  warning  Unexpected a line break after this open brace    object-curly-newline
  7:17  error    Extra space before value for key 'foo'           key-spacing
Because of 
  
    
      eslint/lib/rules/key-spacing.js
    
    
         Line 139
      in
      67c3cc2
    
    
    
    

        
          
           mode: toOptions.multiLine.mode, 
        
    
  


Case2
/path/to/config/case2.js:
        Configuration for rule "key-spacing" is invalid:
        Value "[object Object]" no schemas match.

Error: /path/to/config/case2.js:
        Configuration for rule "key-spacing" is invalid:
        Value "[object Object]" no schemas match.
Because of 
  
    
      eslint/lib/rules/key-spacing.js
    
    
        Lines 271 to 321
      in
      67c3cc2
    
    
    
    

        
          
           { 
        

        
          
               type: "object", 
        

        
          
               properties: { 
        

        
          
                   singleLine: { 
        

        
          
                       type: "object", 
        

        
          
                       properties: { 
        

        
          
                           mode: { 
        

        
          
                               enum: ["strict", "minimum"] 
        

        
          
                           }, 
        

        
          
                           beforeColon: { 
        

        
          
                               type: "boolean" 
        

        
          
                           }, 
        

        
          
                           afterColon: { 
        

        
          
                               type: "boolean" 
        

        
          
                           } 
        

        
          
                       }, 
        

        
          
                       additionalProperties: false 
        

        
          
                   }, 
        

        
          
                   multiLine: { 
        

        
          
                       type: "object", 
        

        
          
                       properties: { 
        

        
          
                           beforeColon: { 
        

        
          
                               type: "boolean" 
        

        
          
                           }, 
        

        
          
                           afterColon: { 
        

        
          
                               type: "boolean" 
        

        
          
                           } 
        

        
          
                       }, 
        

        
          
                       additionalProperties: false 
        

        
          
                   }, 
        

        
          
                   align: { 
        

        
          
                       type: "object", 
        

        
          
                       properties: { 
        

        
          
                           mode: { 
        

        
          
                               enum: ["strict", "minimum"] 
        

        
          
                           }, 
        

        
          
                           on: { 
        

        
          
                               enum: ["colon", "value"] 
        

        
          
                           }, 
        

        
          
                           beforeColon: { 
        

        
          
                               type: "boolean" 
        

        
          
                           }, 
        

        
          
                           afterColon: { 
        

        
          
                               type: "boolean" 
        

        
          
                           } 
        

        
          
                       }, 
        

        
          
                       additionalProperties: false 
        

        
          
                   } 
        

        
          
               }, 
        

        
          
               additionalProperties: false 
        

        
          
           } 
        
    
  

 (multiLine.mode isn't allowed with align option)
Are they designed as they are?2I
(256c4a2b3610063d0f16b5b9fc579036b26e3d982016-08-30T02:04:56Z6464196:±
2016-07-16T20:01:09ZòThe object align option applies to properties that are in a group and can be aligned. Try the case1.js config on this:
var a = {
    foo   :    1,
    align1:    {
        foo: 2
    },
    align2: {
        foo: 3
    },
    bar: 4
};
Since foo and align1 are the only properties on adjacent lines in the same object literal, they're the only ones where align applies. All of the other properties are individual and will follow the rules for a multiLine object literal. Assuming that modified example passes, I think we're good on that part.
As for the schema error, that is a bug. key-spacing has a pretty complex schema, so mode was probably omitted by mistake.:§
2016-07-16T21:43:47Zã@btmills Thank you for you explanation.  I had a slight misunderstanding about align... üò≥
I tried to lint the first code in align and multiLine with case1.js config and the code actually passed, so I also tried to lint another code based on the code above.
var myObj = {
  key1: 1, // uses multiLine

  key2:    2, // uses align (when defined)
  key3:    3, // uses align (when defined)

  key4: 4 // uses multiLine
}
The result is:
  4:12  error  Extra space before value for key 'key2'  key-spacing
  5:12  error  Extra space before value for key 'key3'  key-spacing
I'm a little confused because multiLine.align.mode  in case1.js seems to be overridden with multiLine.mode. Is this also a bug? Or we cannot use both multiLine.mode and multiLine.align.mode in the same time?:›
2016-07-16T22:07:01Zƒ@whizark is right - align isn't respecting its own mode at all, and is instead using multiLine's mode value.
Two steps to fixing this:

Change the schema to allow mode.align. Right now just multiLine.align.mode is permitted.
Change the code so that mode uses align's setting, if present, when properties are part of a group.:*
2016-08-15T01:27:23Zi'll work on this!:M
2016-08-21T23:21:31Z5Great, @azhang496 - let us know if you need any help!:Ç
2016-08-26T19:57:08ZÈsorry for the delay - @btmills is it necessary to change the schema? seems like this can be fixed just by changing this 
  
    
      eslint/lib/rules/key-spacing.js
    
    
         Line 139
      in
      67c3cc2
    
    
    
    

        
          
           mode: toOptions.multiLine.mode, 
        
    
  

 to mode: toOptions.multiline.align.mode:–
2016-08-27T02:33:34Z∑@azhang496 I'm on my phone, so I can't check to be sure, but if the scheme is left unchanged, won't the case 2 config (setting a mode under align) still throw a validation error?
It looks like your suggestion would fix case 1 üëç
If you want to tackle one at a time, a first PR with (refs #6691) would be fine.:¿
2016-08-27T02:56:05Zß@btmills i can do both! i didn't realize the goal was to fix both cases, since just fixing case 1 would give the option to have different modes for multiline and align:H
2016-08-28T18:43:30Z0@btmills made a PR if you'd like to check it outÃCûF2017-07-23T01:47:44Z"2017-07-30T11:22:54Z*ì0Tell us about your environment

ESLint Version: 4.3.0
Node Version: 8.2.1
npm Version: 5.3.0

What parser (default, Babel-ESLint, etc.) are you using?
babel-eslint
Please show your full configuration:

Configuration

---

parser: babel-eslint

parserOptions:
  ecmaVersion: 6
  impliedStrict: true
  ecmaFeatures:
    arrowFunctions: true
    blockBindings: true
    classes: true
    defaultParams: true
    destructuring: true
    forOf: true
    generators: false
    modules: true
    objectLiteralComputedProperties: true
    objectLiteralDuplicateProperties: false
    objectLiteralShorthandMethods: true
    objectLiteralShorthandProperties: true
    spread: true
    superInFunctions: true
    templateStrings: true
    jsx: true

env:
  browser: true
  mocha: true
  es6: true

globals:
  expect: false

plugins:
  - react
  - flowtype
  - fp

settings:
  flowtype:
    onlyFilesWithFlowAnnotation: true


extends:
  - eslint:recommended
  - plugin:react/recommended

rules:

  # Babel inserts 'use strict' for us already
  strict:
    - error
    - never


  # Best Practices

  array-callback-return: error
  complexity:
    - error
    - 8
  curly: error
  default-case: error
  dot-notation: error
  eqeqeq: error
  no-alert: error
  no-div-regex: error
  no-empty-function: error
  no-eval: error
  no-extend-native: error
  no-extra-bind: error
  no-implicit-coercion: error
  no-implicit-globals: error
  no-implied-eval: error
  no-invalid-this: error
  no-labels: error
  no-lone-blocks: error
  no-loop-func: error
  no-multi-spaces: error
  no-multi-str: error
  no-native-reassign: error
  no-new: error
  no-new-func: error
  no-new-wrappers: error
  no-param-reassign:
    - error
    - props: true
  no-return-assign: error
  no-script-url: error
  no-self-compare: error
  no-sequences: error
  no-throw-literal: error
  no-unmodified-loop-condition: error
  no-unused-expressions: error
  no-useless-call: error
  no-useless-concat: error
  no-useless-escape: error
  no-void: error
  no-warning-comments: warn
  no-with: error
  wrap-iife: error
  yoda: error


  # Variables

  init-declarations: error
  no-shadow:
    - error
    - hoist: all
  no-shadow-restricted-names: error
  no-use-before-define: error


  # Stylistic

  array-bracket-spacing:
    - error
    - always
  brace-style: error
  camelcase: error
  comma-dangle:
    - error
    - never
  comma-spacing: error
  comma-style: error
  computed-property-spacing:
    - error
    - always
  consistent-this: error
  eol-last: error
  indent:
    - error
    - 2
    - SwitchCase: 1
  key-spacing: error
  keyword-spacing: error
  linebreak-style: error
  max-depth:
    - error
    - 5
  max-len:
    - error
    - 110
  max-nested-callbacks:
    - error
    - 4
  max-params:
    - error
    - 4
  max-statements:
    - error
    - 20
    - ignoreTopLevelFunctions: true
  max-statements-per-line: error
  new-parens: error
  newline-after-var: error
  newline-before-return: error
  newline-per-chained-call: error
  no-array-constructor: error
  no-bitwise: error
  no-continue: error
  no-extra-parens: error
  no-inline-comments: error
  no-lonely-if: error
  no-mixed-spaces-and-tabs: error
  no-multiple-empty-lines:
    - error
    - max: 2
      maxEOF: 1
      maxBOF: 0
  no-negated-condition: error
  no-new-object: error
  no-plusplus: error
  no-restricted-syntax:
    - error
    - TryStatement
    - FunctionDeclaration
  no-spaced-func: error
  no-trailing-spaces:
    - error
    - skipBlankLines: true
  no-unneeded-ternary: error
  no-whitespace-before-property: error
  object-curly-spacing:
    - error
    - always
  object-property-newline:
    - error
    - allowMultiplePropertiesPerLine: true
  one-var:
    - error
    - never
  operator-assignment: error
  quote-props:
    - error
    - as-needed
  quotes:
    - error
    - single
  semi:
    - error
    - never
  space-before-blocks: error
  space-in-parens:
    - error
    - always
  space-infix-ops:
    - error
  space-unary-ops: error
  spaced-comment: error
  unicode-bom: error


  # ES2015

  arrow-body-style: error
  arrow-parens: error
  arrow-spacing: error
  no-useless-computed-key: error
  no-var: error
  object-shorthand: error
  prefer-const: error
  prefer-spread: error
  prefer-template: error
  template-curly-spacing:
    - error
    - always


  # React

  react/display-name: off
  react/jsx-boolean-value: error
  react/jsx-closing-bracket-location: error
  react/jsx-closing-tag-location: error
  react/jsx-curly-spacing:
    - error
    - always
  react/jsx-equals-spacing: error
  react/jsx-filename-extension: error
  react/jsx-first-prop-new-line:
    - error
    - multiline
  react/jsx-handler-names: error
  react/jsx-indent:
    - error
    - 2
  react/jsx-indent-props:
    - error
    - 2
  react/jsx-key: error
  react/jsx-max-props-per-line:
    - error
    - maximum: 4
  react/jsx-no-bind: error
  react/jsx-no-comment-textnodes: error
  react/jsx-no-target-blank: error
  react/jsx-pascal-case: error
  react/jsx-tag-spacing: error
  react/jsx-wrap-multilines:
    - error
    - declaration: false
      assignment: false
      arrow: false
      return: true
  react/prefer-stateless-function: error
  react/prop-types: off
  #react/require-optimization: error
  react/require-extension: off
  react/self-closing-comp: error
  react/sort-comp: error


  # Flowtype

  flowtype/require-parameter-type: error
  flowtype/require-return-type: error
  flowtype/space-after-type-colon:
    - error
    - always
  flowtype/space-before-type-colon:
    - error
    - never

What did you do? Please include the actual source code causing the issue.

const fn = ( {
  state
} ) =>
  <App>
    <Router />
  </App>

const fn = ( {
  state
}: State ): React.Element =>
  <App>
    <Router />
  </App>
What did you expect to happen?
Neither of the above patterns to return errors.
What actually happened? Please include the actual, raw output from ESLint.
The second pattern above returned an error (for the line containing }: State ): React.Element =>):
error Expected indentation of 2 spaces but found 0 indent
Note: This works correctly in indent-legacy2J
(7247b6cff70ad5d5aeea27ec893e675238cb8e8d2017-07-30T11:22:47Z11638619:µ
2017-07-23T02:21:22ZúHi, thanks for reporting.
This issue is occurring due to an invariant of regular JS which doesn't exist for Flow (namely, that the last token of an ObjectPattern is a closing curly brace). We generally don't guarantee that core ESLint rules will work as expected with custom syntax.
However, I think it might be possible to make the rule more robust in this case so that it handles custom syntax more gracefully.:Û
2017-07-25T17:26:38Z⁄@not-an-aardvark Thanks for the clarification. It was my impression that Flowtype annotations were fully supported with the babel-eslint parser, though - Is that not the case? And is this actually a babel-eslint issue?:≤	
2017-07-25T18:18:06Zô	babel-eslint is just a parser, so it can produce an AST for files with Flowtype annotations (i.e. allow ESLint to start running rules on them). However, core ESLint rules are generally designed for plain JavaScript, and it wouldn't be possible for them to account for all possible custom syntax extensions correctly (since any given custom syntax extension might have its own semantics, which ESLint wouldn't be able to know beforehand). As a result, there are some cases where core ESLint rules don't handle a particular custom syntax as users would expect.
Our policy is generally that we're fine with making core rules more robust when dealing with custom syntax in general, but we don't accept code that explicitly accounts for the semantics of a particular custom syntax. In those cases, we generally encourage people to create custom rules and get them added to eslint-plugin-babel, which has some replacements for core rules that handle some particular syntax extensions correctly.
To clarify, I think this particular case might fall into the first category (making the rule more robust against custom syntax in general), which would mean we can fix it in the core rule.:Ñ
2017-07-25T20:04:27ZlGlad I'm not the only one.
I just didn't find this here first and already posted on StackOverflow instead :(:1
2017-07-28T05:04:25ZAlso having this problem.:ô
2017-08-06T10:01:06ZÄ(Regarding Flow type annotations)
That is what the eslint-plugin-flowtype plugin is for? There also is babel-plugin-transform-flow-strip-type to just strip the types (I prefer the first plugin, why not have some checks instead of just stripping the types).à{Á<2016-12-16T06:44:32Z"2016-12-18T08:06:22Z*íWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (see #7782)
What changes did you make? (Give an overview)
This updates semi to detect template literals and regular expressions correctly.
This should not get reported as an error:
/* eslint semi: [error, "never"] */

var foo = 1; // semicolon is required here, otherwise this would be a tagged template.
`bar`

var baz = 1; // semicolon is required here, otherwise this would be parsed as division.
/qux/
Previously, the rule was detecting / characters, but it was only looking for a single-character token with the value '/', due to a bug in the logic that handles ++ and -- tokens. The rule was not detecting ` characters at all.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(6e61070a682538af5bbaa7c9bd5e284f057203502016-12-18T08:06:22Z11638619:À
2016-12-16T06:44:34Z≤@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @adrianheine and @vitorbal to be potential reviewers.:
2016-12-16T06:44:35ZLGTM: 
2016-12-16T15:45:29Z±Just for my understanding, was the problem with the regex detection that the regular expression literal is a full token, so the $ was causing false negatives in the match and therefore false positives in the rule?
If so, checking the token value explicitly makes much more sense and this looks good to me.:;
2016-12-16T20:37:47Z#@platinumazure Yes, that's correct.≤{Ê<2016-12-16T06:26:07Z"2016-12-18T08:06:29Z*ÊTell us about your environment

ESLint Version: 3.12.2
Node Version: 6.9.1
npm Version: 4.0.2

What parser (default, Babel-ESLint, etc.) are you using?
babel-eslint
Please show your full configuration:

const argv = require('yargs').argv

module.exports = {
  root: true,
  parser: 'babel-eslint',
  plugins: [
    'babel',
    'react',
    'flowtype',
    'standard',
    `vue${argv.fix ? 'fix' : ''}`
  ],
  extends: [
    'standard',
    'plugin:flowtype/recommended'
  ],
  env: {
    browser: true
  },
  globals: {
    __DEV__: false,
    __MOCK__: false,
    IMG_PATH_PREFIX: false
  },
  parserOptions: {
    ecmaVersion: 6,
    sourceType: 'module',
    ecmaFeatures: {
      jsx: true
    }
  },
  rules: {
    'array-bracket-spacing': 2,
    'babel/object-curly-spacing': 2,
    'computed-property-spacing': 2,
    'eol-last': 2,
    'generator-star-spacing': 2,
    'jsx-quotes': [
      2,
      'prefer-double'
    ],
    'max-depth': 2,
    'max-len': [
      2,
      120,
      2
    ],
    'max-nested-callbacks': 2,
    'max-params': [2, 5],
    'space-before-function-paren': [
      2,
      {
        anonymous: 'always',
        named: 'never'
      }
    ],
    'object-curly-spacing': 0,
    'react/jsx-uses-react': 2,
    'react/jsx-uses-vars': 2,
  }
}
What did you do? Please include the actual source code causing the issue.

const img = new Image();

/^https?:\/\//i.test(url) && (img.crossOrigin = 'Anonymous')
What did you expect to happen?
Do not fix it with remove semicolon
What actually happened? Please include the actual, raw output from ESLint.
semicolon is removed then it will throw an error because it was no longer a valid js expression.
const img = new Image()

/^https?:\/\//i.test(url) && (img.crossOrigin = 'Anonymous')2J
(6e61070a682538af5bbaa7c9bd5e284f057203502016-12-18T08:06:22Z11638619:J
2016-12-16T06:28:17Z2Thanks for the report. I can reproduce this issue.ÂF∂22016-06-17T23:53:25Z"2016-06-19T06:19:15Z*±What version of ESLint are you using?
2.13.0
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
{ "rules": { "padded-blocks": ["error", "never"] } }
What did you do? Please include the actual source code causing the issue.
{

  0
}
What did you expect to happen?
{
  0
}
What actually happened? Please include the actual, raw output from ESLint.
{
0
}
Introduced by #6393 for #6320.2H
(3c9ce093b94dbcb04d4395c33983d4cb3b0764ac2016-06-19T06:19:13Z438537:4
2016-06-18T18:10:21ZOops, thanks for the report.ªÔ;2016-11-26T23:41:13Z"2016-11-27T21:49:44Z*ÒWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

#7663


What changes did you make? (Give an overview)
Added a test to confirm that // would cause capitalized-comments to terminate eslint with a TypeError.
Added code to make sure that firstWordChar is an empty string rather than undefined in that case, thus avoiding the TypeError.
Is there anything you'd like reviewers to focus on?
Nope, nothing in particular.
Fix issue where comments containing a single space would cause eslint to
terminate with a TypeError.2H
(be739d06ec74bba1e37c1493b51ce934751ac78d2016-11-27T21:49:44Z718899:©
2016-11-26T23:41:14Zê@Trott, thanks for your PR! By analyzing the history of the files in this pull request, we identified @platinumazure to be a potential reviewer.:;
2016-11-26T23:41:15Z#All committers have signed the CLA.:
2016-11-26T23:41:15ZLGTM:
2016-11-26T23:47:14ZLGTM:
2016-11-26T23:57:03ZLGTM:<
2016-11-27T00:28:51Z$Cripes, sorry for missing this case.:z
2016-11-27T00:49:25ZbMy review comment was unclear- I'm requesting test cases for other line terminators, just in case.:õ
2016-11-27T04:11:25ZÇ@platinumazure Do you mean add these test cases?
        "/*\r*/",
        "/*\r\n*/",
        "/*\u2028*/",
        "/*\u2029*/",:
2016-11-27T04:14:50ZLGTM:X
2016-11-27T04:15:18Z@Added additional tests as requested by reviewers. Anything else?:6
2016-11-27T13:54:50ZLGTM. Thanks for contributing!˛ÔÔ;2016-11-26T23:30:08Z"2016-11-27T21:49:47Z*∫Tell us about your environment

**ESLint Version: 3.11.0
**Node Version: 7.2.0
**npm Version: 3.10.9

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

No configuration file.





What did you do? Please include the actual source code causing the issue.
With this file:

// 
Note that there is a single space after the //.
I ran: eslint --rule 'capitalized-comments: 2'
What did you expect to happen?
Expected lint to be successful.
What actually happened? Please include the actual, raw output from ESLint.
Cannot read property 'toLocaleLowerCase' of undefined
TypeError: Cannot read property 'toLocaleLowerCase' of undefined
    at isCommentValid (/Users/trott/.nvm/versions/node/v7.2.0/lib/node_modules/eslint/lib/rules/capitalized-comments.js:242:64)
    at processComment (/Users/trott/.nvm/versions/node/v7.2.0/lib/node_modules/eslint/lib/rules/capitalized-comments.js:262:32)
    at Array.forEach (native)
    at EventEmitter.Program (/Users/trott/.nvm/versions/node/v7.2.0/lib/node_modules/eslint/lib/rules/capitalized-comments.js:287:26)
    at emitOne (events.js:96:13)
    at EventEmitter.emit (events.js:188:7)
    at NodeEventGenerator.enterNode (/Users/trott/.nvm/versions/node/v7.2.0/lib/node_modules/eslint/lib/util/node-event-generator.js:40:22)
    at CodePathAnalyzer.enterNode (/Users/trott/.nvm/versions/node/v7.2.0/lib/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:608:23)
    at CommentEventGenerator.enterNode (/Users/trott/.nvm/versions/node/v7.2.0/lib/node_modules/eslint/lib/util/comment-event-generator.js:97:23)
    at Controller.enter (/Users/trott/.nvm/versions/node/v7.2.0/lib/node_modules/eslint/lib/eslint.js:925:36)2H
(be739d06ec74bba1e37c1493b51ce934751ac78d2016-11-27T21:49:44Z718899:C
2016-11-26T23:35:13Z+I can reproduce this, thanks for reporting.™ıÄ:2016-10-21T23:32:31Z"2016-10-27T23:50:53Z*©Tell us about your environment

ESLint Version: 3.8.1
Node Version: 6.9.1
npm Version: 3.10.8

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
(none)
What did you do? Please include the actual source code causing the issue.
echo '/[\?]/' | eslint --stdin --no-eslintrc --rule 'no-useless-escape: error'
What did you expect to happen?
no-useless-escape should report that the ? in the regular expression was uselessly escaped, because ? has no special meaning in a character class.
What actually happened? Please include the actual, raw output from ESLint.
No errors were reported.
A similar issue applies for characters like -, although it's a bit trickier because - is only sometimes a special character in a regex.
/\-/; // useless escape
/[a\-]/; // useless escape
/[a\-b]/; // not a useless escape
no-useless-escape does not report useless escaping for any of the above examples.2J
(c675d7d619440a14c1581d81401ddaf0eef8eb202016-10-27T23:50:50Z11638619â˚˝(2016-02-13T17:29:14Z"2016-02-15T19:13:30Z*çvar currentUrl = window
    .location
    .href
    .match(/(^[^#]*)/)[0];
Output:
1:18  error  Expected line break after `window\n    .location\n    .href\n    .match(/(^[^#]*)/)`

But:
var currentUrl = window
    .location
    .href
    .match(/(^[^#]*)/);
Work fine.2H
(c9c34ea7ecc13d1f90e728c0cccb97bdf96aa5a62016-02-15T18:52:00Z126780:∑
2016-02-13T17:47:16ZûJust an idea to reproduce quickly the issue:
17:45:43 [/c/My/Dev]
Œª eslint --version
v2.0.0
17:45:55 [/c/My/Dev]
Œª printf "window\n.location\n.href\n.match(/(^[^#]*)/)" | eslint --stdin --rule='newline-per-chained-call: 2'
17:46:05 [/c/My/Dev]
Œª printf "window\n.location\n.href\n.match(/(^[^#]*)/)[0]" | eslint --stdin --rule='newline-per-chained-call: 2'

<text>
  1:1  error  Expected line break after `window\n.location\n.href\n.match(/(^[^#]*)/)`  newline-per-chained-call

‚úñ 1 problem (1 error, 0 warnings)

17:46:12 [/c/My/Dev]
Œª:ã
2016-02-13T17:59:43ZÚBe aware, using ignoreChainWithDepth (default equals to 2):
http://eslint.org/docs/rules/newline-per-chained-call
17:57:56 [/c/My/Dev]
Œª printf "window\n.location\n.href\n.match(/(^[^#]*)/)[0]" | eslint --stdin --rule='newline-per-chained-call: [2,{ignor
eChainWithDepth: 4} ]'

<text>
  1:1  error  Expected line break after `window\n.location\n.href\n.match(/(^[^#]*)/)`  newline-per-chained-call

‚úñ 1 problem (1 error, 0 warnings)

17:58:01 [/c/My/Dev]
Œª printf "window\n.location\n.href\n.match(/(^[^#]*)/)[0]" | eslint --stdin --rule='newline-per-chained-call: [2,{ignor
eChainWithDepth: 5} ]'
17:58:05 [/c/My/Dev]
Œª:g
2016-02-13T18:02:38ZO@albertosantini i think it is bug, array access should not considered in chain.:g
2016-02-13T18:18:02ZOSounds like bug, I agree that array access shouldn't be part of the check here.:«

2016-02-15T07:11:21ZÆ
Personally , I want to ask if its possible to have an option to chain function calls only and not object access as well?
I really don't mind the newline-per-chained-call for those but it seems sometimes it gives me a false positive when it shouldn't. Such as what is reported here (Array access) and some weird ones such as Object.keys(options.meta)
Example:
   37:128  error    Expected line break after `Object.keys(options.meta)`                                          newline-per-chained-call
   37:128  error    Expected line break after `Object`                                                             newline-per-chained-call
   97:19   error    Expected line break after `b[c].split(';')`                                                    newline-per-chained-call
   97:19   error    Expected line break after `b[c]`                                                               newline-per-chained-call
   97:19   error    Expected line break after `b`

// line 37
                return `${options.timestamp()} ${level} ${(options.message != null ? options.message : '')} ${(options.meta && Object.keys(options.meta).length ? `
                    ${JSON.stringify(options.meta)}
                    ` : '')}`;

// line 97 
        const d = b[c].split(';')[0];

Using ESLint Version 2.0 with my ESLint Config:™
2016-02-15T10:28:49Zë@thedark1337 - Agree with an option to ignore members that are not called but I think that should be a separate issue as an enhancement proposal.:j
2016-02-15T16:53:09ZR@thedark1337 Could you open a new issue with the proposal for a new option please?⁄VÎ<2016-12-17T16:18:08Z"2016-12-19T06:45:18Z*‹	Edit: fix post to reflect real bug.
In the latest ESLint (v3.12.2), the func-call-spacing fix is really unhelpful for multiline call expressions (overlap with no-unexpected-multiline), especially when going without semicolons.
// Short snippet
this.cancelled.add(request)
this.decrement(request)
(0, request.reject)(new api.Cancel())
These are likely meant to be separate statements, with the below being (99.99% of the time) what was meant:
// Short snippet
this.cancelled.add(request)
this.decrement(request)
;(0, request.reject)(new api.Cancel())
Instead, func-call-spacing very unhelpfully fixes it to this, leading to runtime errors nearly every time in practice:
// Short snippet
this.cancelled.add(request)
this.decrement(request)(0, request.reject)(new api.Cancel())

Here's the same issue, but with trailing semicolons:
Input:
// Short snippet
this.cancelled.add(request);
this.decrement(request)
(0, request.reject)(new api.Cancel());
Meant:
// Short snippet
this.cancelled.add(request);
this.decrement(request);
(0, request.reject)(new api.Cancel());
"Fixed":
// Short snippet
this.cancelled.add(request);
this.decrement(request)(0, request.reject)(new api.Cancel());

Any chance this could be fixed to be a little less over-zealous?2H
(428fbdfea7836ecb159cd690104ff06657cb0d332016-12-19T06:45:11Z284282:x
2016-12-17T16:19:27Z`This has been causing me way too much of a productivity hit due to my editor autofixing on save.:¶
2016-12-17T16:38:08ZçActually, I'm working on narrowing down a more precise repro. It's actually a fix for another rule conflicting with no-unexpected-multilline.:N
2016-12-17T16:38:33Z6I'm confusing.
no-unexpected-multiline is not fixable.:ó
2016-12-17T16:40:01Z@mysticatea See my latest comment. I'm working on a better repro, since it's actually a conflict apparently not being detected.:à
2016-12-17T16:40:30ZÔSo it isn't.
@isiahmeadows Looking forward to the more precise repro steps. The research failure is on me, but please do me a favor and in future open issues when you have precise repro steps, not when you're still working on them. Thanks!:M
2016-12-17T16:40:55Z5Ah, it was at the same time.
Maybe func-call-spacing?:q
2016-12-17T16:40:59ZY@platinumazure Will do. (I thought I had the cause nailed down initially, when I didn't.):Å
2016-12-17T16:41:47ZiAck, I didn't mean you had to close this one. Just edit your initial post when you figure it out. Thanks!:”
2016-12-17T16:45:26Z∫@mysticatea Yes.
@platinumazure Sorry!

Here's a complete, fairly small repro:
Edit: fix config, reduce repro
$ cat test.js
// Short snippet
foo()
(0, bar)()

$ cat config.json
{"rules": {"func-call-spacing": 2}}

$ eslint --no-eslintrc --config config.json --fix test.js
<no output>

$ cat test.js
foo()(0, bar)():ﬁ
2016-12-17T16:51:38Z≈@isiahmeadows Thanks!
I guess the proposal here would be to have the func-call-spacing fixer not fix if the CallExpression's opening parenthesis is on the next line?
I think this also could be an example?
const a = foo
(function(global) {}(this));
So it wouldn't just be call expression chains that could be affected by this.:t
2016-12-17T16:53:06Z\@platinumazure That would be best. I can confirm it's only function calls that are affected.:9
2016-12-17T16:53:29Z!And yes, that is another example.:@
2016-12-17T17:02:15Z(I updated the original post accordingly.:®
2016-12-17T17:02:49ZèI think the autofix was not wrong since it does not change semantics. But surely this is similar to no-useless-escape rule's case as @platinumazure mentioned.
I agree that people expect func-call-spacing to not fix it automatically if the spaces include line terminators.:K
2016-12-17T17:11:54Z3I'll work on a fix, unless someone's already on it.ç&øB2017-04-27T01:27:11Z"2017-12-08T22:19:32Z*Å
Tell us about your environment
ESLint Version: 3.19.0
Node Version: 6.9.4
npm Version: 3.10.10
What parser (default, Babel-ESLint, etc.) are you using? Default
Please show your full configuration:
module.exports = {
    "extends": "standard",
    "plugins": [
        "standard",
        "promise"
    ],
    "parserOptions": {
      "ecmaVersion": 6
    },
    "env": {
      "node": true
    },
    "rules": {
      "semi": ["error", "always"],
      "camelcase": [2, {"properties": "never"}]
    }
};

What did you do? Please include the actual source code causing the issue.
Disabling the camelcase rule does not appear to respect ES6 default parameter assignment when used with object destructuring syntax.
Here's a simple example:
// example.js

function snakeCase ({
  param_1 = 'default value',
  param_2 = 'another default'
} = {}) {
  // do stuff
}

module.exports = snakeCase;


What did you expect to happen?
Eslint should not care that param_1 and param_2 are using snake case instead of camelCase as the rule is disabled
What actually happened? Please include the actual, raw output from ESLint.
error  Identifier 'param_1' is not in camel case                            camelcase
error  Identifier 'param_2' is not in camel case                            camelcase2I
(256481b04d201dd01dcac5947f9ae018fde5defc2017-12-08T22:19:24Z3421197:`
2017-04-27T01:28:23ZHNot sure if this is a bug or a rule change request; thanks for reviewing:¸
2017-04-27T16:50:51Z„Thanks for the report, @cdanielsen! I can reproduce this. Note that the following works:
function snakeCase ({
  param_1,
  param_2
} = {}) {
  // do stuff
}
I think the default assignment there is what's throwing the rule off.:*
2017-04-27T18:18:59ZI'll work on this.»L°42016-07-16T01:10:04Z"2016-07-18T15:41:06Z*õWhat version of ESLint are you using?
3.1.0
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  spaced-comment:
    - error
    - always
    - block:
        balanced: true
What did you do? Please include the actual source code causing the issue.
Linted this file:
/* this line is fine */

/*
 * these lines are fine
 */

// this line is reported as a problem
What did you expect to happen?

No linting errors to be detected.
The balanced option to only be considered when analyzing /* */ style comments, not // style.

What actually happened? Please include the actual, raw output from ESLint.
Encountered this linting error:
7:1  error  Expected space or tab before '*/' in comment  spaced-comment

‚úñ 1 problem (1 error, 0 warnings)2J
(3f206dd1074842fe4554bd50091b234475560ba62016-07-18T15:41:06Z17260989:ñ
2016-07-16T02:13:36Z˝Confirmed. Although I'm not 100% sure if the rule is failing on the inline comment, or at the end of the jsdoc style comment. Location seems to be pointing at inline comment, but content seems to indicate that it's jsdoc comment that's causing an issue.:ë
2016-07-16T02:20:56Z¯Looks like changing the file so it only contains one line results in the same error:
File:
// this line is reported as a problem
Result:
  1:1  error  Expected space or tab before '*/' in comment  spaced-comment

‚úñ 1 problem (1 error, 0 warnings)ó1:ùF2017-07-23T01:44:18Z"2017-07-27T09:11:09Z*«/Tell us about your environment

ESLint Version: 4.3.0
Node Version: 8.2.1
npm Version: 5.3.0

What parser (default, Babel-ESLint, etc.) are you using?
babel-eslint
Please show your full configuration:

Configuration

---

parser: babel-eslint

parserOptions:
  ecmaVersion: 6
  impliedStrict: true
  ecmaFeatures:
    arrowFunctions: true
    blockBindings: true
    classes: true
    defaultParams: true
    destructuring: true
    forOf: true
    generators: false
    modules: true
    objectLiteralComputedProperties: true
    objectLiteralDuplicateProperties: false
    objectLiteralShorthandMethods: true
    objectLiteralShorthandProperties: true
    spread: true
    superInFunctions: true
    templateStrings: true
    jsx: true

env:
  browser: true
  mocha: true
  es6: true

globals:
  expect: false

plugins:
  - react
  - flowtype
  - fp

settings:
  flowtype:
    onlyFilesWithFlowAnnotation: true


extends:
  - eslint:recommended
  - plugin:react/recommended

rules:

  # Babel inserts 'use strict' for us already
  strict:
    - error
    - never


  # Best Practices

  array-callback-return: error
  complexity:
    - error
    - 8
  curly: error
  default-case: error
  dot-notation: error
  eqeqeq: error
  no-alert: error
  no-div-regex: error
  no-empty-function: error
  no-eval: error
  no-extend-native: error
  no-extra-bind: error
  no-implicit-coercion: error
  no-implicit-globals: error
  no-implied-eval: error
  no-invalid-this: error
  no-labels: error
  no-lone-blocks: error
  no-loop-func: error
  no-multi-spaces: error
  no-multi-str: error
  no-native-reassign: error
  no-new: error
  no-new-func: error
  no-new-wrappers: error
  no-param-reassign:
    - error
    - props: true
  no-return-assign: error
  no-script-url: error
  no-self-compare: error
  no-sequences: error
  no-throw-literal: error
  no-unmodified-loop-condition: error
  no-unused-expressions: error
  no-useless-call: error
  no-useless-concat: error
  no-useless-escape: error
  no-void: error
  no-warning-comments: warn
  no-with: error
  wrap-iife: error
  yoda: error


  # Variables

  init-declarations: error
  no-shadow:
    - error
    - hoist: all
  no-shadow-restricted-names: error
  no-use-before-define: error


  # Stylistic

  array-bracket-spacing:
    - error
    - always
  brace-style: error
  camelcase: error
  comma-dangle:
    - error
    - never
  comma-spacing: error
  comma-style: error
  computed-property-spacing:
    - error
    - always
  consistent-this: error
  eol-last: error
  indent:
    - error
    - 2
    - SwitchCase: 1
  key-spacing: error
  keyword-spacing: error
  linebreak-style: error
  max-depth:
    - error
    - 5
  max-len:
    - error
    - 110
  max-nested-callbacks:
    - error
    - 4
  max-params:
    - error
    - 4
  max-statements:
    - error
    - 20
    - ignoreTopLevelFunctions: true
  max-statements-per-line: error
  new-parens: error
  newline-after-var: error
  newline-before-return: error
  newline-per-chained-call: error
  no-array-constructor: error
  no-bitwise: error
  no-continue: error
  no-extra-parens: error
  no-inline-comments: error
  no-lonely-if: error
  no-mixed-spaces-and-tabs: error
  no-multiple-empty-lines:
    - error
    - max: 2
      maxEOF: 1
      maxBOF: 0
  no-negated-condition: error
  no-new-object: error
  no-plusplus: error
  no-restricted-syntax:
    - error
    - TryStatement
    - FunctionDeclaration
  no-spaced-func: error
  no-trailing-spaces:
    - error
    - skipBlankLines: true
  no-unneeded-ternary: error
  no-whitespace-before-property: error
  object-curly-spacing:
    - error
    - always
  object-property-newline:
    - error
    - allowMultiplePropertiesPerLine: true
  one-var:
    - error
    - never
  operator-assignment: error
  quote-props:
    - error
    - as-needed
  quotes:
    - error
    - single
  semi:
    - error
    - never
  space-before-blocks: error
  space-in-parens:
    - error
    - always
  space-infix-ops:
    - error
  space-unary-ops: error
  spaced-comment: error
  unicode-bom: error


  # ES2015

  arrow-body-style: error
  arrow-parens: error
  arrow-spacing: error
  no-useless-computed-key: error
  no-var: error
  object-shorthand: error
  prefer-const: error
  prefer-spread: error
  prefer-template: error
  template-curly-spacing:
    - error
    - always


  # React

  react/display-name: off
  react/jsx-boolean-value: error
  react/jsx-closing-bracket-location: error
  react/jsx-closing-tag-location: error
  react/jsx-curly-spacing:
    - error
    - always
  react/jsx-equals-spacing: error
  react/jsx-filename-extension: error
  react/jsx-first-prop-new-line:
    - error
    - multiline
  react/jsx-handler-names: error
  react/jsx-indent:
    - error
    - 2
  react/jsx-indent-props:
    - error
    - 2
  react/jsx-key: error
  react/jsx-max-props-per-line:
    - error
    - maximum: 4
  react/jsx-no-bind: error
  react/jsx-no-comment-textnodes: error
  react/jsx-no-target-blank: error
  react/jsx-pascal-case: error
  react/jsx-tag-spacing: error
  react/jsx-wrap-multilines:
    - error
    - declaration: false
      assignment: false
      arrow: false
      return: true
  react/prefer-stateless-function: error
  react/prop-types: off
  #react/require-optimization: error
  react/require-extension: off
  react/self-closing-comp: error
  react/sort-comp: error


  # Flowtype

  flowtype/require-parameter-type: error
  flowtype/require-return-type: error
  flowtype/space-after-type-colon:
    - error
    - always
  flowtype/space-before-type-colon:
    - error
    - never

What did you do? Please include the actual source code causing the issue.

const o = {
  prop:
    () => 'return'
}

const o = {
  [ prop ]:
    () => 'return'
}
What did you expect to happen?
Neither of the above patterns to return any errors.
What actually happened? Please include the actual, raw output from ESLint.
The second pattern returned an error (for the line containing () => 'return'):
error Expected indentation of 2 spaces but found 4 indent
Note: This works correctly in indent-legacy2J
(31d7fd27ad28119abc30d01476c08e94288af0ab2017-07-27T09:11:05Z11638619:N
2017-07-23T02:12:50Z6Hi, thanks for reporting. This looks like a bug to me.˝?É¨D2017-06-16T10:15:08Z"2017-07-30T04:26:28Z*ß+What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

Tell us about your environment

ESLint Version: v4.0.0
Node Version: v8.1.0
npm Version: 5.0.3

What parser (default, Babel-ESLint, etc.) are you using?
babel-eslint
Please show your full configuration:
---
  extends: airbnb-base
  parser: babel-eslint

  settings:
    import/resolver:
      node:
        extensions:
          - .js
          - .ios.js
          - .androis.js
        moduleDirectory:
          - node_modules
          - js

  plugins:
    - babel
    - react
    - import

  parserOptions:
    ecmaVersion: 7
    sourceType: module
    ecmaFeatures:
      jsx: true
      modules: true

  env:
    es6: true
    node: true
    jest: true

  globals:
    __DEV__: true
    fetch: true
    XMLHttpRequest: true

  rules:
    import/no-unresolved:
      - 2
      - { ignore: [ '^[app]' ] }
    import/extensions: 0
    import/no-extraneous-dependencies: 0
    import/prefer-default-export: 0

    strict: [2, 'never']
    no-debugger: 2
    arrow-body-style: 0
    no-return-assign: 0
    no-plusplus: 0
    class-methods-use-this: 0
    no-underscore-dangle: 0

    brace-style:
      - 2
      - stroustrup
      - { allowSingleLine: true }

    template-curly-spacing: [2, 'always']
    array-bracket-spacing: [2, 'always']

    array-element-newline: [2, { multiline: true }]

    key-spacing:
      - 2
      -
        align:
          afterColon: true
          on: value

    padding-line-between-statements:
        - 2
        - { blankLine: 'always', prev: 'block-like', next: '*' }
        - { blankLine: 'always', prev: '*', next: 'block-like' }

        - { blankLine: 'always', prev: '*', next: 'return' }

        - { blankLine: 'always', prev: '*', next: 'function' }
        - { blankLine: 'always', prev: 'function', next: '*' }

        - { blankLine: 'always', prev: ['const', 'let', 'var'], next: '*'}
        - { blankLine: 'any', prev: ['const', 'let', 'var'], next: ['const', 'let', 'var']}
        - { blankLine: 'always', prev: 'expression', next: ['const', 'let', 'var']}

        - { blankLine: 'always', prev: 'import', next: '*'}
        - { blankLine: 'any', prev: 'import', next: 'import'}

    id-length:
      - 2
      - { properties: 'never', exceptions: ['x', 'y', 'i', '_', 'e'] }

    jsx-quotes: [2, 'prefer-single']
    react/jsx-filename-extension: 0
    react/prefer-stateless-function: 0
    react/jsx-uses-react: 2
    react/jsx-uses-vars: 2
    react/jsx-first-prop-new-line: [2, 'multiline']
    react/jsx-indent-props: [2, 2]
    react/react-in-jsx-scope: 2
    react/jsx-curly-spacing: [2, 'always']
    react/jsx-equals-spacing: [2, 'always']
    react/forbid-prop-types:
      - 2
      - forbid: ['any', 'array']
    react/sort-comp:
      - 2
      -
        groups:
          lifecycle:
            - displayName
            - propTypes
            - contextTypes
            - childContextTypes
            - mixins
            - statics
            - defaultProps
            - state
            - constructor
            - getDefaultProps
            - getInitialState
            - getChildContext
            - componentWillMount
            - componentDidMount
            - componentWillReceiveProps
            - shouldComponentUpdate
            - componentWillUpdate
            - componentDidUpdate
            - componentWillLeave
            - componentWillUnmount
What did you do? Please include the actual source code causing the issue.
import AppNavigator from './AppNavigator';

const initialState = AppNavigator.router.getStateForAction(
  AppNavigator.router.getActionForPathAndParams('Login'),
);

export function reducer(state = initialState, action) {
  const nextState = AppNavigator.router.getStateForAction(action, state);

  return nextState || state;
}
What did you expect to happen?
I expected eslint to lint my code
What actually happened? Please include the actual, raw output from ESLint.
$(yarn bin)/eslint js/**/*.js *.js
Cannot read property 'value' of null
TypeError: Cannot read property 'value' of null
    at Object.isClosingBraceToken (/Users/outpunk/Code/App/node_modules/eslint/lib/ast-utils.js:364:17)
    at isBlockLikeStatement (/Users/outpunk/Code/App/node_modules/eslint/lib/rules/padding-line-between-statements.js:96:36)
    at Object.test (/Users/outpunk/Code/App/node_modules/eslint/lib/rules/padding-line-between-statements.js:331:37)
    at match (/Users/outpunk/Code/App/node_modules/eslint/lib/rules/padding-line-between-statements.js:473:41)
    at getPaddingType (/Users/outpunk/Code/App/node_modules/eslint/lib/rules/padding-line-between-statements.js:489:21)
    at Linter.verify (/Users/outpunk/Code/App/node_modules/eslint/lib/rules/padding-line-between-statements.js:551:30)
    at emitOne (events.js:115:13)
    at Linter.emit (events.js:210:7)
    at NodeEventGenerator.applySelector (/Users/outpunk/Code/App/node_modules/eslint/lib/util/node-event-generator.js:265:26)
    at NodeEventGenerator.applySelectors (/Users/outpunk/Code/App/node_modules/eslint/lib/util/node-event-generator.js:292:22)



What changes did you make? (Give an overview)
I have added check for null value of lastToken at isBlockLikeStatement in lib/rules/padding-line-between-statements.js
Is there anything you'd like reviewers to focus on?
No2H
(cdb82f2de35e1e6e4d7a40e018b257996f1079c42017-07-30T04:26:27Z221166:≠
2017-06-16T10:15:09ZîThanks for the pull request, @outpunk! I took a look to make sure it's ready for merging and found some changes are needed:

The commit summary must be 72 characters or shorter. Please check out our guide for how to properly format your commit summary and update it on this pull request.

Can you please update the pull request to address these?
(More information can be found in our pull request guide.):;
2017-06-16T10:15:09Z#All committers have signed the CLA.:
2017-06-16T10:16:43ZLGTM:
2017-06-16T10:19:27ZLGTM:Æ
2017-06-16T22:15:05ZïIs the issue still present if you just use default parser and not babel-eslint?
Asking because I want to makesure its not an issue with babel-eslint.:R
2017-06-17T05:48:19Z:@gyandeeps Can't reproduce today, with both of the parsers:U
2017-06-19T07:26:37Z=@gyandeeps reproduced, the same thing with the default parser:,
2017-06-30T07:09:19Z@gyandeeps any news?:Ç
2017-06-30T07:18:58Zj@outpunk Can you add a test for this change, which fails without your code change and passes with? Thanks!:/
2017-06-30T07:23:43Z@platinumazure I'll try:ú
2017-06-30T17:24:47ZÉMarking as accepted because it is the same bug as #8839.
@outpunk Hi! I missed this PR and also made a PR to fix this, though I like your solution better. I'm going to close my PR in favor of this one.
I don't think all my tests need to be ported over because this is a more generic solution (which is why I like it better!). I think the important test from the tests I wrote is to check that this is valid:
{
     code: "function test() {};",
     options: [
         { blankLine: "always", prev: "block-like", next: "block-like" }
     ]
},
The other tests are tied more to my specific implementation, so I don't think you need to add those.:w
2017-06-30T18:18:36Z_@kaicataldo thanks! I'll add your tests in a couple of days ‚Äî I'm a bit busy until next week.:.
2017-07-21T17:56:52Z@outpunk Friendly ping:ä
2017-07-21T18:28:04ZÒThanks, will do tomorrow
‚Ä¶
 On 21 Jul 2017, at 21:56, Ilya Volodin ***@***.***> wrote:

 @outpunk Friendly ping

 ‚Äî
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub, or mute the thread.:
2017-07-22T06:21:40ZLGTM::
2017-07-22T06:22:54Z"@platinumazure I've added the test:\
2017-07-23T20:31:53ZDRestarting the Travis CI tests because it looks like they timed out.:0
2017-07-30T04:26:33ZThanks for contributing!:-
2017-07-30T05:30:13ZThanks for accepting!√U⁄=2017-01-11T04:18:10Z"2017-01-12T18:31:15Z*∑What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (see #7893)
What changes did you make? (Give an overview)
This fixes an issue where astUtils.getLocationFromRangeIndex and astUtils.getRangeIndexFromLocation were using a regular expression susceptible to catastrophic backtracking. The match would take quadratic time in the length of the last line of the file. Since the file in #7893 contains a 1.5 million character source map URL on the last line, rules like no-multiple-empty-lines would hang when using ast-utils to split the file into lines.
This issue only applies to files without trailing newlines, and is only noticable when the last line of the file contains more than 30000 characters or so. Since only a few rules use these astUtils functions, this would only appear when either no-useless-escape or no-multiple-empty-lines reports an error for the file.
Simplified example: Node 7.4.0 hangs when evaluating this expression.
/[^\n]*\n/.test('A'.repeat(1000000))
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(427543afb4bf024869b8a243c793824eca73ad672017-01-12T18:31:15Z11638619:
2017-01-11T04:18:11ZLGTM:Õ
2017-01-11T04:18:11Z¥@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @kaicataldo and @alangpierce to be potential reviewers.:
2017-01-12T00:21:08ZLGTMŸ±22016-06-17T20:01:13Z"2016-06-19T02:36:04Z*®What version of ESLint are you using?
2.13.0
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
{
  "rules": {
    "no-multiple-empty-lines": [2, { max: 2, maxEOF: 1 }]
  }
}
What did you do? Please include the actual source code causing the issue.
Run eslint against a file with no line breaks.
var a = 5;
What did you expect to happen?
Run without error
What actually happened? Please include the actual, raw output from ESLint.
Cannot read property 'length' of null
TypeError: Cannot read property 'length' of null
    at /Users/strawbrary/projects/chell/node_modules/eslint/lib/rules/no-multiple-empty-lines.js:101:47
    at Array.forEach (native)
    at EventEmitter.checkBlankLines (/Users/strawbrary/projects/chell/node_modules/eslint/lib/rules/no-multiple-empty-lines.js:100:23)
    at emitOne (events.js:101:20)
    at EventEmitter.emit (events.js:188:7)
    at NodeEventGenerator.leaveNode (/Users/strawbrary/projects/chell/node_modules/eslint/lib/util/node-event-generator.js:49:22)
    at CodePathAnalyzer.leaveNode (/Users/strawbrary/projects/chell/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:627:23)
    at CommentEventGenerator.leaveNode (/Users/strawbrary/projects/chell/node_modules/eslint/lib/util/comment-event-generator.js:110:23)
    at Controller.traverser.traverse.leave (/Users/strawbrary/projects/chell/node_modules/eslint/lib/eslint.js:908:36)
    at Controller.__execute (/Users/strawbrary/projects/chell/node_modules/estraverse/estraverse.js:397:31)

Submitted #6451 as a fix.2I
(1e185b95a3c7ea0f0df77cbdb82c47d9588342542016-06-19T02:36:02Z2499332:0
2016-06-17T22:37:02ZYikes, sorry about that.Œë©D2017-06-16T05:57:32Z"2017-06-18T23:53:08Z*ëWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (#8744)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:



What changes did you make? (Give an overview)
afbea78 accidentally introduced a regression where parsers would get passed additional "default" options even when the user did not specify them. This updates the default parserOptions to prevent any unexpected options from getting passed to parsers.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(7a1bc3893ab55d0ab16ccf4b7a62c85329ab40072017-06-18T23:53:07Z11638619:
2017-06-16T05:57:33ZLGTM:
2017-06-17T10:13:23ZLGTMÛÚ:2016-11-05T01:26:56Z"2016-11-09T20:33:25Z*≈Tell us about your environment

ESLint Version: 3.9.1
Node Version: 4.5.0
npm Version: 2.15.11

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
"curly": [2, "multi-or-nest", "consistent"]

What did you do? Please include the actual source code causing the issue.
if (foo) {
  // some comment
  bar();
}
What did you expect to happen?
ESLint should not give an error for having a brace because the block is multi-line, however ESLint is treating it as a single-line statement and does not observe the comment.
What actually happened? Please include the actual, raw output from ESLint.
Unnecessary { after 'if' condition.
ESLint essentially wants no braces which is confusing to myself (and likely other JS readers):
if (foo)
  // some comment
  bar();


I'm happy to work on this bug as my project at work is interested in using this rule. I'm thinking it will be a fairly simple to fix, along the lines of #63962I
(0d60db771446cbc2ab6a905da202e6fdf1d501482016-11-09T20:33:24Z7344640:I
2016-11-05T01:30:45Z1Thanks for the report; this does seem like a bug.:ø
2016-11-05T07:30:20Z¶It seems a bug.
I felt the name multi-or-nest is confusing since the rule has the option multi and multi-line then the multi-or-nest's behavior is near to multi-line.:ü
2016-11-05T07:45:02ZÜI agree the naming is confusing and I had to re-read the examples a few times to fully understand the differences.  If it helps, the reason why our project is using multi-or-nest is because through some (strange-ish) transitive logic, we follow a variation of the Google C++ style guide [0] which specifies that "In general, curly braces are not required for single-line statements". I'm not sure what a better name is, perhaps "multi-line-statement"?
[0] https://google.github.io/styleguide/cppguide.html#ConditionalsÃj´π12016-06-06T21:45:32Z"2016-06-15T18:26:05Z*”What version of ESLint are you using?
2.11.1
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
e:\DOC\prg\js\node\.eslintrc.json
{
  "root": true,

  "extends": [
    "eslint:recommended",
    "airbnb-base"
  ],

  "parserOptions": {
    "ecmaVersion": 7,
    "sourceType": "script"
  },

  "env": {
    "browser": false,
    "es6": true,
    "node": true
  },

  "rules": {
    "eqeqeq": "error",
    "no-console": "off",
    "no-extra-parens": ["error", "all"],
    "quotes": ["error", "single"],
    "spaced-comment": ["error", "always", { "exceptions": ["/", "*"] }],
    "strict": ["error", "global"]
  }
}
What did you do? Please include the actual source code causing the issue.
I have a simple test script in the subdirectory relative to the config directory:
e:\DOC\prg\js\node\-test\test.js:
'use strict';



console.log(1);

eslint output (to be sure eslint really uses all the rules frome the additional configs):
e:\DOC\prg\js\node\-test>eslint test.js

E:\DOC\prg\js\node\-test\test.js
  4:2  error  More than 2 blank lines not allowed  no-multiple-empty-lines

‚úñ 1 problem (1 error, 0 warnings)

I want to see all the config set via eslint --print-config test.js.
What did you expect to happen?
All the rules from .eslintrc.json + eslint:recommended +  airbnb-base should be shown.
What actually happened? Please include the actual, raw output from ESLint.
The output is:
{
  "globals": {},
  "env": {},
  "rules": {},
  "parserOptions": {}
}
However, if I place test.js in the same directory with .eslintrc.json, the output is a big proper rule set.2G
(8ec89c86a9ec33855b24b512b64ce3e5b517bb4a2016-06-15T18:26:02Z72561:–
2016-06-06T22:44:48Z∑The test case may be simplified: call eslint --print-config . from the config file directory and from a subdirectory ‚Äî the first output is the the real set, the second one is empty.:i
2016-06-06T22:52:25ZQDebug outputs from the config file directory:

Debug outputs from a subdirectory::ì
2016-06-07T00:35:49Z˙I'm really confused about showing the linting messages when the issue seems to be about --print-config. Am I missing something?

Is this about --print-config specifically?
Do you believe the wrong configuration is being loaded/used for your use case?:ò
2016-06-07T00:49:40ZˇI've put the linting messages as a proving that without --print-config eslint uses all the triple rule set even being called frome a subdirectory. However, just adding --print-config to call from the same subdirectory somehow cleans rule set for printing.:s
2016-06-07T00:56:47Z[I've added a note before the linting message. Is it clear now? Sorry, my English is clumsy(:©G
2016-06-07T01:05:16ZêGVerified. Interesting. I though --print-config was running after configuration resolution process. If that would be the case, this should be happening.
Test case:
Running eslint --print-config Makefile.js from eslint root directory results in:
{
  "globals": {
    "__dirname": false,
    "__filename": false,
    "arguments": false,
    "Buffer": false,
    "clearImmediate": false,
    "clearInterval": false,
    "clearTimeout": false,
    "console": false,
    "exports": true,
    "GLOBAL": false,
    "global": false,
    "Intl": false,
    "module": false,
    "process": false,
    "require": false,
    "root": false,
    "setImmediate": false,
    "setInterval": false,
    "setTimeout": false
  },
  "env": {
    "node": true
  },
  "rules": {
    "no-alert": "error",
    "no-array-constructor": "error",
    "no-bitwise": "off",
    "no-caller": "error",
    "no-case-declarations": "error",
    "no-catch-shadow": "off",
    "no-class-assign": "error",
    "no-cond-assign": "error",
    "no-confusing-arrow": "off",
    "no-console": "error",
    "no-const-assign": "error",
    "no-constant-condition": "error",
    "no-continue": "off",
    "no-control-regex": "error",
    "no-debugger": "error",
    "no-delete-var": "error",
    "no-div-regex": "off",
    "no-dupe-class-members": "error",
    "no-dupe-keys": "error",
    "no-dupe-args": "error",
    "no-duplicate-case": "error",
    "no-duplicate-imports": "off",
    "no-else-return": "off",
    "no-empty": "error",
    "no-empty-character-class": "error",
    "no-empty-function": "off",
    "no-empty-pattern": "error",
    "no-eq-null": "off",
    "no-eval": "error",
    "no-ex-assign": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-boolean-cast": "error",
    "no-extra-label": "off",
    "no-extra-parens": "off",
    "no-extra-semi": "error",
    "no-fallthrough": "error",
    "no-floating-decimal": "error",
    "no-func-assign": "error",
    "no-implicit-coercion": "off",
    "no-implicit-globals": "off",
    "no-implied-eval": "error",
    "no-inline-comments": "off",
    "no-inner-declarations": "error",
    "no-invalid-regexp": "error",
    "no-invalid-this": "error",
    "no-irregular-whitespace": "error",
    "no-iterator": "error",
    "no-label-var": "error",
    "no-labels": "error",
    "no-lone-blocks": "error",
    "no-lonely-if": "off",
    "no-loop-func": "error",
    "no-mixed-requires": "error",
    "no-mixed-spaces-and-tabs": [
      "error",
      false
    ],
    "linebreak-style": "off",
    "no-multi-spaces": "error",
    "no-multi-str": "error",
    "no-multiple-empty-lines": "off",
    "no-native-reassign": "error",
    "no-negated-condition": "off",
    "no-negated-in-lhs": "error",
    "no-nested-ternary": "error",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-object": "error",
    "no-new-require": "error",
    "no-new-symbol": "error",
    "no-new-wrappers": "error",
    "no-obj-calls": "error",
    "no-octal": "error",
    "no-octal-escape": "error",
    "no-param-reassign": "off",
    "no-path-concat": "error",
    "no-plusplus": "off",
    "no-process-env": "off",
    "no-process-exit": "error",
    "no-proto": "error",
    "no-prototype-builtins": "off",
    "no-redeclare": "error",
    "no-regex-spaces": "error",
    "no-restricted-globals": "off",
    "no-restricted-imports": "off",
    "no-restricted-modules": "off",
    "no-restricted-syntax": "off",
    "no-return-assign": "error",
    "no-script-url": "error",
    "no-self-assign": "error",
    "no-self-compare": "off",
    "no-sequences": "error",
    "no-shadow": "error",
    "no-shadow-restricted-names": "error",
    "no-whitespace-before-property": "off",
    "no-spaced-func": "error",
    "no-sparse-arrays": "error",
    "no-sync": "off",
    "no-ternary": "off",
    "no-trailing-spaces": "error",
    "no-this-before-super": "error",
    "no-throw-literal": "off",
    "no-undef": "error",
    "no-undef-init": "error",
    "no-undefined": "error",
    "no-unexpected-multiline": "error",
    "no-underscore-dangle": [
      "error",
      {
        "allowAfterThis": true
      }
    ],
    "no-unmodified-loop-condition": "error",
    "no-unneeded-ternary": "off",
    "no-unreachable": "error",
    "no-unsafe-finally": "off",
    "no-unused-expressions": "error",
    "no-unused-labels": "error",
    "no-unused-vars": [
      "error",
      {
        "vars": "all",
        "args": "after-used"
      }
    ],
    "no-use-before-define": "error",
    "no-useless-call": "off",
    "no-useless-computed-key": "off",
    "no-useless-concat": "error",
    "no-useless-constructor": "off",
    "no-useless-escape": "off",
    "no-useless-rename": "off",
    "no-void": "off",
    "no-var": "off",
    "no-warning-comments": "off",
    "no-with": "error",
    "no-magic-numbers": "off",
    "array-bracket-spacing": "off",
    "array-callback-return": "error",
    "arrow-body-style": "off",
    "arrow-parens": "off",
    "arrow-spacing": "off",
    "accessor-pairs": "off",
    "block-scoped-var": "off",
    "block-spacing": "error",
    "brace-style": [
      "error",
      "1tbs"
    ],
    "callback-return": [
      "error",
      [
        "cb",
        "callback",
        "next"
      ]
    ],
    "camelcase": [
      "error",
      {
        "properties": "never"
      }
    ],
    "comma-dangle": "error",
    "comma-spacing": "error",
    "comma-style": [
      "error",
      "last"
    ],
    "complexity": [
      "off",
      11
    ],
    "computed-property-spacing": "off",
    "consistent-return": "error",
    "consistent-this": "off",
    "constructor-super": "error",
    "curly": [
      "error",
      "all"
    ],
    "default-case": "error",
    "dot-location": "off",
    "dot-notation": [
      "error",
      {
        "allowKeywords": true
      }
    ],
    "eol-last": "error",
    "eqeqeq": "error",
    "func-names": "off",
    "func-style": [
      "error",
      "declaration"
    ],
    "generator-star-spacing": "off",
    "global-require": "off",
    "guard-for-in": "error",
    "handle-callback-err": [
      "error",
      "err"
    ],
    "id-length": "off",
    "indent": [
      "error",
      4,
      {
        "SwitchCase": 1
      }
    ],
    "init-declarations": "off",
    "jsx-quotes": "off",
    "key-spacing": [
      "error",
      {
        "beforeColon": false,
        "afterColon": true
      }
    ],
    "keyword-spacing": "error",
    "lines-around-comment": [
      "error",
      {
        "beforeBlockComment": true,
        "afterBlockComment": false,
        "beforeLineComment": true,
        "afterLineComment": false
      }
    ],
    "max-depth": "off",
    "max-len": "off",
    "max-nested-callbacks": "off",
    "max-params": "off",
    "max-statements": "off",
    "max-statements-per-line": "off",
    "new-cap": "error",
    "new-parens": "error",
    "newline-after-var": "error",
    "newline-before-return": "off",
    "newline-per-chained-call": "off",
    "object-curly-spacing": [
      "off",
      "never"
    ],
    "object-property-newline": "off",
    "object-shorthand": "off",
    "one-var": "off",
    "one-var-declaration-per-line": "error",
    "operator-assignment": "off",
    "operator-linebreak": "off",
    "padded-blocks": "off",
    "prefer-arrow-callback": "off",
    "prefer-const": "off",
    "prefer-reflect": "off",
    "prefer-rest-params": "off",
    "prefer-spread": "off",
    "prefer-template": "off",
    "quote-props": [
      "error",
      "as-needed"
    ],
    "quotes": [
      "error",
      "double"
    ],
    "radix": "error",
    "id-match": "off",
    "id-blacklist": "off",
    "require-jsdoc": "error",
    "require-yield": "off",
    "semi": "error",
    "semi-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "sort-vars": "off",
    "sort-imports": "off",
    "space-before-blocks": "error",
    "space-before-function-paren": [
      "error",
      "never"
    ],
    "space-in-parens": "error",
    "space-infix-ops": "error",
    "space-unary-ops": [
      "error",
      {
        "words": true,
        "nonwords": false
      }
    ],
    "spaced-comment": [
      "error",
      "always",
      {
        "exceptions": [
          "-"
        ]
      }
    ],
    "strict": [
      "error",
      "global"
    ],
    "template-curly-spacing": "off",
    "unicode-bom": "off",
    "use-isnan": "error",
    "valid-jsdoc": [
      "error",
      {
        "prefer": {
          "return": "returns"
        }
      }
    ],
    "valid-typeof": "error",
    "vars-on-top": "off",
    "wrap-iife": "error",
    "wrap-regex": "off",
    "yield-star-spacing": "off",
    "yoda": [
      "error",
      "never"
    ]
  },
  "parserOptions": {
    "ecmaFeatures": {
      "globalReturn": true
    }
  },
  "ecmaFeatures": {},
  "extends": "./packages/eslint-config-eslint/default.yml",
  "root": true
}
Running eslint --print-config cli.js from Eslint's lib directory, results in:
{
  "globals": {},
  "env": {},
  "rules": {},
  "parserOptions": {}
}:,
2016-06-08T21:38:46ZI am working on this:
2016-06-08T22:03:31Z◊I'm a bit confused here - what are we saying is the bug?
I'm pretty sure --print-config requires that you pass a file and not a pattern, so eslint --print-config . won't work while eslint --print-config foo.js will.:¶
2016-06-08T22:13:13ZçDoes . not mean 'current directory' for eslint? Whatever the case, you can replace . by any path ‚Äî the bug is still here: calling from config file directory and calling  from any subdirectory relative to config file directory have different outputs for the same path.:ì
2016-06-08T22:15:07Z˙@nzakas I think the problem is if you have foo.js and subfolder/bar.js, --print-config simply doesn't work when you pass in subfolder/bar.js (or any path where the file is not in the same folder as the config file). See this comment for more details.:Ñ
2016-06-08T22:16:52Zl@nzakas Here is a failing test case using a file, running from lib:
../bin/eslint.js --print-config ./cli.js:˛
2016-06-08T22:21:05ZÂ@platinumazure the bug depends not on path and not on relation between path and config file, but from relation between CWD and  config file. If you call eslint for subfolder/bar.js from the same folder with config file, it is OK.:Ä
2016-06-09T00:20:24ZÁ@nzakas That's what I assumed as well. However, that's not what is happening. eslint --print-config . is working in the case that you have .eslintrc in the current directory, which is strange and not what I expected. But the tests that I posted are done on the file, not on the pattern. So it seems that there might be two bugs here. First one, --print-config on a file in the subdirectory returns an empty object. Second one, --print-config seems to work on patterns, when it shouldn't.Â
Û:2016-11-05T02:04:41Z"2016-11-09T20:33:25Z*ËWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
Fixes #7538
What changes did you make? (Give an overview)
Fixes the curly rule under the "multi-or-nest" setting, includes tests, and updates docs with an example
Is there anything you'd like reviewers to focus on?
This only addresses leading comments and not trailing comments, but I think trailing comment is a bit different because the intent is more ambiguous. For example:
if (foo)
  baz();
  // line of comment
bar();
It's unclear if the comment is describing the line above or mis-indented and describing the line below. In my experience, intentional trailing comments are rare.2I
(0d60db771446cbc2ab6a905da202e6fdf1d501482016-11-09T20:33:24Z7344640:;
2016-11-05T02:04:42Z#All committers have signed the CLA.:∆
2016-11-05T02:04:42Z≠@wwwillchen, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @not-an-aardvark and @nzakas to be potential reviewers.:
2016-11-05T02:04:42ZLGTM:
2016-11-07T19:43:16ZLGTM:
2016-11-07T21:05:24ZLGTM:
2016-11-08T22:54:35ZLGTMÏ	∑≤E2017-07-05T18:09:26Z"2017-07-08T02:03:55Z*¶Tell us about your environment

ESLint Version: 4.1.1
Node Version: 8.1.3
npm Version: 5.0.4

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

Configuration

root: true

env:
  node: true
  es6: true

parserOptions:
  ecmaVersion: 2017

rules:
  indent: [2, 2, {ArrayExpression: first,
                  CallExpression: {arguments: first},
                  FunctionDeclaration: {parameters: first},
                  FunctionExpression: {parameters: first},
                  MemberExpression: off,
                  ObjectExpression: first,
                  SwitchCase: 1}]

What did you do? Please include the actual source code causing the issue.

for (var handle; handle = this.handles.shift(); handle.close())
  ;
What did you expect to happen?
I expected indentation of the ; that represents the body of the for loop to be accepted at 2 spaces of indentation.
What actually happened? Please include the actual, raw output from ESLint.

2:1  error  Expected indentation of 0 spaces but found 2  indent2J
(975dacfdec9ee664e83337c1a8c360211a0efb282017-07-08T02:03:48Z11638619:C
2017-07-05T20:07:00Z+Thanks for reporting, I can reproduce this.–^Ä;2016-11-06T19:20:40Z"2016-11-09T19:20:56Z*ΩWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7525


What changes did you make? (Give an overview)
This updates space-infix-ops to handle in and instanceof correctly. Due to a bug, it previously did not report any cases with in or instanceof operators.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(5003b1cf6f37c1a89e8dedf446576ab8925791732016-11-09T19:20:55Z11638619:≈
2016-11-06T19:20:41Z¨@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @gyandeeps and @nzakas to be potential reviewers.:
2016-11-06T19:20:41ZLGTM:™
2016-11-06T20:14:00ZëI might be missing something, but I don't think this rule has an option going the other way; it only requires spaces, but it can't disallow them.£∑Ò<2016-12-19T19:36:18Z"2016-12-24T21:05:27Z*ü	What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (see #7789)
What changes did you make? (Give an overview)
']' is only allowed to be unescaped in regular expressions when the engine implements Annex B, a legacy part of the ECMA262 spec which is only normative for browsers. In engines that do not implement Annex B, regular expressions like /]/ are a syntax error. Since ESLint can't tell what engine the code will run on, it shouldn't consider escaping ] to be "useless" since it's only useless on engines that implement Annex B, and only in regular expressions that don't contain the unicode flag. (For example, the regular expression /]/u is a syntax error even on engines that implement Annex B.)
This updates no-useless-escape to avoid reporting escaped ] in regular expressions.
Also see: #7656 (comment), #7789
Is there anything you'd like reviewers to focus on?
I'd appreciate if someone could verify that this is the right solution. I was also against relaxing this before I realized that the ] behavior was only specified in Annex B. I've requested a review from @mysticatea and @platinumazure since we've discussed this behavior in the past.2J
(f20b9e91b9ddc65418939ac8e242e2ff0dad5f022016-12-24T21:05:27Z11638619:Ã
2016-12-19T19:36:20Z≥@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @onurtemizkan, @kaicataldo and @vitorbal to be potential reviewers.:
2016-12-19T19:36:20ZLGTM:ì
2016-12-23T08:22:16Z{I confirmed it.

SyntaxCharacter (one of ^$\.*+?()[]{}|) cannot appears as an Atom production. This escape \] is necessary.‡	¯;2016-11-28T21:04:03Z"2016-11-30T12:54:15Z*ÛWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 7.2.0
npm Version: 3.10.9

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
none
What did you do? Please include the actual source code causing the issue.
/* eslint no-useless-escape: error */

var foo = "foo\‚Ä®bar"; // Note: There is a \u2028 character after the backslash.
What did you expect to happen?
No errors.
What actually happened? Please include the actual, raw output from ESLint.
3:15  error  Unnecessary escape character: \‚Ä®  no-useless-escape

What changes did you make? (Give an overview)
This updates no-useless-escape to treat the \u2028 and \u2029 linebreak characters as valid escapes.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(0a2a7fdf706403989a9c79741e3a54d77d7b2b262016-11-30T12:54:15Z11638619:
2016-11-28T21:04:04ZLGTM:Ã
2016-11-28T21:04:06Z≥@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @kaicataldo, @onurtemizkan and @vitorbal to be potential reviewers.˙±“A2017-04-03T22:22:52Z"2017-04-04T17:27:33Z*ÙWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8401)



What changes did you make? (Give an overview)
Previously, no-multiple-empty-lines would crash if it tried to remove a trailing newline followed by a space from the end of a file. This commit fixes the crash.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(936af661199e51664d5ac28dd4af5cfe1b0e20c12017-04-04T17:27:32Z11638619:∆
2017-04-03T22:22:53Z≠@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @RRMoelker, @alberto and @gcochard to be potential reviewers.:
2017-04-03T22:22:53ZLGTM:
2017-04-04T02:57:35ZLGTM»Çê92016-10-05T22:23:06Z"2016-10-07T22:18:06Z*ÕTell us about your environment

ESLint Version: 3.7.1
Node Version: 6.4.0
npm Version: 3.10.3

What parser (default, Babel-ESLint, etc.) are you using?
Babel, see full configuration
Please show your full configuration:
{
    "parserOptions": {
        "ecmaVersion": 6,
        "ecmaFeatures": {
            "jsx": true,
            "impliedStrict": true
        },
        "sourceType": "module"
    },
    "rules": {
        "no-multiple-empty-lines": ["warn", {"max": 1}]
    },
    "plugins": [
        "react"
    ]
}
What did you do? Please include the actual source code causing the issue.
import './baz';


function foo() {
  `${s}-foo`;
}

function bar() {
  `${x} bar`;
}
I ran eslint as follows:
$ eslint static/dodgy_direct.jsx --ext .jsx -c .eslint.format.json --no-eslintrc --fix
What did you expect to happen?
Duplicate blank line should be removed, so the correct output should be:
import './baz';

function foo() {
  `${s}-foo`;
}

function bar() {
  `${x} bar`;
}
What actually happened? Please include the actual, raw output from ESLint.
File was unchanged, with no errors reported.2J
(72f394d5c059f8c04510ddb028b09540da845bbe2016-10-07T22:18:03Z11638619:©
2016-10-05T22:42:02ZêThanks for the report. I can reproduce this issue.
(To clarify, I don't think the problem is with the autofixer in particular -- the rule simply isn't reporting an error at all with that code, even when the --fix flag is omitted.)
Reduced test case:
'foo';


`bar`;
`baz`;:À
2016-10-06T05:13:09Z≤For my sanity, could we definitively clarify whether the issue is "rule doesn't report" vs "rule reports but doesn't fix", and edit that into the title and original post? Thanks!àAà:2016-10-23T09:29:52Z"2016-10-24T23:56:54Z*ÄWhat is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix (template)
See #7122 for the template.
What changes did you make? (Give an overview)
This PR changes no-extra-parens as reporting parentheses around octal integer literals.
(0123).a    // Gratuitous parentheses around expression.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2I
(3813988e5aa82d3b8b19ec9a99f163b910c1ae4b2016-10-24T23:56:54Z1937871:
2016-10-23T09:29:53ZLGTM:«
2016-10-23T09:29:53ZÆ@mysticatea, thanks for your PR! By analyzing the history of the files in this pull request, we identified @alberto, @vitorbal and @not-an-aardvark to be potential reviewers.:
2016-10-24T23:57:02ZThanks!‘2ƒπ32016-07-03T17:01:14Z"2016-07-05T19:18:37Z*”What version of ESLint are you using?
v3.0.0
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
eslint --rule indent:[2,2,{outerIIFEBody:1}] file.js
What did you do? Please include the actual source code causing the issue.
https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb-base/test/test-base.js
import fs from 'fs';
import path from 'path';
import test from 'tape';

import index from '../';

const files = { index };

fs.readdirSync(path.join(__dirname, '../rules')).forEach(name => {
  files[name] = require(`../rules/${name}`); // eslint-disable-line global-require
});

Object.keys(files).forEach(name => {
  const config = files[name];

  test(`${name}: does not reference react`, t => {
    t.plan(2);

    // scan plugins for react and fail if it is found
    const hasReactPlugin = Object.prototype.hasOwnProperty.call(config, 'plugins') &&
      config.plugins.indexOf('react') !== -1;
    t.notOk(hasReactPlugin, 'there is no react plugin');

    // scan rules for react/ and fail if any exist
    const reactRuleIds = Object.keys(config.rules)
      .filter(ruleId => ruleId.indexOf('react/') === 0);
    t.deepEquals(reactRuleIds, [], 'there are no react/ rules');
  });
});
What did you expect to happen?
No warnings.
What actually happened? Please include the actual, raw output from ESLint.
$PWD/packages/eslint-config-airbnb-base/test/test-base.js
  10:3  error  Expected indentation of 1 space character but found 2  indent
  14:3  error  Expected indentation of 1 space character but found 2  indent
  16:3  error  Expected indentation of 1 space character but found 2  indent
There are two problems here:

the warned lines are not actually file-level IIFEs - the file doesn't have an IIFE at all.
outerIIFEBody is set to 1 - this should be a multiplier of 1 on the indentation config of "2 spaces" - the errors indicate that it wants "1 space" which should never be required when the base indent is "2".2G
(a2cfa1bf372e96ecb926169529d5e873ec8d19522016-07-05T19:18:34Z38546:!
2016-07-03T21:51:55Z	Confirmed:€
2016-07-03T22:03:09Z¬@eslint/eslint-team do you agree on number 2, that the option should be configured as a multiplier of the indentation (in the same way as the other options), and not directly as the indent size?:µ
2016-07-03T22:08:54Zú@alberto It's consistent with the current options (so possibly the intended design), but I still think we should abolish multipliers in that rule long-term.:»
2016-07-04T02:03:02ZØfalse negatives also happen - some top-level IIFEs are not recognized:
(function () {
var i;  // ok
})();

~function () {
var i;  // not
}();

!(function () {
var i;  // not
})();

!function () {
var i;  // not
}();

;(function () {
var i;  // ok
})();

var MyClass = (function () {
var i;  // not
})();:†
2016-07-04T02:49:05Zá@platinumazure why would we want to get rid of multipliers? Don't forget that "tab" is a valid option as well, and someone may want 3-space indentation.
Multipliers are the only thing that makes sense to me for this option, since everything should be measured in "indentation levels", and "what is an indentation level" is what's configured by the first option (ie, n spaces, or a hard tab).:œ
2016-07-04T02:56:27Z∂Because export statements, which technically can contain variable
declarations, render multipliers laughably useless in those cases.
Multipliers are useful in 2-space indentation but fall apart with nearly
anything else (e.g., there is no way to require 4 space indentation
everywhere but 6 spaces for const declarations that take more than one
like). The whole design is clearly wrong and needs to be redesigned from
the ground up.
I'm okay with allowing some things to be expressed in terms of indentation
levels, but we also need an "align" option (at least for space indentation
users). And it would be good to restructure the options so that numbers are
less magical and ambiguous. Speaking from an information architecture
perspective, it is not good that a number sometimes means number of spaces
and sometimes means number of indentation levels.
On Jul 3, 2016 7:49 PM, "Jordan Harband" notifications@github.com wrote:
@platinumazure https://github.com/platinumazure why would we want to get
rid of multipliers? Don't forget that "tab" is a valid option as well, and
someone may want 3-space indentation.
Multipliers are the only thing that makes sense to me for this option,
since everything should be measured in "indentation levels", and "what is
an indentation level" is what's configured by the first option (ie, n
spaces, or a hard tab).
‚Äî
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
#6585 (comment), or mute
the thread
https://github.com/notifications/unsubscribe/AARWevqo7_tAMjUgw0opa7XqcgTuWCy_ks5qSFiCgaJpZM4JD4oH
.:£
2016-07-04T03:02:11ZäIf we have an "align" option I hope we have a "never align" option - in my code, I absolutely forbid any indentation solely for alignment.:’
2016-07-04T19:34:42Zº@platinumazure let's keep the scope of this issue narrow - there's no need to talk about future long-term possibilities in this context as it's confusing for everyone involved.
This option should definitely act like the others and be a multiplier. I'll take a look and see if it's something that can be fixed easily.:`
2016-07-04T20:36:35ZH@ljharb want to try this out and see if it does the trick for you? #6596:?
2016-07-04T20:46:09Z'@nzakas confirmed, no errors this time!:Q
2016-07-04T22:14:24Z9@nzakas should we also cover the cases @wojdyr mentioned?:«
2016-07-05T00:53:25ZÆI took the examples of IIFE from https://en.wikipedia.org/wiki/Immediately-invoked_function_expression, no idea if anyone is using the ones with unary operator.
I just tried the proposed fix -- it doesn't work on example from google style guide:
goog.scope(function() {
var Button = goog.ui.Button;
});:u
2016-07-05T04:08:33Z]@wojdyr in that case, that's not an IIFE - that's just a function passed to another function.:ô
2016-07-05T12:21:53ZÄ@ljharb yes, true. And since eslint-config-google doesn't look concerned with indentation of goog.scope it may not be important.:"
2016-07-05T19:23:01Z
Thank you!:í
2016-07-05T21:20:39ZzSorry, I missed @wojdyr's comment before I had made the fix. Please open a new issue if these are still a problem for you.ﬂê˝;2016-11-30T02:09:01Z"2017-04-24T08:59:24Z*ﬁTell us about your environment

ESLint Version: master
Node Version: 7.2.0
npm Version: 3.10.9

What parser (default, Babel-ESLint, etc.) are you using?
Please show your full configuration:
(none)
What did you do? Please include the actual source code causing the issue.

/* eslint no-self-compare: error */

foo.bar === foo.bar;
What did you expect to happen?
I expected ESLint to report an error for the self-comparison.
What actually happened? Please include the actual, raw output from ESLint.
No errors were reported.
I'm marking this as "evaluating" since I'm not sure whether it's intended behavior.2J
(d49acc309ad69d99db1e04e971c33a69fdf657da2017-04-24T08:59:20Z11638619ª7ı<2016-12-20T05:14:20Z"2016-12-23T18:42:16Z*‘What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (see #7790)
What changes did you make? (Give an overview)
This updates consistent-return to avoid reporting inconsistent returns in the constructor function of a ClassExpression or ClassDeclaration. The rule already ignores ES5 constructor functions, but it hadn't been updated to account for ES6 constructors yet.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(3004c1e2c561fe30389ae478bb4b18df324a13132016-12-23T18:42:15Z11638619:∆
2016-12-20T05:14:21Z≠@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @nzakas and @mysticatea to be potential reviewers.:
2016-12-20T05:14:21ZLGTM˘Çë92016-10-05T23:23:50Z"2016-10-07T22:18:03Z*ÎWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7312

Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
(n/a) I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
This commit is intended to change as little of the rule's logic as possible in order to fix the issue. I think this rule could use refactoring, which I plan to do afterwards (edit: see #7314). I made this commit based on the old logic to allow for an easier revert if the refactoring goes wrong somehow.
Bug explanation: The rule stores a list of strings containing the lines of a file, with whitespace trimmed from the start and end of each line. It detects an empty line by checking whether the trimmed line in its list is an empty string.
The rule also has to account for empty lines in template literals (see #2605). In order to do this, for each line in the file that overlaps a template literal, the rule tries to overwrite the corresponding value in its list of lines with something other than an empty string, to prevent it from detected as an empty line.
Due to a logical error, the rule was overwriting the strings at the beginning of its list of lines, rather than the lines that actually contained template literals.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(72f394d5c059f8c04510ddb028b09540da845bbe2016-10-07T22:18:03Z11638619:«
2016-10-05T23:23:52ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @RRMoelker and @gcochard to be potential reviewers.:
2016-10-05T23:23:52ZLGTM:
2016-10-06T01:53:33ZLGTM:Ñ
2016-10-06T01:56:39Zl(Corrected the commit message -- it previously had no-multi-empty-lines instead of no-multiple-empty-lines.)ó˚*2016-03-07T13:32:43Z"2016-03-11T16:51:35Z*ØWhat version of ESLint are you using?
v2.3.0
What configuration and parser (Espree, Babel-ESLint, etc.) are you using?
Default parser
What did you do? Please include the actual source code causing the issue.
This is an extremely rare case, but a user may carelessly fill an ESLint severity value with an array of the string like below:
const CLIEngine = require('eslint').CLIEngine;

new CLIEngine({
  useEslintrc: false,
  rules: {
    'comma-dangle': [['error'], 'never']
  }
});
What did you expect to happen?
new CLIEngine(...) should throw an error because ['error'] is, of course, not a valid severity according to the doc.
What actually happened? Please include the actual, raw output from ESLint.
new CLIEngine(...) doesn't throw any errors, because,

/^(?:off|warn|error)$/i.test(severity) always stringify non-string severity before testing.
String(['error']) returns 'error'. Unfortunately, that also matches /^(?:off|warn|error)$/i.

We should do stricter type checking for severity to fix this unexpected behavior. I can create a pull request for this issue.2G
(14a8b1c60476e90066b0fa1ddcf2f8a68415f2182016-03-11T16:51:35Z38546:6
2016-03-07T15:02:36ZLooks like an oversight to me.:W
2016-03-07T17:00:43Z?üëç for being more strict and throwing an error for this case.:W
2016-03-07T17:12:27Z?I suspect this code path isn't being run through the validator.:P
2016-03-09T10:00:20Z8I've just started to implement strict severity checking.:-
2016-03-09T12:29:32ZSubmitted a PR. #5527›±—A2017-04-03T21:11:22Z"2017-04-04T17:27:39Z*†Tell us about your environment

ESLint Version: 3.19.0
Node Version: 7.7.3
npm Version: 4.4.4

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:

module.exports = {
    "extends": "standard",
    "plugins": [
        "standard",
        "promise"
    ]
};

What did you do? Please include the actual source code causing the issue.

eslint --fix */**

What did you expect to happen?
Successful execution.
What actually happened? Please include the actual, raw output from ESLint.
Line number out of range (line 318 requested, but only 317 lines present).
RangeError: Line number out of range (line 318 requested, but only 317 lines present).
    at SourceCode.getIndexFromLoc (/usr/local/lib/node_modules/eslint/lib/util/source-code.js:389:19)
    at Object.fix (/usr/local/lib/node_modules/eslint/lib/rules/no-multiple-empty-lines.js:116:52)
    at RuleContext.report (/usr/local/lib/node_modules/eslint/lib/rule-context.js:127:34)
    at Program:exit.allLines.reduce.concat.reduce (/usr/local/lib/node_modules/eslint/lib/rules/no-multiple-empty-lines.js:108:37)
    at Array.reduce (native)
    at EventEmitter.Program:exit (/usr/local/lib/node_modules/eslint/lib/rules/no-multiple-empty-lines.js:93:22)
    at emitOne (events.js:101:20)
    at EventEmitter.emit (events.js:191:7)
    at NodeEventGenerator.applySelector (/usr/local/lib/node_modules/eslint/lib/util/node-event-generator.js:265:26)
    at NodeEventGenerator.applySelectors (/usr/local/lib/node_modules/eslint/lib/util/node-event-generator.js:294:22)2J
(936af661199e51664d5ac28dd4af5cfe1b0e20c12017-04-04T17:27:32Z11638619:£
2017-04-03T21:19:33ZäThanks for the report. It would be useful to have an example of code that causes this error -- can you try to figure out which file is causing it? (If you run eslint with the --debug flag and look for messages marked with eslint:cli-engine, you should see messages like "Processing /path/to/file". I think the last file that gets printed before the error would be the file causing the problem.):‹
2017-04-03T21:30:39Z√Thanks for that insight, @not-an-aardvark.
It appears that this error is consistently thrown if the file ends in a new line with a space character. When I delete the space, the error goes away.
Unfortunately, this pre-existing codebase in which I'm working oddly seems to have a lot of files that end in a new line + space.:C
2017-04-03T21:39:34Z+Thanks, I was able to reproduce this issue.:L
2017-10-19T09:13:34Z4This is still happening, so should this be reopened?:–
2017-10-19T09:29:57Z∑The specific case that caused this issue has been fixed. If there is another bug that is causing a similar error, feel free to create a new issue and fill out the bug report template.:X
2017-11-06T03:32:56Z@I can reproduce by add only two spaces at last line in any file.:u
2017-11-06T03:34:44Z]If you're encountering a bug, please create a new issue and fill out the bug report template.˙√œ2015-10-05T16:20:54Z"2015-10-08T18:05:37Z*¨export default (a, b)=> {
  console.log(a);
};

This code yields no errors.
Expected output is to get a no-unused-vars error for b variable.
Version is eslint 1.6.1
Settings are:
{
  "env": {
    "es6": true
  },
  "ecmaFeatures": {
    "modules": true
  },
  "rules": {
    "no-unused-vars": 2
  }
}2I
(f759e5de2519d16b17ae4ee415c52f8978f2e44f2015-10-08T05:25:23Z1937871:Ó
2015-10-05T16:21:04Z’Thanks for the issue! If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead

Requesting a new rule? Please see Proposing a New Rule for instructions.:[
2015-10-06T20:56:38ZCThank you for reporting.
I can reproduce this.
I will try to fix...«∑µE2017-07-06T03:52:21Z"2017-07-08T02:03:49Z*®What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8882)
What changes did you make? (Give an overview)
The indent rule contains some logic to ensure that semicolons at the start of a line are indented correctly when using semicolon-free style. For example, in the following code the semicolon on the second line is not indented, even though it's part of the bar() statement.
if (foo) bar()
; [1, 2, 3].map(foo)
Due to a bug, this logic also applied to semicolons in EmptyStatement nodes, resulting in an incorrect indentation for those semicolons. This commit fixes that bug.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(975dacfdec9ee664e83337c1a8c360211a0efb282017-07-08T02:03:48Z11638619:
2017-07-06T03:52:22ZLGTM©7Ó<2016-12-19T08:55:36Z"2016-12-23T18:42:22Z*£Tell us about your environment
ESLint: 3.12.2
Node: v4.6.2
yarn: 0.17.10
What parser (default, Babel-ESLint, etc.) are you using?
Babel-ESLint 7.1.1
Please show your full configuration:

parser: babel-eslint
rules:
  consistent-return: error

What did you do? Please include the actual source code causing the issue.

class A {
  constructor(b) {
    if (b) {
      return b;
    }
  }
}
What did you expect to happen?
The return shouldn't be a problem, as it's in a constructor.
ES5 constructors do not cause a problem:
function F(b) {
  if (b) {
    return b;
  }
}
What actually happened? Please include the actual, raw output from ESLint.
ESLint reports consistent-return2J
(3004c1e2c561fe30389ae478bb4b18df324a13132016-12-23T18:42:15Z11638619:â
2016-12-20T03:22:57Zcocsistent-return here means that you need to define which would be returned when b is Falsy.
I guest something like below will throw any error:
class A {
  constructor(b) {
    if (b) {
      return b;
    }
    return DEFAULT_VALUE;
  }
}:æ
2016-12-20T04:22:57Z•Correct. That passes. But it should match how it works for ES5 constructors and also what the docs imply:

This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the new operator) return the instantiated object implicitly if they do not return another object explicitly.

I just don't think it's been updated handle ES6 constructors in the same way.:Ä
2016-12-20T04:26:26ZÁThanks for the report. It looks like you're correct -- if the rule ignores functions that start with a capital letter because they're constructors, then it should probably ignore constructors in class definitions too.
Would you like to submit a pull request to fix it? (It's no problem if you're not able to, but we try to give people a chance to contribute.):i
2016-12-20T04:47:16ZQI would love to say yes but to be honest I just don't have the time. Apologies :(:I
2016-12-20T04:53:57Z1No worries, thanks again for reporting the issue!≤	∑Ì<2016-12-19T04:24:44Z"2016-12-24T21:05:33Z*›Tell us about your environment

ESLint Version: master
Node Version: 7.2.1
npm Version: 3.10.10

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  no-useless-escape: error
parserOptions:
  ecmaVersion: 6
What did you do? Please include the actual source code causing the issue.

/\]/u;
What did you expect to happen?
I expected no error to be reported. Although ] does not need to be escaped outside of character classes when the unicode flag is disabled, it does need to be escaped when the unicode flag is enabled. It looks like a SyntaxError occurs when the backslash is removed in this example:
/]/u; // SyntaxError
What actually happened? Please include the actual, raw output from ESLint.
ESLint reported an error:
1:2  error  Unnecessary escape character: \]  no-useless-escape

Related: #76562J
(f20b9e91b9ddc65418939ac8e242e2ff0dad5f022016-12-24T21:05:27Z11638619:—
2016-12-19T05:21:24Z∏See #7656 (comment)
It looks like the best fix for this would be to just allow \] in all regular expressions, since ] is only allowed to be unescaped in engines that implement Annex B.Ïb´42016-07-17T20:56:35Z"2016-07-22T21:05:19Z*ÌWhat version of ESLint are you using?

v3.1.0

What parser (default, Babel-ESLint, etc.) are you using?

default

Please show your full configuration:

nothing

What did you do? Please include the actual source code causing the issue.

Linted the following code:

/*eslint no-undef:error, no-use-before-define:error*/
/*eslint-env es6*/

let a = {a: []}
for (let a of a.a) {
}
for (let a in a) {
}
What did you expect to happen?
no-use-before-define rule should warn references on ForOfStatement#right or ForInStatement#right (i.e. a of of a.a and in a)
Those are similar to let a = a.
let a = a is warned by no-use-before-define rule. (It would throw reference errors in runtime because TDZ.)
What actually happened? Please include the actual, raw output from ESLint.

No errors.

Refs: https://esdiscuss.org/topic/redefining-a-let-variable-inside-a-for-loop-scope-doesnt-work2I
(5320a6c39890331499f3f46faf81ece6a29efce22016-07-22T21:05:19Z1937871ﬂVÏ<2016-12-17T18:20:58Z"2016-12-19T06:45:12Z*˜	What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

See #7787.


What changes did you make? (Give an overview)
With "func-call-spacing": ["error", "never"], ensure that autofixing only occurs if there are no line terminators in the spacing. This is to avoid conflicts with no-unexpected-multiline, which is indispensable for identifying potential problems in an ASI codebase.
Is there anything you'd like reviewers to focus on?
Two questions:

Should I update documentation to add auto-fix caveats (i.e., list what won't be fixed)? If so, do we have a standard way of doing that? (I'm not sure I need to because we never guarantee that all violations are fixable.)
Technically the warning count is unchanged but the perceived warning count would go up due to some violations no longer being auto-fixed. Is this still semver-patch since the actual pre-autofix warning count is unchanged, or should this be semver-minor? (I know this will be released semver-minor anyway, but I'm asking if I need to change the commit prefix to Update:.)2H
(428fbdfea7836ecb159cd690104ff06657cb0d332016-12-19T06:45:11Z284282:…
2016-12-17T18:20:59Z∞@platinumazure, thanks for your PR! By analyzing the history of the files in this pull request, we identified @btmills, @kaicataldo and @scriptdaemon to be potential reviewers.:
2016-12-17T18:20:59ZLGTM‘"ıÅ:2016-10-22T03:07:29Z"2016-10-27T23:50:50Z*ø	What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7424


What changes did you make? (Give an overview)
This updates no-useless-escape to verify whether a character needs to be escaped based on its position in a regular expression. Previously, no-useless-escape had a list of escapable characters for regexes, and it would never report cases where any of them were escaped. However, some characters only need to be escaped if they appear in a character class, and other characters only need to be escaped if they appear outside of a character class. This PR updates the rule to parse the regular expression to determine which characters are in character classes, and report the characters if they are escaped inside a character class and only need to be escaped outside a class (or vice versa).
Is there anything you'd like reviewers to focus on?
We should make sure that the REGEX_GENERAL_ESCAPES, REGEX_CHARCLASS_ESCAPES, and REGEX_NON_CHARCLASS_ESCAPES lists are correct.2J
(c675d7d619440a14c1581d81401ddaf0eef8eb202016-10-27T23:50:50Z11638619:Ã
2016-10-22T03:07:30Z≥@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @onurtemizkan, @vitorbal and @kaicataldo to be potential reviewers.:
2016-10-22T03:07:30ZLGTM:
2016-10-22T05:09:27ZLGTM:ø
2016-10-22T05:11:30Z¶@platinumazure Separated the complex behavior into its own function.
The number of linting errors this causes on the existing ESLint codebase is a bit concerning üòï:ß
2016-10-22T05:28:27ZéCI is failing due to this line and this line. Both of these seem to be valid linting errors, but why are they only getting reported on AppVeyor? Travis didn't report any issues, and I can't reproduce the linting error when running npm test locally.
edit: Actually, it doesn't seem to report any linting errors in ast-utils for me, even after clearing the cache. Maybe it's a Windows filepath thing?:
2016-10-22T06:16:11ZLGTM:
2016-10-23T01:53:29ZLGTM:
2016-10-23T01:59:49ZLGTM:
2016-10-23T02:06:14ZLGTM:Â
2016-10-23T02:07:46ZÃAs we find new problems, there are concerns about ecosystem impact. The rule is correct in reporting all the new useless escapes, but there may be some cases where users might want to intentionally allow (or prefer) some useless escapes for readability/maintainability. So we may need to consider carefully how best to release this.:ó
2016-10-23T02:22:49Z˛I think we should do the following:

Fix the default behavior by merging this PR. The current behavior is unambiguously a bug.
Introduce an option such as ignoreCharacterClasses: true to revert to the previous behavior, for anyone that wants to allow some useless escapes. This option should be false by default.
Ideally, it would be best if this bugfix and new option were both released in the same version, but I don't think this is a requirement; we can consider the bugfix and the new option independently.:
2016-10-23T20:47:31ZLGTM:
2016-10-24T07:49:16ZLGTM:
2016-10-24T08:39:07ZLGTM:ﬁ
2016-10-26T23:39:51Z≈TSC Summary: no-useless-escape currently has a false negative in regex character classes. This is clearly a bug in the rule, but there is reason to believe that the fix might have an unusually large impact on the ecosystem (there are 11 existing violations in the ESLint codebase that were not caught due to the bug). In addition, it's plausible that a user might be okay with useless escapes in character classes for readability, even though these escapes are useless according to the rule's definition. The current proposal is to accept this PR as a bugfix (since the rule is currently not working as intended), and add an opt-out option to ignore character classes (something like #7455).
TSC question: Should we merge this PR for the upcoming release and consider the opt-out option separately? If not, how should we handle this fix?:f
2016-10-27T23:46:32ZNTSC Resolution: Merge as is. Opt-out option could be considered in the future.:~
2016-10-27T23:55:21Zf@eslint/eslint-tsc @not-an-aardvark Thanks very much for taking the time to carefully deliberate this.Ë
∫¥D2017-06-17T19:36:26Z"2017-06-20T07:31:50Z*óWhat is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix (template)
Tell us about your environment

ESLint Version:4.0.0
Node Version:6.9.5
npm Version:3.10.10

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
What did you do? Please include the actual source code causing the issue.
I have a fix for errors that were being reported on multiline destructure as reported in #8729
I Added test cases for a bug where errors were reported on indentation on multiline destructure
Is there anything you'd like reviewers to focus on?
Not sure if my approach is correct. Any feedback is welcome.2I
(98512881f1fc2417011247931fa089d987ee8cc62017-06-20T07:31:49Z3211873:¬
2017-06-17T19:36:28Z©Thanks for the pull request, @VictorHom! I took a look to make sure it's ready for merging and found some changes are needed:

The commit summary needs to begin with a tag (such as Fix: or Update:). Please check out our guide for how to properly format your commit summary and update it on this pull request.

Can you please update the pull request to address these?
(More information can be found in our pull request guide.):
2017-06-18T02:46:46ZLGTM:
2017-06-18T03:52:07ZLGTM:
2017-06-18T15:08:18ZLGTM:0
2017-06-20T07:32:07ZThanks for contributing!â>¶F2017-07-25T08:37:40Z"2017-07-27T09:10:51Z*ÎWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 8.2.1
npm Version: 5.3.0

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  nonexistent-rule: error
What did you do? Please include the actual source code causing the issue.
foo;
bar;
baz;
qux;
What did you expect to happen?
I expected an error to be reported at the top of the file due to the nonexistent rule.
What actually happened? Please include the actual, raw output from ESLint.
An error was reported, spanning the entire file.

Output of JSON formatter
[{"filePath":"<text>","messages":[{"ruleId":"nonexistent-rule","severity":2,"message":"Definition for rule 'nonexistent-rule' was not found","line":1,"column":1,"nodeType":"Program","source":"foo;","endLine":4,"endColumn":5}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"foo;\nbar;\nbaz;\nqux;"}]

This was an unintended side-effect of b0c63f0.



What changes did you make? (Give an overview)
Messages for missing rules are only intended to appear at the top of a file. However, the messages have always been implemented as context.report calls on the Program node, and due to b0c63f0, this results in the entire AST range being reported. This commit updates the missing-rule messages to report issues at the top of the file.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(3393894ff698c5371aa8856ab3a816cf77856b442017-07-27T09:10:50Z11638619:
2017-07-25T08:37:41ZLGTM¬ãºC2017-05-22T05:52:14Z"2017-05-24T02:31:02Z*†What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[ X ] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:



What changes did you make? (Give an overview)
Config merge never took care of the extends that why it was overriding the array as mentioned in the issue. This has never caught because the rules for all those extended configs got picked up, it just the extends array inside config never got updated correctly due to merge issues.
Is there anything you'd like reviewers to focus on?2I
(d0e9fd2d7c5f7ae1b9a1b2b0d04b9764dd782bd42017-05-24T02:31:01Z5554486:
2017-05-22T05:52:15ZLGTM:Å
2017-05-22T06:19:13ZËI'm not understanding what the problem was. Can you give a simplified example where ESLint would do the wrong thing? (SimenB/eslint-extends-issue is good for reproducing the issue, but I still don't understand why the bug occurred.):˝
2017-05-22T06:24:07Z‰ESLint doesnt have any issue when it comes to rules or plugin  or extends etc. Only when you try to print the config, the extends objects is not printed with all the info rather only prints a bunch of data points. That because of how array merge of extends was done.
You can run the case in that repo and then try again my including the fix from this PR.
With the unit test added in this PR, if you remove the code change then the output of that test will be
["f", "g", "h", "i", "e"]:Ì
2017-05-22T06:28:38Z‘Is --print-config supposed to have information about extends anyway? I would have expected that it would contain all the rules from the extended config anyway, so the extends object would be completely redundant.:¢
2017-05-22T06:42:52ZâWhat u r saying is correct and that's what's happening.... But I think it good to fix this even from a merge functionality perspective...:È
2017-05-22T06:46:42Z–I'm not sure I agree -- if Config B extends Config A, then it seems like merge(configA, configB) should not need to have extends: configB, everything from Config B has already been added to the merged config.:©
2017-05-22T16:55:13ZêThe sole purpose of merge(target, source) function is to handle merging of one config into another. It has nothing to do with the evaluation.
Now in this case the extends array of the config merge process is not handled properly as it start to overwrite with entries from source.
Input:
Target: { extends: [ "a", "b", "c", "d", "e" ] }
Source: { extends: [ "f", "g", "h" ]}
Before this fix:
merge(Target, Source) => { extends: [ "f", "g", "h", "d", "e" ] }
After this fix:
merge(Target, Source) => { extends: [ "a", "b", "c", "d", "e", "f", "g", "h" ] }
All I am saying is that we should make this fix so that merge function behavior is correct. If the @eslint/eslint-team says that we want to stick with the behavior (before the fix) then I can close this PR.
My Vote: Fix this issue:Q
2017-05-22T16:57:46Z9Oh I see, in that case I agree that this should be fixed.∑
íê'2016-01-20T11:07:03Z"2016-02-12T01:24:44Z*±ESLint version: the master branch (commit 0acbe57)
In production code, I use the 1.10.3.
Lint result:
cjc:~/www/node/eslint$ ./bin/eslint.js -c .eslintrc.json index.js 

/home/cjc/www/node/eslint/index.js
  1:1  error  Use the global form of 'use strict'  strict

‚úñ 1 problem (1 error, 0 warnings)
eslintrc.json:
{
  "rules": {
    "key-spacing": [2, { "mode": "minimum", "beforeColon": false, "afterColon": true }]
  }
}
index.js:
(function() {
    var obj = {
        foo : "Foo"
    };

    obj.foo = "Bar";
}());
There should not be an extra space before the colon. I mean an error should be output.

Want to back this issue? Post a bounty on it! We accept bounties via Bountysource.2H
(7b129953c2de22f8c8642d3e3d684800f119d7b72016-02-11T22:30:32Z126780:"
2016-01-20T17:26:33Z
@btmills ?:ƒ
2016-01-20T17:39:36Z´Based on https://github.com/eslint/eslint/blob/v1.10.3/tests/lib/rules/key-spacing.js#L164-L168, it looks like this might be by design. @BYK, is this behavior intentional?:K
2016-02-11T04:12:27Z3@BYK could you provide information about this rule?:Ã
2016-02-11T17:14:16Z≥Not sure why I didn't get @btmills' direct mention. Anyways, this looks like a bug. I was able to reproduce the behavior in the online demo. I'll see if I can get a patch up soon.∑íª22016-06-18T05:09:31Z"2016-06-28T17:31:25Z*ıWhat version of ESLint are you using?
Master
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
N/A
What did you do? Please include the actual source code causing the issue.
Given a directory with a file and an .eslintcache:
> tree -a
.
‚îú‚îÄ‚îÄ .eslintcache
‚îî‚îÄ‚îÄ foo.js

Running eslint on text with --stdin causes the .eslintcache file to be deleted:
> echo "var foo=42;" | eslint --stdin
> tree -a
.
‚îî‚îÄ‚îÄ foo.js

What did you expect to happen?
Since the cache is only used when executing on files, I would not expect the .eslintcache file to be deleted.  This causes problems when using eslint in a text editor like Atom, because it means as soon as a file is opened (and therefore linted), the cache file is deleted (see AtomLinter/linter-eslint#587).
I believe this is because the code which deletes the cache is too high in the CLIEngine execution right after instantiation.  It could likely be moved into executeOnFiles as an else to this check.2I
(d601f6ba6e7eb3ba93c857ba078beffcbb2540972016-06-28T17:31:23Z7041728:/
2016-06-19T18:16:26ZYeah, seems like a bug.:â
2016-06-19T19:30:17ZqI'd like to take a look at this one if no one has objections - want to familiarize myself more with the core code:N
2016-06-19T19:53:01Z6Sure, this should be pretty straight-forward, I think.:Ì
2016-06-25T06:13:24Z‘Finally got around to looking at this and am finding myself confused - what is the desired behavior? According to http://eslint.org/blog/2015/09/eslint-v1.4.0-released, it seems like it's working as intended - the cache is deleted when ESLint is run without the --cache flag. If that isn't the intended behavior, what is? Thanks in advance!:ƒ
2016-06-25T06:47:16Z´Since the cache only has meaning when ESLint is run on files, maybe there's no need to wipe the cache when --stdin option is passed to CLI. At least, that's my take on it.:≈
2016-06-25T13:53:49Z¨Yes, that's right. Deletion should move inside executeOnFiles.
On Sat, Jun 25, 2016, 00:47 Kevin Partington notifications@github.com
wrote:

Since the cache only has meaning when ESLint is run on files, maybe
there's no need to wipe the cache when --stdin option is passed to CLI.
At least, that's my take on it.
‚Äî
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub
#6459 (comment), or mute
the thread
https://github.com/notifications/unsubscribe/AEZyAVcubkUsVx4ouZvs9kmZMmkSGjLUks5qPLLZgaJpZM4I42xU
.:W
2016-06-25T18:02:33Z?What about when --stdin-filename is used? Any difference there?:.
2016-06-25T18:12:41ZOkay, got it - thanks!:º
2016-06-25T18:14:27Z£I would say no, that should not make a difference.  When --stdin-filename is used, we still call executeOnText, which bypasses all of the cache application logic.  There's no chance in using a cache when linting straight text, so I argue that it also should not be deleting the cache either.:ø
2016-06-25T18:19:15Z¶To give a little more explanation, I run eslint in my editor (Atom), which lints using --stdin and --stdin-filename.  Linting there is quick, because it only runs on one file-worth of text at a time.  When I'm ready to commit changes, I run an npm script which lints the entire codebase with --cache.  I would like the cache to persist between my npm run lint executions, because without it linting can take quite a while.:©
2016-06-25T19:59:08ZêOpened a PR - thanks for letting me take this on :) Most of my work has been in rules so far, and I'm eager to get to know the core code better!é:ßF2017-07-25T08:49:12Z"2017-07-27T09:11:05Z*¶What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8989)



What changes did you make? (Give an overview)
This removes an incorrect exception in the indent rule for computed Property nodes.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(31d7fd27ad28119abc30d01476c08e94288af0ab2017-07-27T09:11:05Z11638619:
2017-07-25T08:49:13ZLGTM:«
2017-07-25T08:49:23ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @gyandeeps and @valorkin to be potential reviewers.ª‘ÅL2017-12-18T05:36:11Z"2018-01-10T01:05:45Z*‰Tell us about your environment

ESLint Version: 4.13.1
Node Version: 9.2.0

What parser (default, Babel-ESLint, etc.) are you using? babel-eslint
Please show your full configuration:

Configuration

module.exports = {
  parser: 'babel-eslint',
  rules: {
    'indent': ['error', 2, { SwitchCase: 1 }]
  }
}

What did you do? Please include the actual source code causing the issue, as well as the command that you used to run ESLint.

const obj = {
  foo () {
    return condition ? // comment
    1 :
      2
  }
}

npx eslint path/to/file.js
What did you expect to happen?
1 to be indented at the same level as 2
What actually happened? Please include the actual, raw output from ESLint.
The source code above is formatted according to eslint --fix.
indent wants to indent the 1 at the same level as the return statement. Removing the // comment after the ? clears indent's confusion and it does put 1 at the same indent level as 2.
Putting the ? on the next line also works around the problem.2J
(add1e703a52b86662386f9b9b177b0fc86a33acc2018-01-10T01:05:39Z11638619:Y
2017-12-20T16:59:03ZAThis sounds like a bug to me, but I'll defer to @not-an-aardvark.:¶
2017-12-22T07:13:05ZçWorking on this. (Edit: Might take me a couple of days-- if someone else wants to work on this, just let me know here and I'll stop. Thanks!):P
2018-01-07T06:16:26Z8I think I see what's wrong -- I'll work on it for a bit.ø≈D2017-06-21T17:31:52Z"2017-07-08T16:37:49Z*©If the last space has a quantifer attached, that one should not be
considered.
What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x ] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
Tell us about your environment

ESLint Version: latest
Node Version: various
npm Version: various

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:
{
  "rules": {
    "no-regex-spaces": "error"
  }
}

What did you do? Please include the actual source code causing the issue.
Œª cat test.js
/  +/;

Œª eslint --fix test.js

What did you expect to happen?
eslint to produce valid javascript
What actually happened? Please include the actual, raw output from ESLint.
Œª eslint --fix test.js

/home/keri/projects/test/test.js
  1:2  error  Parsing error: Error parsing regular expression: Invalid regular expression: / {2}+/: Nothing to repeat

‚úñ 1 problem (1 error, 0 warnings)

Œª cat test.js
/ {2}+/;


What changes did you make? (Give an overview)
I took the simplest option in this case: If there is a quantified space at the end of a string of spaces, ignore that space.
While it may have been better to analyse the quantifier and generate a new one accordingly, there are many cases that would need to be covered (see below) and I thought that would have been too complicated. Better to fix the bug first anyways.
/ +/; => / {2,}/;
/ */; => / +/;
Here's the original PR btw: https://github.com/eslint/eslint/pull/141/files
Is there anything you'd like reviewers to focus on?
no =]2I
(11ffe6b18393fd7448f71463d6a9acd1dea0ed802017-07-08T16:37:48Z5460144:
2017-06-21T17:31:54ZLGTM:;
2017-06-21T17:31:54Z#All committers have signed the CLA.:
2017-07-06T20:17:12ZLGTM:
2017-07-06T20:42:45ZLGTM∑cï(2016-02-03T07:53:15Z"2016-02-03T15:04:31Z*è"Should have 1 errors but had 0" should be "Should have 1 error but had 0".
Sorry this is a silly issue. Just creating it to pass the PR check.2H
(53a6eb3587f42e4520cf4e2bd0a98c504e8b10412016-02-03T07:50:12Z186704:˚
2016-02-03T07:53:16Z‚@bryanrsmith Thanks for the issue! If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead

Requesting a new rule? Please see Proposing a New Rule for instructions.:*
2016-02-03T15:03:36ZSure, sounds good.ûà*2016-02-24T16:16:44Z"2016-02-25T03:51:33Z*∞Hi there,
This seems to be related to #5295
Using the following rule config:
indent: [2, "tab"]

The following lines will throw errors:
instance.layoutSerializer = new LayoutSerializer(
    {
        builder: instance.get('formBuilder')
    }
);
However, with the same config, the following will not throw any errors:
instance.layoutSerializer = LayoutSerializer(
    {
        builder: instance.get('formBuilder')
    }
);
The reason for this is because on this line, it's not checking for NewExpression which is what the first block of code will register as.2H
(1170e678b3656eaf6656d3fcc4b5a212f4d448272016-02-24T20:32:05Z116871:N
2016-02-24T16:21:03Z6Sounds like an oversight to me. @gyandeeps @BYK ideas?:S
2016-02-24T16:38:40Z;@natecavanaugh Do you want to send a PR for this quick fix?:%
2016-02-24T18:19:02ZSure thing :):"
2016-02-24T19:04:09Z
Sent #5389™°ºE2017-07-07T13:04:10Z"2017-07-09T03:35:59Z*õTell us about your environment

ESLint Version: v4.1.1
Node Version: v5.1.0
npm Version: 3.3.12

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:

Configuration

/*eslint indent: ["error", 2, { "FunctionDeclaration": {"body": 1, "parameters": 1} }]*/

What did you do? Please include the actual source code causing the issue.
I ran ESlint to check for validation issues.

/*eslint indent: ["error", 2, { "FunctionDeclaration": {"body": 1, "parameters": 1} }]*/

define([
  "bar",
  "baz",
  "qux"
],

function (
  bar,
  baz,
  qux
) {
  qux();
});
What did you expect to happen?
I expected no validation issues.
What actually happened? Please include the actual, raw output from ESLint.
It gave me validation errors:
  10:1  error  Expected indentation of 4 spaces but found 2  indent
  11:1  error  Expected indentation of 4 spaces but found 2  indent
  12:1  error  Expected indentation of 4 spaces but found 2  indent
  13:1  error  Expected indentation of 2 spaces but found 0  indent

‚úñ 4 problems (4 errors, 0 warnings)
  4 errors, 0 warnings potentially fixable with the `--fix` option.

If I run --fix it ends up looking like this, which to me is double the function parameter spacing that I want (it has 4 spaces instead of 2) and it adds 2 spaces before ) {.
define([
  "bar",
  "baz",
  "qux"
],

function (
    bar, // These three parameters should have 2 spaces instead of 4
    baz,
    qux
  ) { // This line should have 0 spaces instead of 2
  qux();
});
Note
Running without the define as a simple method works as expected from the documentation examples. I.e. this works as expected (no validation issues):
/*eslint indent: ["error", 2, { "FunctionDeclaration": {"body": 1, "parameters": 1} }]*/

function foo(
  bar,
  baz,
  qux
) {
  qux();
}2J
(e0f0101fb949cf1aae5dc825cde9650743f0d5d12017-07-09T03:35:55Z11638619:I
2017-07-07T21:29:39Z1Thanks for reporting, I can reproduce this issue.:‹
2017-07-11T15:35:07Z√@not-an-aardvark I tried 4.2.0 and the issue isn't really fixed. The example I had above now passes, but if I change the body or parameters to anything other than 1 it still validates as if it was set to 1.
So changing from
/*eslint indent: ["error", 2, { "FunctionDeclaration": {"body": 1, "parameters": 1} }]*/
to
/*eslint indent: ["error", 2, { "FunctionDeclaration": {"body": 2, "parameters": 2} }]*/
or any other values doesn't affect validation.:†
2017-07-11T17:31:08ZáI think you want the FunctionExpression option, not FunctionDeclaration.
If it still isn't working after that, please open a new issue.:æ
2017-07-12T07:22:40Z•Oh, I see. Using FunctionExpression worked. You can update my bug description if you want, as it didn't work before 4.2.0 but my bug report said FunctionDeclaration.‡a·/2016-05-08T01:10:10Z"2016-05-12T08:18:51Z*„What version of ESLint are you using?
2.9.0
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
{
  "rules": {
    "no-multiple-empty-lines": ["error", {"max": 1, "maxBOF": 3}]
  }
}

What did you do? Please include the actual source code causing the issue.




var a = 1;

What did you expect to happen?
  0:0  error  Too many blank lines at the beginning of file. Max of 3 allowed  no-multiple-empty-lines

What actually happened? Please include the actual, raw output from ESLint.
  0:0  error  Too many blank lines at the beginning of file. Max of 3 allowed  no-multiple-empty-lines
  4:2  error  More than 1 blank line not allowed                               no-multiple-empty-lines2G
(52fdf0409a7d77ab0f31323c6f3adb37b5c175522016-05-12T08:18:48Z72561ÙJÃ22016-06-19T23:39:05Z"2016-06-21T19:53:23Z*…What version of ESLint are you using?
v2.13.0
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
What did you do? Please include the actual source code causing the issue.
eslint --init
What did you expect to happen?
What actually happened? Please include the actual, raw output from ESLint.
? How would you like to configure ESLint? Use a popular style guide
? Which style guide do you want to follow? AirBnB
? What format do you want your config file to be in? JSON
Could not find a package.json file. Run 'npm init' to create one.
Error: Could not find a package.json file. Run 'npm init' to create one.
at check (/usr/local/lib/node_modules/eslint/lib/util/npm-util.js:76:15)
at Object.checkDevDeps (/usr/local/lib/node_modules/eslint/lib/util/npm-util.js:124:12)
at installModules (/usr/local/lib/node_modules/eslint/lib/config/config-initializer.js:86:29)
at getConfigForStyleGuide (/usr/local/lib/node_modules/eslint/lib/config/config-initializer.js:289:5)
at .completed (/usr/local/lib/node_modules/eslint/lib/config/config-initializer.js:353:26)
at PromptUI.onCompletion (/usr/local/lib/node_modules/eslint/node_modules/inquirer/lib/ui/prompt.js:57:10)
at AnonymousObserver.Rx.AnonymousObserver.AnonymousObserver.completed (/usr/local/lib/node_modules/eslint/node_modules/rx-lite/rx.lite.js:1550:12)
at AnonymousObserver.Rx.internals.AbstractObserver.AbstractObserver.onCompleted (/usr/local/lib/node_modules/eslint/node_modules/rx-lite/rx.lite.js:1489:14)
at Subject.Rx.Subject.addProperties.onCompleted (/usr/local/lib/node_modules/eslint/node_modules/rx-lite/rx.lite.js:5871:19)
at Subject.tryCatcher (/usr/local/lib/node_modules/eslint/node_modules/rx-lite/rx.lite.js:63:31)2I
(3e690fb2cbb427c52cdb8836edb7eba667095b172016-06-21T19:53:20Z7041728:z
2016-06-19T23:41:34ZbMight be a silly question, but are you sure you're in a project directory that has a package.json?:˛
2016-06-19T23:44:20ZÂWhen you create a config based on a popular style guide, ESLint attempts to npm install the configuration you're extending. In order to do that, we need to check and see what has already been installed. We could probably handle this better (or at least have a clearer error message), but the workaround is to run npm init first, before running eslint --init:°
2016-06-19T23:58:58ZàI think we should add a clearer error message in this case. We can't do much without package.json, but we can guide users to create one.:ó
2016-06-20T02:39:58ZI wonder if we can throw this warning earlier in the flow so that users don't get a few questions in before it blows up on them:{
2016-06-20T03:22:39ZcWe could add a check for package.json as soon as you answered first question (popular style guide).:∂
2016-06-20T06:37:27ZùDidn't realize this was still being evaluated (jetlag is rough) and opened a PR for this. Labeled it as "do not merge" until we decide on what we want to do.:9
2016-06-20T18:23:31Z!Seems pretty straightforward üëçé^äÀ22016-06-19T16:41:09Z"2016-10-14T20:13:45Z*ë0What version of ESLint are you using?
2.11.1
What parser (default, Babel-ESLint, etc.) are you using?
babel-eslint
Please show your full configuration:


Configuration
---

# Use babel-eslint parser in order to support babel plugins
# necessary to e.g. strip Flowtype annotations

parser: babel-eslint

parserOptions:
  ecmaVersion: 6
  impliedStrict: true
  ecmaFeatures:
    arrowFunctions: true
    blockBindings: true
    classes: true
    defaultParams: true
    destructuring: true
    forOf: true
    generators: false
    modules: true
    objectLiteralComputedProperties: true
    objectLiteralDuplicateProperties: false
    objectLiteralShorthandMethods: true
    objectLiteralShorthandProperties: true
    spread: true
    superInFunctions: true
    templateStrings: true
    jsx: true

env:
  browser: true
  mocha: true

globals:
  expect: false

plugins:
  - react

extends:
  - eslint:recommended
  - plugin:react/recommended

rules:

  # Babel inserts 'use strict' for us already
  strict:
    - error
    - never


  # Best Practices

  array-callback-return: error
  complexity:
    - error
    - 5
  curly: error
  default-case: error
  dot-notation: error
  eqeqeq: error
  no-alert: error
  no-div-regex: error
  no-empty-function: error
  no-eval: error
  no-extend-native: error
  no-extra-bind: error
  no-implicit-coercion: error
  no-implicit-globals: error
  no-implied-eval: error
  no-invalid-this: error
  no-labels: error
  no-lone-blocks: error
  no-loop-func: error
  no-multi-spaces: error
  no-multi-str: error
  no-native-reassign: error
  no-new: error
  no-new-func: error
  no-new-wrappers: error
  no-param-reassign:
    - error
    - props: true
  no-return-assign: error
  no-script-url: error
  no-self-compare: error
  no-sequences: error
  no-throw-literal: error
  no-unmodified-loop-condition: error
  no-unused-expressions: error
  no-useless-call: error
  no-useless-concat: error
  no-useless-escape: error
  no-void: error
  no-warning-comments: warn
  no-with: error
  wrap-iife: error
  yoda: error


  # Variables

  init-declarations: error
  no-shadow:
    - error
    - hoist: all
  no-shadow-restricted-names: error
  no-use-before-define: error


  # Stylistic

  array-bracket-spacing:
    - error
    - always
  brace-style: error
  camelcase: error
  comma-spacing: error
  comma-style: error
  computed-property-spacing:
    - error
    - always
  consistent-this: error
  eol-last: error
  id-length: error
  indent:
    - error
    - 2
    - SwitchCase: 1
  key-spacing: error
  keyword-spacing: error
  linebreak-style: error
  max-depth:
    - error
    - 5
  max-len:
    - error
    - 120
  max-nested-callbacks:
    - error
    - 4
  max-params:
    - error
    - 4
  max-statements:
    - error
    - 14
  max-statements-per-line: error
  new-cap: error
  new-parens: error
  newline-after-var: error
  newline-before-return: error
  newline-per-chained-call: error
  no-array-constructor: error
  no-bitwise: error
  no-continue: error
  no-inline-comments: error
  no-lonely-if: error
  no-mixed-spaces-and-tabs: error
  no-multiple-empty-lines:
    - error
    - max: 2
      maxEOF: 1
      maxBOF: 0
  no-negated-condition: error
  no-new-object: error
  no-plusplus: error
  no-restricted-syntax:
    - error
    - TryStatement
    - FunctionDeclaration
  no-spaced-func: error
  no-trailing-spaces:
    - error
    - skipBlankLines: true
  no-unneeded-ternary: error
  no-whitespace-before-property: error
  object-curly-spacing:
    - error
    - always
  object-property-newline:
    - error
    - allowMultiplePropertiesPerLine: true
  one-var:
    - error
    - never
  operator-assignment: error
  operator-linebreak:
    - error
    - before
  padded-blocks:
    - error
    - blocks: never
      switches: always
      classes: always
  quote-props:
    - error
    - as-needed
  quotes:
    - error
    - single
  semi:
    - error
    - never
  space-before-blocks: error
  space-in-parens:
    - error
    - never
  space-infix-ops:
    - error
  space-unary-ops: error
  spaced-comment: error
  unicode-bom: error


  # ESerror015

  arrow-body-style: error
  arrow-parens: error
  arrow-spacing: error
  no-duplicate-imports: error
  no-useless-computed-key: error
  no-var: error
  object-shorthand: error
  prefer-const: error
  prefer-spread: error
  prefer-template: error
  template-curly-spacing:
    - error
    - always


  # React

  react/jsx-boolean-value: error
  react/jsx-curly-spacing:
    - error
    - always
  react/jsx-equals-spacing: error
  react/jsx-handler-names: error
  # react/jsx-indent:
  #   - error
  #   - 2
  react/jsx-indent-props:
    - error
    - 2
  react/jsx-key: error
  react/jsx-no-bind: error
  react/jsx-no-target-blank: error
  react/jsx-pascal-case: error
  react/jsx-space-before-closing: error
  react/no-multi-comp: error
  react/prefer-stateless-function: error
  react/prop-types: off
  #react/require-optimization: error
  react/self-closing-comp: error
  react/sort-comp: error
  react/wrap-multilines: error

What did you do? Please include the actual source code causing the issue.
Note line 12 of this file, marked with "Issue":
// @flow

import { RESULTS_ROUTE } from '/routes'

import { fetchDetails, setQuery, setAndFetchQuery } from '/actions'

export const onDetailsEnter = (dispatch) =>
  ({ params }) => dispatch(fetchDetails(params.id))

export const onLocationChange = (dispatch) =>
  (location) => {
    const query = location.query.q ? location.query.q : ''  // Issue

    if (location.pathname === RESULTS_ROUTE) {
      dispatch(setAndFetchQuery(query))
    } else {
      dispatch(setQuery(query))
    }
  }
What did you expect to happen?
The id-length rule to fire due to the .q property access.
What actually happened? Please include the actual, raw output from ESLint.
The id-length rule did not fire - there was no output from ESLint, no warnings or errors. This happens in both my editor which runs it on the one file, and when running ESLint from the project level.
If I change that line to instead use a boolean operator like so:
    const query = location.query.q || ''
Then the rule does fire.2H
(d0d3b2885a91315922175fa0292fa1cb6f65961c2016-10-14T20:13:42Z126780:„
2016-06-19T16:52:34Z Verified this in online demo. The following code doesn't produce an error:
/* eslint "id-length": "error" */
const query = location.query.q ? location.query.q : ''
But this one does:
/* eslint "id-length": "error" */
const query = location.query.q || ''
Should this rule check properties every time, or only on assignment anyways?:T
2016-06-19T18:20:42Z<@jrajav can you please provide the exact output from ESLint?:Ç
2016-06-19T18:21:50ZÈSeems to me like this should only check the left hand side of assignments. There's no guarantee you have any control over the right hand side (i.e. could be the results of an API call, 3rd party library, etc.). So in my opinion const query = location.query.q || '' shouldn't be flagged either, as query is potentially the only part you have control over naming.:∂
2016-06-19T18:34:41Zù@nzakas There is no output to provide. ESLint exits without an error.
@kaicataldo You are correct, but 3rd party libraries are outside of scope of this rule.:í
2016-06-19T18:48:32Z˘@ilyavolodin Oh yeah, that was just a (maybe poor) example. I was just trying to illustrate that it doesn't make sense to me to have the rule warn for location.query.q, since that property key name length might not be in the author's control at all.:∆
2016-06-19T18:54:27Z≠@kaicataldo That rule has an option (which is on by default), to check properties of objects. If you are working with 3rd party libraries, you can just turn off that option.:É
2016-06-19T18:57:19ZÍRight, maybe I'm just not explaining myself well - I was trying to say I think this rule should only check the left hand side of assignments in response to:

Should this rule check properties every time, or only on assignment anyways?:L
2016-06-19T19:32:09Z4Ahh.. Ok, sorry, misunderstood what you were saying.:&
2016-06-19T19:33:33ZNo worries! :):Ø
2016-06-20T19:55:27Zñ@ilyavolodin he mentioned if he changed the code, then he got a warning. That's the output I was looking for.
Do we know what the next steps are here?:Ë
2016-06-21T03:13:31ZœSeems like we should be consistent in our treatment of
const query = location.query.q ? location.query.q : ''
and
const query = location.query.q || ''
It makes sense to me to not warn at all for the right hand side, for the reasons mentioned above, so my vote is to not warn on either of the above. Maybe I'm missing something, though?:ÿ
2016-06-21T15:03:29ZøI agree we should consider warning LHS only (including object patterns and other more complicated assignments), unless that means we will fail to lint certain scenarios that I'm not aware of.:W
2016-06-21T16:27:26Z?Agree with @kaicataldo however, that would be a breaking change: 
2016-06-21T19:29:37Z±@nzakas Sorry about that:
21:32 error Identifier name 'q' is too short. (< 2) id-length
And again that's only for the || version and does not appear for ?:.
Just one note about only treating the LHS - that probably wouldn't cover if you were assigning a full object literal to a variable, right? Such as:
const object = { q: 'short prop' }
That's the normal way I would be defining my own objects in my code, and intuitively I'd expect id-length to warn for those. I don't know of a better way to avoid issues with third-party libraries or Ajax objects, though.:Ç
2016-06-22T19:51:18ZÈ@jrajav in that example, both object and q are LHS, so it would apply to both.
Can anyone confirm what this rule should be doing? We seem to be missing a description of whether or not reading from a property should trigger this rule.:Á
2016-06-28T19:24:32ZŒLooking thru this rule's documented test cases, it appears to focus on where identifiers are defined, not merely where they're used. This also fits with my personal experience in using this rule, which would mean that the "success" scenario reported by @jrajav (const query = location.query.q || '') is actually the bug, since q is not being defined in this statement.
When set to "always", the properties option appears intended to flag only property creation. For statements like obj.e = document.body;, it's unclear if property e is being defined on obj with this statement, or if it's merely being assigned to ‚Äì this rule option appears to assume the former. It's possible this is where the faulty logic resides.:ó
2016-10-01T03:22:34Z˛Would like to look into this one and make a PR to fix, but would like to know what the community would agree upon as "correct behavior" before diving in.  Seems like an interesting problem.
It seems like everyone agrees on evaluating LHS for errors and warnings, but should the rule trigger an error if reading from a property?
Any additional information is much appreciated.
Thanks:Ê
2016-10-10T19:25:00ZÕ@eslint/eslint-team This issue has been in the accepted state for a while. It looks like the rule should only be checking declarations, and not variable/property access. However that would be a breaking change (I think). Any ideas what we should do here? I think I would like to change the rule to only change LHS of the assignments.:∑
2016-10-10T22:56:07ZûI still feel the same way - seems like this should only be checking the LHS of assignments (including object properties). If we make this change, do we want to save this for the next major version? Definitely seems like a bug that the two examples above produce different error results.:`
2016-10-11T00:18:24ZHIf we are warning on fewer instances, then that's not a breaking change.:˚
2016-10-11T16:05:13Z‚Ah, @nzakas is correct. This would result in fewer error messages so this would be a minor release ("Update"). In that case I think the resolution would be to modify this rule to only check LHS of the assignments/declarations.Ô%á◊B2017-05-02T13:39:09Z"2017-12-23T20:03:02Z*∫ESLint Version: 3.19.0
Node Version: 7.7.3
npm Version: 4.5.0

What parser (default, Babel-ESLint, etc.) are you using? : babel-eslint
Please show your full configuration:

{
  "parser": "babel-eslint",
  "rules": {
    "complexity": [2, 1]
  }
}

What did you do? Please include the actual source code causing the issue.

let foo, bar, baz, bang;

function check(foo, bar, baz, bang) {
	if (!bar || !bang) {
		baz = foo;
	}
}
function check2(foo, bar, baz, bang) {
	if (!(bar && bang)) {
		baz = foo;
	}
}
function check3(foo, bar, baz, bang) {
	if (bar && bang) {
		baz = foo;
	}
}
function check4(foo, bar, baz, bang) {
	if (!bar && !bang) {
		baz = foo;
	}
}
function check5(foo, bar, baz, bang) {
	if (bar || bang) {
		baz = foo;
	}
}

check(foo, bar, baz, bang);
check2(foo, bar, baz, bang);
check3(foo, bar, baz, bang);
check4(foo, bar, baz, bang);
check5(foo, bar, baz, bang);
What did you expect to happen?
All functions check to check5 should have the same complexity
What actually happened? Please include the actual, raw output from ESLint.
   3:1  error  Function 'check' has a complexity of 3   complexity
   8:1  error  Function 'check2' has a complexity of 2  complexity
  13:1  error  Function 'check3' has a complexity of 2  complexity
  18:1  error  Function 'check4' has a complexity of 2  complexity
  23:1  error  Function 'check5' has a complexity of 3  complexity

It seems that || has more complexity than && in the current implementation, but I don't think that is true. All the check have a complexity of 3. (That is what http://jsmeter.info/axtsgb/1#results reports)2H
(75c741946e4255cdd8e744578bf474b3a7571cec2017-12-23T20:02:53Z284282:û
2017-05-02T15:15:08ZÖThere seems to be hardcoded logic in the rule that well only increase complexity for ||:
https://github.com/eslint/eslint/blob/master/lib/rules/complexity.js#L138-L140
So it is working as intended.
I think the logic is saying that since an || could always be rewritten as a nested if statement it is more complex than and && statement. This is not true in the worse case scenario, where each condition must be checked, and I believe they should have the same complexity. Or at the very least update the documentation.:M
2017-06-03T08:42:07Z5Closing because this seems to be working as intended.:•
2017-06-03T15:19:04ZåNo it is not :
See @soda0289 statement :

This is not true in the worse case scenario, where each condition must be checked, and I believe they should have the same complexity

Also according to Wikipedia :

McCabe showed that the cyclomatic complexity of any structured program with only one entrance point and one exit point is equal to the number of decision points (i.e., "if" statements or conditional loops) contained in that program plus one. However, this is true only for decision points counted at the lowest, machine-level instructions. Decisions involving compound predicates like those found in high-level languages like IF cond1 AND cond2 THEN ... should be counted in terms of predicate variables involved, i.e. in this example one should count two decision points, because at machine level it is equivalent to IF cond1 THEN IF cond2 THEN ....[2][4]

So this means that to count the complexity, we need to change our program to remove the "or" and "and", that would be :
function check(foo, bar, baz, bang) {
	if (!bar || !bang) {
		baz = foo;
	}
}

=>
function check(foo, bar, baz, bang) {
	if (!bar) {
           baz = foo
        } 
        if (!bang) {
             baz = foo;
	}
}

Complexitiy = 1 + number of if statements = 1+2 = 3
For check3 :
function check3(foo, bar, baz, bang) {
	if (bar && bang) {
		baz = foo;
	}
}

function check3(foo, bar, baz, bang) {
	if (bar) {
                if (bang) {
         		baz = foo;
                }
	}
}

Complexity = 1 + number of if statements = 3.
So please, reopen this issue :-):Í
2017-06-03T15:23:38Z—I think I agree. Assuming a negation does not count towards cyclomatic complexity, by DeMorgan's law it is always the case that !(a && b) is equal to !a || !b, so those expressions (again, assuming we can ignore negation) should be equal in cyclomatic complexity.
I'm convinced this is a bug. @soda0289 @not-an-aardvark Okay if I reopen?:(
2017-06-03T19:39:16ZOk, sounds good.:∆
2017-06-07T02:25:48Z≠Do you think we should add an option to count or statements the same as and? That way if people preferred the old behavior they could always go back or fix it in the future.:Ÿ
2017-07-13T06:22:05Z¿I just found this: jshint/jshint#840
If I had to guess, this bug exists because we were originally mimicing/copying the logic from JSHint, but JSHint also had a bug in the logic related to &&.:`
2017-11-03T22:01:26ZHMarking this accepted because I'm also now convinced that this is a bug.â	‘B2017-05-01T18:16:37Z"2017-05-04T19:06:00Z*˚What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

Tell us about your environment

ESLint Version: 3.19.0
Node Version: 6.9.3
npm Version: 3.10.10

What parser (default, Babel-ESLint, etc.) are you using?
babel-eslint
Please show your full configuration:
		"max-len": ["error", {
			"code": 80,
			"comments": 100,
			"tabWidth": 2,
			"ignoreUrls": true,
			"ignoreRegExpLiterals": true,
			"ignoreStrings": true,
			"ignoreTemplateLiterals": true
		}],

What did you do? Please include the actual source code causing the issue.
I wanted to allow comments up to 100 characters while limiting code to 80 characters.
In one of my modules, I have a comment longer than 80 characters, but less than the 100 characters specified for comments (see below):
 * - onLeftIconClick - optional click handler, invoked when icon is clicked (default: undefined)

What did you expect to happen?
That this 96 character comment would not result in a violation of max-len when configured to allow 100 character comments.
What actually happened? Please include the actual, raw output from ESLint.
Error reported indicates that the comment is in violation of the max code length:
Line 61 exceeds the maximum line length of 80. (max-len)



What changes did you make? (Give an overview)
Prior to this PR, comment lines that were not in violation of the specified max comment length would be further validated using the max code length.  This works well for situations where the max comment length is less than the max length for code, but doesn't allow for longer comments.
Modified max-len to respect max comment length if it happens to be greater than max code length.  For situations where a max comment length is not defined, the max code length will be respected.
Added unit tests to validate this change for situations with long comments and short code.
Is there anything you'd like reviewers to focus on?
As a side note, I submitted this using the bug template because there was no indication in the documentation that comments must be less than the length specified for code.2I
(0a9a90f82e4d3e6e2ca4e6719567b9d9ebcaa0452017-05-04T19:06:00Z3155127:;
2017-05-01T18:16:39Z#All committers have signed the CLA.:¡
2017-05-01T18:16:39Z®Thanks for the pull request, @kgregory! I took a look to make sure it's ready for merging and found some changes are needed:

The commit summary needs to begin with a tag (such as Fix: or Update:). Please check out our guide for how to properly format your commit summary and update it on this pull request.

Can you please update the pull request to address these?
(More information can be found in our pull request guide.):ƒ
2017-05-01T18:16:39Z´@kgregory, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @not-an-aardvark and @ljharb to be potential reviewers.:
2017-05-01T18:31:58ZLGTM:
2017-05-01T19:14:02ZLGTM:}
2017-05-01T19:25:34Ze@not-an-aardvark thanks for the review and the detailed rebase instructions, which were very helpful.:
2017-05-01T21:30:46ZLGTM:
2017-05-01T21:31:57ZLGTM:
2017-05-01T21:54:07ZLGTM:0
2017-05-04T19:06:05ZThanks for contributing!Ã¥ŒC2017-05-26T05:46:00Z"2017-05-30T03:59:05Z*µTell us about your environment

ESLint Version: 3.19.0
Node Version: v7.7.3
npm Version: v4..1.2

Please show your full configuration:
See https://github.com/Shopify/eslint-plugin-shopify
Specifically our prefer-destructuring config

  'prefer-destructuring': ['error', {array: false, object: true}, {enforceForRenamedProperties: true}],


What did you do? Please include the actual source code causing the issue.
const arr = [1, 2, 3];
const second = arr[1];
What did you expect to happen?
No errors, since array has been set to false
What actually happened? Please include the actual, raw output from ESLint.
  16:9  error    Use object destructuring                     prefer-destructuring2J
(952483362bf123684a6cd7008e763c1933c37f8d2017-05-30T03:59:04Z11701553:ã
2017-05-26T05:48:13ZsIt seems like the enforceForRenamedProperties option doesn't take into consideration the state of the array option.:è
2017-05-26T05:51:55ZˆThanks for the report. The array option refers to using array destructuring, like this:
const [first] = arr;
It does not refer to whether the value that's being destructured is an array, because it's generally not possible to tell what the value of a given variable will be at runtime.
So the rule is recommending that you use this code instead:
const { [1]: second } = arr;:Ü
2017-05-26T06:02:48ZÌMakes sense. However, if we have array set as false, why is it still being flagged as an error?
If I remove the enforceForRenamedProperties option, that line doesn't get flagged as a error, which is expected, since array is set as false.:ã
2017-05-26T06:05:54ZsIf we have array set a true, it makes sense to raise an error and expect this instead:
const { [1]: second } = arr;:é
2017-05-26T08:05:52ZvKeep in mind that the rule doesn't know that arr is an array. It could just be a regular object that has "1" as a key.:™
2017-05-26T08:09:56ZëAlthough that said, if the rule assumes that accessing an integer property of an object should be array destructuring when array checking is enabled, I guess it doesn't make sense to treat it as object destructuring when array checking is disabled. I'll mark this as a bug.:—
2017-05-27T08:43:33Z∏I'm going to work on this issue.
Is it correct to say, the object option should not handle the case when accessing an integer property of an object, no matter what the array option is?:K
2017-05-27T08:48:22Z3Yes, that sounds right. Thanks for working on this!ªE‹A2017-04-05T02:12:49Z"2017-04-07T09:07:57Z*˜
What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 7.8.0
npm Version: 4.2.0

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  no-multi-spaces: error
What did you do? Please include the actual source code causing the issue.
foo
<FF>  bar; // <FF> represents a form feed character
What did you expect to happen?
I expected no error to be reported because the whitespace is at the beginning of the line.
What actually happened? Please include the actual, raw output from ESLint.
The code was autofixed to invalid syntax:
foo bar;



What changes did you make? (Give an overview)
The no-multi-spaces rule is not intended to check whitespace at the beginning of a line, because consecutive spaces are often used for indentation. Due to a bug, the rule previously matched against consecutive spaces that appeared after an irreglar whitespace character at the beginning of a line. The rule's autofixer assumes that the detected spaces are always between two tokens on the same line, so it would sometimes produce invalid syntax if the rule matched whitespace at the beginning of a line. This commit updates the rule to avoid matching whitespace at the beginning of a line.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(3c87e852d9588380a41c2fb54dc8f49de532e3c92017-04-07T09:07:56Z11638619:
2017-04-05T02:12:50ZLGTM:«
2017-04-05T02:12:50ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @btmills, @nzakas and @vegetableman to be potential reviewers.:Z
2017-04-05T02:17:27ZBCI is failing due to nodejs/nodejs.org#1191
edit: it's passing now˛‹ï:2016-10-24T22:54:30Z"2016-10-28T18:27:19Z*ÌWhat is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix (template)
Original issue: #4753
Per comma-dangle, object-curly-spacing, and #7436, it appears that these updates can belong in ESLint now.
What changes did you make? (Give an overview)
In array-bracket-spacing, if a type annotation is present, take the last token and the penultimate token before the type annotation.
Is there anything you'd like reviewers to focus on?
This code is slightly different from the code in eslint-plugin-babel. The code there just steps backward until it finds a ]. Here I instead look at the token immediately before the beginning of the type annotation. This avoids issues when the type annotation is of the form Type[].
cc @zaygraveyard2I
(b2000860eea3b79c5b974dda2d6f44c8481877772016-10-28T18:27:18Z3112159:
2016-10-24T22:54:32ZLGTM:ª
2016-10-24T22:54:34Z¢@taion, thanks for your PR! By analyzing the history of the files in this pull request, we identified @nzakas, @alberto and @mysticatea to be potential reviewers.:e
2016-10-26T15:41:58ZMThank you for the PR, @taion! Could you fill the bug fix/report template too?:A
2016-10-26T16:58:17Z)@vitorbal It's in the linked issue: #4753:V
2016-10-27T16:28:57Z>I was overzealous in cutting down the test case. Will replace.:
2016-10-27T23:04:26ZLGTM:@
2016-10-27T23:04:36Z(Updated. The test should be correct now.:
2016-10-27T23:29:59ZLGTM:3
2016-10-27T23:30:13ZSwitched to getTokenBefore.æ’ÅN2018-02-17T05:14:20Z"2018-02-24T00:20:04Z*®What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

Fixes #9954.


What changes did you make? (Give an overview)
Previously, getAllStrings only filter for tokens with type String. The filter should check if the token type is JSXText as well.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(aea07dc88689ff0d6fea27e4099ce7f1a42ff90a2018-02-24T00:20:03Z16644412:ä
2018-02-18T01:57:23ZÒI am not sure if it is desired behavior but I think
var foo = <div className="this is a very long string"> short </div>;
should be ignored but
var foo = <div>this is another very long string</div>;
should not be ignored (since this case is more avoidable and we usually expect strings to be in quotes)
How about an additional check if the token is surrounded by quotes?:≠
2018-02-18T03:19:50ZîLooked into this a little more, and given the description of the option ("ignoreStrings": true ignores lines that contain a double-quoted or single-quoted string), I do think we should limit this change to just checking the strings in JSX attributes. If we ever wanted to also check the JSXText between tags, we could always do that in a future PR.

How about an additional check if the token is surrounded by quotes?

I think we might be able to just check if the JSXText token is a child of a JSXAttribute node. What do you think?:µ
2018-02-18T06:06:03ZúUpdated to check if JSXText token is a child of a JSXAttribute node. I think that will be cleaner than checking if the token's value is surrounded by quotes:l
2018-02-18T06:15:42ZTI agree with #9985 (comment); a child node is not a string, even tho it's also text.:0
2018-02-24T00:20:09ZThanks for contributing!“d≈22016-06-18T22:39:26Z"2016-06-21T20:06:47Z*äWhat version of ESLint are you using?
2.13.0
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
{
  "parser": "eslint",
  "extends": "eslint:recommended",
  "rules": {
    "object-curly-spacing": [2, "always", {
      "objectsInObjects": false,
      "arraysInObjects": true
    }]
  }
}

What did you do? Please include the actual source code causing the issue.
Wrote code like const { y: { z }} = x
What did you expect to happen?
No error to be reported
What actually happened? Please include the actual, raw output from ESLint.
Error was reported:
1:17  error  A space is required before '}'  object-curly-spacing


I forked the project to investigate, and will also open a pull request in a few minutes with a proposed fix.2H
(5668236550dfc4bd436800a1978a3deb42dd13fa2016-06-21T20:06:44Z492583:c
2016-06-19T02:23:09ZKShould the rule docs be updated to include var { y: { z }} = x in examples?:π
2016-06-19T19:24:58Z†That definitely seems counter-intuitive - I wonder if this should be lumped into objectsInObjects or if there should be a separate destructure config option, since this also warns for destructuring arrays in objects like so:
const { y: [ z ]} = x;
produces
/Users/kaicataldo/Code/eslint/test/eslint-test/test.js
  1:17  error  A space is required before '}'  object-curly-spacing

‚úñ 1 problem (1 error, 0 warnings):¶
2016-06-20T20:17:49ZçConfirmed, looks like a bug. We treat ObjectPattern and ObjectExpression the same in this rule so they should behave the same way throughout.„
å:2016-10-23T15:44:04Z"2016-11-05T08:12:46Z*ÎWhat is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix (template)
See #7406 for the template.
What changes did you make? (Give an overview)
If there is a type annotation, we cannot remove parentheses around parameters of arrow functions. But arrow-parens has warned those.
(a: T) => a;
(a): T => a;
This PR fixes the bug.
I generated the ASTs with type annotations by http://astexplorer.net/
Is there anything you'd like reviewers to focus on?
Nothing in particular.2I
(c0f49378f2d43c83065f85d5adff25ac24a9dc822016-11-05T08:12:45Z1937871:…
2016-10-23T15:44:05Z∞@mysticatea, thanks for your PR! By analyzing the history of the files in this pull request, we identified @nfroidure, @vitorbal and @not-an-aardvark to be potential reviewers.:
2016-10-23T15:44:05ZLGTM:ù
2016-10-31T21:20:01ZÑJust a heads up: we have moved to a new CLA checker on pull requests. Even if you've previously signed our CLA, we will need to you sign the new one. To do so, look at the status checks for licence/cla and click the "Details" link. Sorry for the inconvenience.:H
2016-11-11T14:31:17Z0Any idea when this'll make it into a release? :):u
2016-11-11T17:39:04Z]@joemckie We usually do release every two weeks on Friday. So this PR will be released today.:+
2016-11-11T17:46:51ZAwesome, thank you!ã¶˛;2016-11-30T05:24:39Z"2017-04-04T07:55:47Z*ÇWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
#6759
What changes did you make? (Give an overview)
These changes will cause the ignorePath's directory to be used to resolve the patterns in the ignorePath, regardless of the cwd.  This matches the behavior of .gitignore.  I also added two tests which fail without these changes and pass with them.
Is there anything you'd like reviewers to focus on?
Not particularly, it's pretty straightforward I think.  @kaelzhang had already called out what needed to be done in a TODO comment.2I
(e3959199bc681ce2571fac55efa2eb0ba3d0c11a2017-04-04T07:55:46Z4616705:ª
2016-11-30T05:24:41Z¢@IanVS, thanks for your PR! By analyzing the history of the files in this pull request, we identified @alberto, @mysticatea and @gronke to be potential reviewers.:
2016-11-30T05:24:41ZLGTM:^
2016-12-01T20:50:07ZFAdding accepted/bug/core to synchronize labels with the related issue.:h
2017-02-10T15:49:54ZPLet me know when we're close to releasing 4.0, and I'll fix the merge conflicts.:f
2017-04-03T23:01:03ZN@IanVS Could you rebase please? We are ready to start merging 4.0 features in.:⁄
2017-04-03T23:06:47Z¡üëç will do tonight.
‚Ä¶
On Mon, Apr 3, 2017, 17:01 Ilya Volodin ***@***.***> wrote:
 @IanVS <https://github.com/IanVS> Could you rebase please? We are ready
 to start merging 4.0 features in.

 ‚Äî
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#7678 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AEZyAePecN07q8Pa10x0FBrB7WHQvtm_ks5rsV4TgaJpZM4K_ypM>
 .:
2017-04-04T03:13:32ZLGTM¶f∏E2017-07-06T18:04:49Z"2017-07-09T20:20:24Z*ÉWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[ ] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[X] Other, please explain:
I'm throwing an Error if the plugins set doesn't match expected input type.  This isn't a bug necessarily, but it's something I've ran into multiple times on multiple projects where I initially tried to pass in a string (with one plugin name) instead of an array.



What changes did you make? (Give an overview)
I'm throwing an Error with a detailed error message if the user has a config with plugins as anything other than an array (which is expected).
Is there anything you'd like reviewers to focus on?
I have both a debug(/* ... */) statement and throwing an error.  I'm not sure if that's the expected convention, but I tried to do similar to what's happening in other parts of the same plugins.js file.  Build passes and tests pass.2G
(597c217f2c0ac5ca4bd1ddad321f2192a88fc40f2017-07-09T20:20:23Z40245:¿
2017-07-06T18:04:51ZßThanks for the pull request, @calvinf! I took a look to make sure it's ready for merging and found some changes are needed:

The commit summary needs to begin with a tag (such as Fix: or Update:). Please check out our guide for how to properly format your commit summary and update it on this pull request.

Can you please update the pull request to address these?
(More information can be found in our pull request guide.):
2017-07-06T19:39:15ZLGTM:C
2017-07-06T19:40:24Z+Updated commit message to match guidelines.ØÆ›B2017-05-04T03:55:42Z"2017-05-10T06:55:53Z*„Tell us about your environment
Windows 10

ESLint Version:  v3.19.0
Node Version: v6.10.2
npm Version: 4.5.0

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
module.exports = {
  "parser": "babel-eslint",
  "extends": [
    "airbnb"
  ],
  "plugins": [
    "babel",
    "react",
    "promise"
  ],
  "env": {
    "browser": true,
    "jest": true
  },
  "rules": {
    "arrow-parens": [1, "always"],
    "arrow-body-style": [1, "always"],
    "key-spacing": 0,
    "no-mixed-operators": 0,
    "no-param-reassign": 0,

    // Allow for-of loops. 
    "no-restricted-syntax": [
      'error',
      {
        selector: 'LabeledStatement',
        message: 'Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.',
      },
      {
        selector: 'WithStatement',
        message: '`with` is disallowed in strict mode because it makes code impossible to predict and optimize.',
      },
    ],

    // This rule requires that all class methods use this. 
    // Disabling this allows making class methods that do not reference "this", which is helpful for private helper functions. 
    "class-methods-use-this": 0,

    // This config disallows if(true) but allows while(true)
    "no-constant-condition": ["error", { "checkLoops": false }],
    "no-cond-assign": ["error", "except-parens"],
    "no-plusplus": [0, {
      "allowForLoopAfterthoughts": true
    }],

    // Prevents using variables before they are defined. 
    "no-use-before-define": 1,
    "jsx-quotes": [2, "prefer-single"],
    "max-len": [2, 300, 2],
    "object-shorthand": ["error", "never"],
    "object-curly-spacing": [2, "always"],
    "react/forbid-prop-types": 0,
    "react/no-danger": 1,
    "no-continue": 0,

    // This rule always triggers on Windows...
    "import/no-unresolved": Number(process.env.OS !== 'Windows_NT') * 2,
    "spaced-comment": 0,
    "react/prefer-stateless-function": [1],
    "react/jsx-filename-extension": [1, {
      "extensions": [".js", ".jsx"]
    }],
    "react/jsx-curly-spacing": [2, "always", {
      "spacing": {
        "objectLiterals": "never"
      }
    }],
    "no-console": "off"
  }
}

What did you do? Please include the actual source code causing the issue.
I was converting some ES5 code to ES6 and eslint --fix broke some code. Here is a small example:

let queue = require('d3-queue').queue
const attrName = 'hi';

let q = queue()

q.defer(function(attrName, callback) {

  // No mention of "this" anywhere in the body of the function

}.bind(this, attrName));

What did you expect to happen?
I expected the code to stay as valid Javascript. Here is one valid transformation:
const queue = require('d3-queue').queue;
const attrName = 'hi';

const q = queue();

q.defer(((attrName, callback) => {

  // No mention of "this" anywhere in the body of the function

}).bind(this, attrName)); // This line is now valid because of the added parens. 

What actually happened? Please include the actual, raw output from ESLint.
const queue = require('d3-queue').queue;
const attrName = 'hi';

const q = queue();

q.defer((attrName, callback) => {

  // No mention of "this" anywhere in the body of the function

}.bind(this, attrName)); // This line is now invalid because the function has been transformed into an arrow function. This now gives an Error: 10,2: Parsing error: Unexpected token, expected ,2J
(927ca0dca7485b99ae8fd6a2b2b8f1f7156eeed02017-05-10T06:55:45Z11638619:I
2017-05-05T06:55:31Z1Thanks for reporting, I can reproduce this issue.ÉªâN2018-02-20T07:53:33Z"2018-02-20T22:03:51Z* What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#9992)



What changes did you make? (Give an overview)
This fixes a regression in f012b8c where no-await-in-loop started reporting the surrounding loop node rather than the AwaitExpression node. As a result, some eslint-disable comments broke and caused more errors because they were on the wrong line.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(f417506198d2ab8deca1e6127c164cef882d356f2018-02-20T22:03:50Z11638619:6
2018-02-20T22:03:57ZLGTM. Thanks for contributing!§§ö:2016-10-26T07:53:36Z"2016-11-01T18:26:21Z*–Tell us about your environment

ESLint Version: master (6e9ff08)
Node Version: 6.9.1
npm Version: 3.8.9

What parser (default, Babel-ESLint, etc.) are you using?

default

Please show your full configuration:

nothing

What did you do? Please include the actual source code causing the issue.
$ eslint test.js --no-eslintrc --no-ignore
test.js is:
/* eslint lines-around-directive: error */

"use strict"

;[1, 2, 3].forEach(doSomething)
What did you expect to happen?
No errors since there is an empty line between "use strict" and the next statement.
What actually happened? Please include the actual, raw output from ESLint.
$ eslint test.js --no-eslintrc --no-ignore

C:\Users\t-nagashima.AD\Documents\GitHub\eslint\test.js
  3:1  error  Expected newline after "use strict" directive  lines-around-directive

‚úñ 1 problem (1 error, 0 warnings)2J
(8a3e7171d65b45410896001f69d1e44a4c843c4e2016-11-01T18:26:18Z11638619:Q
2016-10-26T07:55:33Z9Related: newline-after-var has logic to account for this.ú
Âñ;2016-11-10T08:21:32Z"2016-11-11T17:26:31Z*¸Configuration
node 6.9.1
npm 3.10.8
dependencies: {
    "eslint": "^3.8.0",
    "eslint-loader": "^1.6.1",
    "eslint-plugin-import": "^2.0.1",
    "babel-eslint": "^7.1.0",
    "eslint-config-xo": "^0.17.0",
    "eslint-config-xo-react": "^0.10.0",
    "eslint-plugin-ava": "^4.0.0",
    "eslint-plugin-react": "^6.6.0"
  }

Have
You have index.js:
function MyObj() {}

MyObj.prototype = {
    someMethod: async function () {}
};
You have .eslintrc
{
    "parserOptions": {
        "ecmaVersion": 2017
    },
    "rules": {
        "object-shorthand": ["error", "always"]
    }
}
You run:
./node_modules/.bin/eslint --fix ./index.js 
You get in index.js:
export default {};

function MyObj() {}

MyObj.prototype = {
    someMethodnction() {} // wrong auto-fix
};
Expects & caused by
I've investigated that it caused by object-shorthand rule.
{
    "object-shorthand": ["error", "properties"]
}
If i set up it like that everything is ok. But I think with rule ["error", "always"] also everything should be linted great.2J
(b8d6e48b302bf2cb2059b4c388f8d4ae756e7b112016-11-11T17:26:28Z11638619:E
2016-11-10T08:23:27Z-By motives of the issue: auru/unity-configs#6:V
2016-11-10T08:28:03Z>Thanks for the bug report. I was able to reproduce this issue.…ÏªàN2018-02-19T19:48:25Z"2018-02-20T22:04:01Z*õﬂTell us about your environment

ESLint Version: 4.18.0
eslint-config-airbnb-base Version: 12.1.0
OS: Mac OS X 10.12.6
Node Version: 8.9.4
npm Version: 5.2.0

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:
{
  "extends": "airbnb-base"
}
so ./node_modules/.bin/eslint --print-config 1.js gives:

Configuration

{
  "globals": {
    "arguments": false,
    "GLOBAL": false,
    "root": false,
    "__dirname": false,
    "__filename": false,
    "Buffer": false,
    "clearImmediate": false,
    "clearInterval": false,
    "clearTimeout": false,
    "console": false,
    "exports": true,
    "global": false,
    "Intl": false,
    "module": false,
    "process": false,
    "require": false,
    "setImmediate": false,
    "setInterval": false,
    "setTimeout": false,
    "Array": false,
    "ArrayBuffer": false,
    "Boolean": false,
    "constructor": false,
    "DataView": false,
    "Date": false,
    "decodeURI": false,
    "decodeURIComponent": false,
    "encodeURI": false,
    "encodeURIComponent": false,
    "Error": false,
    "escape": false,
    "eval": false,
    "EvalError": false,
    "Float32Array": false,
    "Float64Array": false,
    "Function": false,
    "hasOwnProperty": false,
    "Infinity": false,
    "Int16Array": false,
    "Int32Array": false,
    "Int8Array": false,
    "isFinite": false,
    "isNaN": false,
    "isPrototypeOf": false,
    "JSON": false,
    "Map": false,
    "Math": false,
    "NaN": false,
    "Number": false,
    "Object": false,
    "parseFloat": false,
    "parseInt": false,
    "Promise": false,
    "propertyIsEnumerable": false,
    "Proxy": false,
    "RangeError": false,
    "ReferenceError": false,
    "Reflect": false,
    "RegExp": false,
    "Set": false,
    "String": false,
    "Symbol": false,
    "SyntaxError": false,
    "toLocaleString": false,
    "toString": false,
    "TypeError": false,
    "Uint16Array": false,
    "Uint32Array": false,
    "Uint8Array": false,
    "Uint8ClampedArray": false,
    "undefined": false,
    "unescape": false,
    "URIError": false,
    "valueOf": false,
    "WeakMap": false,
    "WeakSet": false
  },
  "env": {
    "node": true,
    "es6": true
  },
  "rules": {
    "accessor-pairs": "off",
    "array-callback-return": "error",
    "block-scoped-var": "error",
    "complexity": [
      "off",
      11
    ],
    "class-methods-use-this": [
      "error",
      {
        "exceptMethods": []
      }
    ],
    "consistent-return": "error",
    "curly": [
      "error",
      "multi-line"
    ],
    "default-case": [
      "error",
      {
        "commentPattern": "^no default$"
      }
    ],
    "dot-notation": [
      "error",
      {
        "allowKeywords": true
      }
    ],
    "dot-location": [
      "error",
      "property"
    ],
    "eqeqeq": [
      "error",
      "always",
      {
        "null": "ignore"
      }
    ],
    "guard-for-in": "error",
    "no-alert": "warn",
    "no-caller": "error",
    "no-case-declarations": "error",
    "no-div-regex": "off",
    "no-else-return": [
      "error",
      {
        "allowElseIf": true
      }
    ],
    "no-empty-function": [
      "error",
      {
        "allow": [
          "arrowFunctions",
          "functions",
          "methods"
        ]
      }
    ],
    "no-empty-pattern": "error",
    "no-eq-null": "off",
    "no-eval": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-label": "error",
    "no-fallthrough": "error",
    "no-floating-decimal": "error",
    "no-global-assign": [
      "error",
      {
        "exceptions": []
      }
    ],
    "no-native-reassign": "off",
    "no-implicit-coercion": [
      "off",
      {
        "boolean": false,
        "number": true,
        "string": true,
        "allow": []
      }
    ],
    "no-implicit-globals": "off",
    "no-implied-eval": "error",
    "no-invalid-this": "off",
    "no-iterator": "error",
    "no-labels": [
      "error",
      {
        "allowLoop": false,
        "allowSwitch": false
      }
    ],
    "no-lone-blocks": "error",
    "no-loop-func": "error",
    "no-magic-numbers": [
      "off",
      {
        "ignore": [],
        "ignoreArrayIndexes": true,
        "enforceConst": true,
        "detectObjects": false
      }
    ],
    "no-multi-spaces": [
      "error",
      {
        "ignoreEOLComments": false
      }
    ],
    "no-multi-str": "error",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-wrappers": "error",
    "no-octal": "error",
    "no-octal-escape": "error",
    "no-param-reassign": [
      "error",
      {
        "props": true,
        "ignorePropertyModificationsFor": [
          "acc",
          "e",
          "ctx",
          "req",
          "request",
          "res",
          "response",
          "$scope"
        ]
      }
    ],
    "no-proto": "error",
    "no-redeclare": "error",
    "no-restricted-properties": [
      "error",
      {
        "object": "arguments",
        "property": "callee",
        "message": "arguments.callee is deprecated"
      },
      {
        "object": "global",
        "property": "isFinite",
        "message": "Please use Number.isFinite instead"
      },
      {
        "object": "self",
        "property": "isFinite",
        "message": "Please use Number.isFinite instead"
      },
      {
        "object": "window",
        "property": "isFinite",
        "message": "Please use Number.isFinite instead"
      },
      {
        "object": "global",
        "property": "isNaN",
        "message": "Please use Number.isNaN instead"
      },
      {
        "object": "self",
        "property": "isNaN",
        "message": "Please use Number.isNaN instead"
      },
      {
        "object": "window",
        "property": "isNaN",
        "message": "Please use Number.isNaN instead"
      },
      {
        "property": "__defineGetter__",
        "message": "Please use Object.defineProperty instead."
      },
      {
        "property": "__defineSetter__",
        "message": "Please use Object.defineProperty instead."
      },
      {
        "object": "Math",
        "property": "pow",
        "message": "Use the exponentiation operator (**) instead."
      }
    ],
    "no-return-assign": [
      "error",
      "always"
    ],
    "no-return-await": "error",
    "no-script-url": "error",
    "no-self-assign": "error",
    "no-self-compare": "error",
    "no-sequences": "error",
    "no-throw-literal": "error",
    "no-unmodified-loop-condition": "off",
    "no-unused-expressions": [
      "error",
      {
        "allowShortCircuit": false,
        "allowTernary": false,
        "allowTaggedTemplates": false
      }
    ],
    "no-unused-labels": "error",
    "no-useless-call": "off",
    "no-useless-concat": "error",
    "no-useless-escape": "error",
    "no-useless-return": "error",
    "no-void": "error",
    "no-warning-comments": [
      "off",
      {
        "terms": [
          "todo",
          "fixme",
          "xxx"
        ],
        "location": "start"
      }
    ],
    "no-with": "error",
    "prefer-promise-reject-errors": [
      "error",
      {
        "allowEmptyReject": true
      }
    ],
    "radix": "error",
    "require-await": "off",
    "vars-on-top": "error",
    "wrap-iife": [
      "error",
      "outside",
      {
        "functionPrototypeMethods": false
      }
    ],
    "yoda": "error",
    "for-direction": "error",
    "getter-return": [
      "error",
      {
        "allowImplicit": true
      }
    ],
    "no-await-in-loop": "error",
    "no-compare-neg-zero": "error",
    "no-cond-assign": [
      "error",
      "always"
    ],
    "no-console": "warn",
    "no-constant-condition": "warn",
    "no-control-regex": "error",
    "no-debugger": "error",
    "no-dupe-args": "error",
    "no-dupe-keys": "error",
    "no-duplicate-case": "error",
    "no-empty": "error",
    "no-empty-character-class": "error",
    "no-ex-assign": "error",
    "no-extra-boolean-cast": "error",
    "no-extra-parens": [
      "off",
      "all",
      {
        "conditionalAssign": true,
        "nestedBinaryExpressions": false,
        "returnAssign": false,
        "ignoreJSX": "all",
        "enforceForArrowConditionals": false
      }
    ],
    "no-extra-semi": "error",
    "no-func-assign": "error",
    "no-inner-declarations": "error",
    "no-invalid-regexp": "error",
    "no-irregular-whitespace": "error",
    "no-obj-calls": "error",
    "no-prototype-builtins": "error",
    "no-regex-spaces": "error",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "error",
    "no-unexpected-multiline": "error",
    "no-unreachable": "error",
    "no-unsafe-finally": "error",
    "no-unsafe-negation": "error",
    "no-negated-in-lhs": "off",
    "use-isnan": "error",
    "valid-jsdoc": "off",
    "valid-typeof": [
      "error",
      {
        "requireStringLiterals": true
      }
    ],
    "callback-return": "off",
    "global-require": "error",
    "handle-callback-err": "off",
    "no-buffer-constructor": "error",
    "no-mixed-requires": [
      "off",
      false
    ],
    "no-new-require": "error",
    "no-path-concat": "error",
    "no-process-env": "off",
    "no-process-exit": "off",
    "no-restricted-modules": "off",
    "no-sync": "off",
    "array-bracket-newline": [
      "off",
      "consistent"
    ],
    "array-element-newline": [
      "off",
      {
        "multiline": true,
        "minItems": 3
      }
    ],
    "array-bracket-spacing": [
      "error",
      "never"
    ],
    "block-spacing": [
      "error",
      "always"
    ],
    "brace-style": [
      "error",
      "1tbs",
      {
        "allowSingleLine": true
      }
    ],
    "camelcase": [
      "error",
      {
        "properties": "never"
      }
    ],
    "capitalized-comments": [
      "off",
      "never",
      {
        "line": {
          "ignorePattern": ".*",
          "ignoreInlineComments": true,
          "ignoreConsecutiveComments": true
        },
        "block": {
          "ignorePattern": ".*",
          "ignoreInlineComments": true,
          "ignoreConsecutiveComments": true
        }
      }
    ],
    "comma-dangle": [
      "error",
      {
        "arrays": "always-multiline",
        "objects": "always-multiline",
        "imports": "always-multiline",
        "exports": "always-multiline",
        "functions": "always-multiline"
      }
    ],
    "comma-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "comma-style": [
      "error",
      "last"
    ],
    "computed-property-spacing": [
      "error",
      "never"
    ],
    "consistent-this": "off",
    "eol-last": [
      "error",
      "always"
    ],
    "func-call-spacing": [
      "error",
      "never"
    ],
    "func-name-matching": [
      "off",
      "always",
      {
        "includeCommonJSModuleExports": false
      }
    ],
    "func-names": "warn",
    "func-style": [
      "off",
      "expression"
    ],
    "function-paren-newline": [
      "error",
      "multiline"
    ],
    "id-blacklist": "off",
    "id-length": "off",
    "id-match": "off",
    "indent": [
      "error",
      2,
      {
        "SwitchCase": 1,
        "VariableDeclarator": 1,
        "outerIIFEBody": 1,
        "FunctionDeclaration": {
          "parameters": 1,
          "body": 1
        },
        "FunctionExpression": {
          "parameters": 1,
          "body": 1
        },
        "CallExpression": {
          "arguments": 1
        },
        "ArrayExpression": 1,
        "ObjectExpression": 1,
        "ImportDeclaration": 1,
        "flatTernaryExpressions": false,
        "ignoredNodes": [
          "JSXElement",
          "JSXElement *"
        ]
      }
    ],
    "jsx-quotes": [
      "off",
      "prefer-double"
    ],
    "key-spacing": [
      "error",
      {
        "beforeColon": false,
        "afterColon": true
      }
    ],
    "keyword-spacing": [
      "error",
      {
        "before": true,
        "after": true,
        "overrides": {
          "return": {
            "after": true
          },
          "throw": {
            "after": true
          },
          "case": {
            "after": true
          }
        }
      }
    ],
    "line-comment-position": [
      "off",
      {
        "position": "above",
        "ignorePattern": "",
        "applyDefaultPatterns": true
      }
    ],
    "linebreak-style": [
      "error",
      "unix"
    ],
    "lines-between-class-members": [
      "off",
      "always",
      {
        "exceptAfterSingleLine": false
      }
    ],
    "lines-around-comment": "off",
    "lines-around-directive": [
      "error",
      {
        "before": "always",
        "after": "always"
      }
    ],
    "max-depth": [
      "off",
      4
    ],
    "max-len": [
      "error",
      100,
      2,
      {
        "ignoreUrls": true,
        "ignoreComments": false,
        "ignoreRegExpLiterals": true,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true
      }
    ],
    "max-lines": [
      "off",
      {
        "max": 300,
        "skipBlankLines": true,
        "skipComments": true
      }
    ],
    "max-nested-callbacks": "off",
    "max-params": [
      "off",
      3
    ],
    "max-statements": [
      "off",
      10
    ],
    "max-statements-per-line": [
      "off",
      {
        "max": 1
      }
    ],
    "multiline-comment-style": [
      "off",
      "starred-block"
    ],
    "multiline-ternary": [
      "off",
      "never"
    ],
    "new-cap": [
      "error",
      {
        "newIsCap": true,
        "newIsCapExceptions": [],
        "capIsNew": false,
        "capIsNewExceptions": [
          "Immutable.Map",
          "Immutable.Set",
          "Immutable.List"
        ]
      }
    ],
    "new-parens": "error",
    "newline-after-var": "off",
    "newline-before-return": "off",
    "newline-per-chained-call": [
      "error",
      {
        "ignoreChainWithDepth": 4
      }
    ],
    "no-array-constructor": "error",
    "no-bitwise": "error",
    "no-continue": "error",
    "no-inline-comments": "off",
    "no-lonely-if": "error",
    "no-mixed-operators": [
      "error",
      {
        "groups": [
          [
            "+",
            "-",
            "*",
            "/",
            "%",
            "**"
          ],
          [
            "&",
            "|",
            "^",
            "~",
            "<<",
            ">>",
            ">>>"
          ],
          [
            "==",
            "!=",
            "===",
            "!==",
            ">",
            ">=",
            "<",
            "<="
          ],
          [
            "&&",
            "||"
          ],
          [
            "in",
            "instanceof"
          ]
        ],
        "allowSamePrecedence": false
      }
    ],
    "no-mixed-spaces-and-tabs": "error",
    "no-multi-assign": [
      "error"
    ],
    "no-multiple-empty-lines": [
      "error",
      {
        "max": 2,
        "maxEOF": 1
      }
    ],
    "no-negated-condition": "off",
    "no-nested-ternary": "error",
    "no-new-object": "error",
    "no-plusplus": "error",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "ForOfStatement",
        "message": "iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "no-spaced-func": "error",
    "no-tabs": "error",
    "no-ternary": "off",
    "no-trailing-spaces": [
      "error",
      {
        "skipBlankLines": false,
        "ignoreComments": false
      }
    ],
    "no-underscore-dangle": [
      "error",
      {
        "allow": [],
        "allowAfterThis": false,
        "allowAfterSuper": false,
        "enforceInMethodNames": false
      }
    ],
    "no-unneeded-ternary": [
      "error",
      {
        "defaultAssignment": false
      }
    ],
    "no-whitespace-before-property": "error",
    "nonblock-statement-body-position": "off",
    "object-curly-spacing": [
      "error",
      "always"
    ],
    "object-curly-newline": [
      "error",
      {
        "ObjectExpression": {
          "minProperties": 4,
          "multiline": true,
          "consistent": true
        },
        "ObjectPattern": {
          "minProperties": 4,
          "multiline": true,
          "consistent": true
        }
      }
    ],
    "object-property-newline": [
      "error",
      {
        "allowMultiplePropertiesPerLine": true
      }
    ],
    "one-var": [
      "error",
      "never"
    ],
    "one-var-declaration-per-line": [
      "error",
      "always"
    ],
    "operator-assignment": [
      "error",
      "always"
    ],
    "operator-linebreak": "off",
    "padded-blocks": [
      "error",
      {
        "blocks": "never",
        "classes": "never",
        "switches": "never"
      }
    ],
    "padding-line-between-statements": "off",
    "quote-props": [
      "error",
      "as-needed",
      {
        "keywords": false,
        "unnecessary": true,
        "numbers": false
      }
    ],
    "quotes": [
      "error",
      "single",
      {
        "avoidEscape": true
      }
    ],
    "require-jsdoc": "off",
    "semi": [
      "error",
      "always"
    ],
    "semi-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "semi-style": [
      "error",
      "last"
    ],
    "sort-keys": [
      "off",
      "asc",
      {
        "caseSensitive": false,
        "natural": true
      }
    ],
    "sort-vars": "off",
    "space-before-blocks": "error",
    "space-before-function-paren": [
      "error",
      {
        "anonymous": "always",
        "named": "never",
        "asyncArrow": "always"
      }
    ],
    "space-in-parens": [
      "error",
      "never"
    ],
    "space-infix-ops": "error",
    "space-unary-ops": [
      "error",
      {
        "words": true,
        "nonwords": false,
        "overrides": {}
      }
    ],
    "spaced-comment": [
      "error",
      "always",
      {
        "line": {
          "exceptions": [
            "-",
            "+"
          ],
          "markers": [
            "=",
            "!"
          ]
        },
        "block": {
          "exceptions": [
            "-",
            "+"
          ],
          "markers": [
            "=",
            "!"
          ],
          "balanced": true
        }
      }
    ],
    "switch-colon-spacing": [
      "error",
      {
        "after": true,
        "before": false
      }
    ],
    "template-tag-spacing": [
      "error",
      "never"
    ],
    "unicode-bom": [
      "error",
      "never"
    ],
    "wrap-regex": "off",
    "init-declarations": "off",
    "no-catch-shadow": "off",
    "no-delete-var": "error",
    "no-label-var": "error",
    "no-restricted-globals": [
      "error",
      "isFinite",
      "isNaN",
      "addEventListener",
      "blur",
      "close",
      "closed",
      "confirm",
      "defaultStatus",
      "event",
      "external",
      "defaultstatus",
      "find",
      "focus",
      "frameElement",
      "frames",
      "history",
      "innerHeight",
      "innerWidth",
      "length",
      "location",
      "locationbar",
      "menubar",
      "moveBy",
      "moveTo",
      "name",
      "onblur",
      "onerror",
      "onfocus",
      "onload",
      "onresize",
      "onunload",
      "open",
      "opener",
      "opera",
      "outerHeight",
      "outerWidth",
      "pageXOffset",
      "pageYOffset",
      "parent",
      "print",
      "removeEventListener",
      "resizeBy",
      "resizeTo",
      "screen",
      "screenLeft",
      "screenTop",
      "screenX",
      "screenY",
      "scroll",
      "scrollbars",
      "scrollBy",
      "scrollTo",
      "scrollX",
      "scrollY",
      "self",
      "status",
      "statusbar",
      "stop",
      "toolbar",
      "top"
    ],
    "no-shadow": "error",
    "no-shadow-restricted-names": "error",
    "no-undef": "error",
    "no-undef-init": "error",
    "no-undefined": "off",
    "no-unused-vars": [
      "error",
      {
        "vars": "all",
        "args": "after-used",
        "ignoreRestSiblings": true
      }
    ],
    "no-use-before-define": [
      "error",
      {
        "functions": true,
        "classes": true,
        "variables": true
      }
    ],
    "arrow-body-style": [
      "error",
      "as-needed",
      {
        "requireReturnForObjectLiteral": false
      }
    ],
    "arrow-parens": [
      "error",
      "as-needed",
      {
        "requireForBlockBody": true
      }
    ],
    "arrow-spacing": [
      "error",
      {
        "before": true,
        "after": true
      }
    ],
    "constructor-super": "error",
    "generator-star-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "no-class-assign": "error",
    "no-confusing-arrow": [
      "error",
      {
        "allowParens": true
      }
    ],
    "no-const-assign": "error",
    "no-dupe-class-members": "error",
    "no-duplicate-imports": "off",
    "no-new-symbol": "error",
    "no-restricted-imports": "off",
    "no-this-before-super": "error",
    "no-useless-computed-key": "error",
    "no-useless-constructor": "error",
    "no-useless-rename": [
      "error",
      {
        "ignoreDestructuring": false,
        "ignoreImport": false,
        "ignoreExport": false
      }
    ],
    "no-var": "error",
    "object-shorthand": [
      "error",
      "always",
      {
        "ignoreConstructors": false,
        "avoidQuotes": true
      }
    ],
    "prefer-arrow-callback": [
      "error",
      {
        "allowNamedFunctions": false,
        "allowUnboundThis": true
      }
    ],
    "prefer-const": [
      "error",
      {
        "destructuring": "any",
        "ignoreReadBeforeAssign": true
      }
    ],
    "prefer-destructuring": [
      "error",
      {
        "VariableDeclarator": {
          "array": false,
          "object": true
        },
        "AssignmentExpression": {
          "array": true,
          "object": true
        }
      },
      {
        "enforceForRenamedProperties": false
      }
    ],
    "prefer-numeric-literals": "error",
    "prefer-reflect": "off",
    "prefer-rest-params": "error",
    "prefer-spread": "error",
    "prefer-template": "error",
    "require-yield": "error",
    "rest-spread-spacing": [
      "error",
      "never"
    ],
    "sort-imports": [
      "off",
      {
        "ignoreCase": false,
        "ignoreMemberSort": false,
        "memberSyntaxSortOrder": [
          "none",
          "all",
          "multiple",
          "single"
        ]
      }
    ],
    "symbol-description": "error",
    "template-curly-spacing": "error",
    "yield-star-spacing": [
      "error",
      "after"
    ],
    "import/no-unresolved": [
      "error",
      {
        "commonjs": true,
        "caseSensitive": true
      }
    ],
    "import/named": "off",
    "import/default": "off",
    "import/namespace": "off",
    "import/export": "error",
    "import/no-named-as-default": "error",
    "import/no-named-as-default-member": "error",
    "import/no-deprecated": "off",
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": [
          "test/**",
          "tests/**",
          "spec/**",
          "**/__tests__/**",
          "test.{js,jsx}",
          "test-*.{js,jsx}",
          "**/*.{test,spec}.{js,jsx}",
          "**/jest.config.js",
          "**/webpack.config.js",
          "**/webpack.config.*.js",
          "**/rollup.config.js",
          "**/rollup.config.*.js",
          "**/gulpfile.js",
          "**/gulpfile.*.js",
          "**/Gruntfile{,.js}",
          "**/protractor.conf.js",
          "**/protractor.conf.*.js"
        ],
        "optionalDependencies": false
      }
    ],
    "import/no-mutable-exports": "error",
    "import/no-commonjs": "off",
    "import/no-amd": "error",
    "import/no-nodejs-modules": "off",
    "import/first": [
      "error",
      "absolute-first"
    ],
    "import/imports-first": "off",
    "import/no-duplicates": "error",
    "import/no-namespace": "off",
    "import/extensions": [
      "error",
      "always",
      {
        "js": "never",
        "jsx": "never"
      }
    ],
    "import/order": [
      "off",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index"
        ],
        "newlines-between": "never"
      }
    ],
    "import/newline-after-import": "error",
    "import/prefer-default-export": "error",
    "import/no-restricted-paths": "off",
    "import/max-dependencies": [
      "off",
      {
        "max": 10
      }
    ],
    "import/no-absolute-path": "error",
    "import/no-dynamic-require": "error",
    "import/no-internal-modules": [
      "off",
      {
        "allow": []
      }
    ],
    "import/unambiguous": "off",
    "import/no-webpack-loader-syntax": "error",
    "import/no-unassigned-import": "off",
    "import/no-named-default": "error",
    "import/no-anonymous-default-export": [
      "off",
      {
        "allowArray": false,
        "allowArrowFunction": false,
        "allowAnonymousClass": false,
        "allowAnonymousFunction": false,
        "allowLiteral": false,
        "allowObject": false
      }
    ],
    "strict": "error"
  },
  "parserOptions": {
    "ecmaFeatures": {
      "globalReturn": true,
      "generators": false,
      "objectLiteralDuplicateProperties": false,
      "experimentalObjectRestSpread": true
    },
    "ecmaVersion": 2017,
    "sourceType": "module"
  },
  "plugins": [
    "import"
  ],
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [
          ".js",
          ".json"
        ]
      }
    },
    "import/extensions": [
      ".js",
      ".jsx"
    ],
    "import/core-modules": [],
    "import/ignore": [
      "node_modules",
      "\\.(coffee|scss|css|less|hbs|svg|json)$"
    ]
  },
  "extends": [
    "/Users/me/my-project/node_modules/eslint-config-airbnb-base/rules/best-practices.js",
    "/Users/me/my-project/node_modules/eslint-config-airbnb-base/rules/errors.js",
    "/Users/me/my-project/node_modules/eslint-config-airbnb-base/rules/node.js",
    "/Users/me/my-project/node_modules/eslint-config-airbnb-base/rules/style.js",
    "/Users/me/my-project/node_modules/eslint-config-airbnb-base/rules/variables.js",
    "/Users/me/my-project/node_modules/eslint-config-airbnb-base/rules/es6.js",
    "/Users/me/my-project/node_modules/eslint-config-airbnb-base/rules/imports.js",
    "airbnb-base"
  ]
}

What did you do? Please include the actual source code causing the issue, as well as the command that you used to run ESLint.

function doSomething() {
}

(async () => {
  // eslint-disable-next-line no-restricted-syntax
  for (const item of [1, 2, 3]) {
    /* eslint-disable no-await-in-loop */
    await doSomething(item);
  }
})();

./node_modules/.bin/eslint 1.js
What did you expect to happen?
The eslint should pass (display nothing).
What actually happened? Please include the actual, raw output from ESLint.
/Users/me/my-project/npm-dmx-utils/lib/db.js
  6:33  error  Unexpected `await` inside a loop  no-await-in-loop

‚úñ 1 problem (1 error, 0 warnings)

More info
Please notice in the example above await is in the 8. line but eslint shows an error in the 6. line.
On the other hand such code passes:
function doSomething() {
}

(async () => {
  /* eslint-disable no-await-in-loop */
  // eslint-disable-next-line no-restricted-syntax
  for (const item of [1, 2, 3]) {
    await doSomething(item);
  }
})();
So it looks like the entire for / of loop is treated as a single line.2J
(f417506198d2ab8deca1e6127c164cef882d356f2018-02-20T22:03:50Z11638619:Ù
2018-02-20T07:36:25Z€Thanks for the report. It looks like the issue is that the report location for no-await-in-loop was changed -- it previously reported the await node, but it now reports the loop. This broke some eslint-disable comments.:•
2018-02-21T10:48:12Zå@kaicataldo @not-an-aardvark @piotr-s-brainhub I now had to change the location of my eslint-disable comments twice.
The first time in 4.18.0 and I was quite happy because it is a lot more intuitive to see the error on the loop and only use eslint-disable once instead of many times.
Now again in 4.18.1 because unfortunately the new behavior was rolled back.
It is not the couple of hours I spend changing this twice, but I liked the new behavior in 4.18.0 a lot better and think it is a lot more intuitive and easy to use.:◊
2018-02-21T17:31:23Zæ@doberkofler As noted in this issue, this was a regression and not an intended change. Please feel free to make an issue with a proposal if you feel the behavior should be different. Thanks!:‰
2018-02-21T17:35:42ZÀ@kaicataldo I absolutely understand. I just wanted to suggest, that people (like myself) might have already adapted the code to what they expected to be an improvement. I liked this regression; a lot ;-):´
2018-02-21T17:40:25Zí@doberkofler it's definitely a bug because a line is a line, not a block of many lines
if you want, you may propose a feature eslint-disable-block:õ
2018-02-24T17:48:22ZÇYou can always use eslint-disable and eslint-enable comments to disable eslint over multiple lines. See the docs for more details.Ñhøï;2016-11-10T02:18:52Z"2016-11-15T23:50:06Z*˛
I couldn't run the lint test with --fix and I am getting the following error.
Run command
> esw -c .eslintrc ./src '.js, .jsx' --color --fix
Error
Invalid count value
RangeError: Invalid count value
    at String.repeat (native)
    at report (/Users/Projects/uni-sh/fr-webapp/node_modules/eslint/lib/rules/indent.js:267:73)
    at checkLastReturnStatementLineIndent (/Users/Projects/uni-sh/fr-webapp/node_modules/eslint/lib/rules/indent.js:430:17)
    at EventEmitter.ReturnStatement (/Users/Projects/uni-sh/fr-webapp/node_modules/eslint/lib/rules/indent.js:1050:21)
    at emitOne (events.js:101:20)
    at EventEmitter.emit (events.js:188:7)
    at NodeEventGenerator.enterNode (/Users/Projects/uni-sh/fr-webapp/node_modules/eslint/lib/util/node-event-generator.js:40:22)
    at CodePathAnalyzer.enterNode (/Users/Projects/uni-sh/fr-webapp/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:608:23)
    at CommentEventGenerator.enterNode (/Users/Projects/uni-sh/fr-webapp/node_modules/eslint/lib/util/comment-event-generator.js:97:23)
    at Controller.enter (/Users/Projects/uniqlo-sh/fr-webapp/node_modules/eslint/lib/eslint.js:927:36)
I have resolved the issue. If there is no blank line before the return statement in anywhere in the code we will get this error message.
I have just put a blank line before the return statement then lint command with --fix is working without any issue2J
(f56c1ef0eecfb87c490310a9e77f48f5f48281452016-11-15T23:50:02Z11638619:ˇ
2016-11-10T02:33:52ZÊHi @mshameer, thanks for the issue. It looks like there's not enough information for us to know how to help you.
If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead:Á
2016-11-14T01:47:20ZŒI get the same issue every time I run with or without --fix. The error goes away if I remove the indent rule:
"indent": [2, 2, { "SwitchCase": 1, "MemberExpression": 1 }],
Happens in eslint 3.10.0 and 3.9.1:µ@
2016-11-14T03:09:34Zú@I am using the following packages for ESLint
    "eslint": "^3.8.0",
    "babel-eslint": "^7.0.0",
    "eslint-config-airbnb": "^12.0.0",
    "eslint-loader": "^1.6.0",
    "eslint-plugin-import": "^2.0.1",
    "eslint-plugin-jsx-a11y": "^2.2.3",
    "eslint-plugin-react": "^6.5.0",
    "eslint-watch": "^2.1.14",


configuration file includes below
{ "extends": "eslint-config-airbnb",
  "env": {
    "es6": true,
    "browser": true,
    "node": true,
    "mocha": true
  },
  "parser": "babel-eslint",
  "rules": {
    "require-jsdoc": [0, {
      "require": {
        "FunctionDeclaration": true,
        "MethodDefinition": false,
        "ClassDeclaration": false
      }
    }],
    "valid-jsdoc": [0, {
      "requireReturnType": true,
      "requireParamDescription": false,
      "requireReturnDescription": false
    }],
    "array-bracket-spacing": [2, "never"],
    "array-callback-return": 2,
    "arrow-body-style": 2,
    "block-scoped-var": 2,
    "block-spacing": 2,
    "brace-style": 2,
    "camelcase": 2,
    "class-methods-use-this": 2,
    "comma-dangle": 2,
    "comma-spacing": [2, {"before": false, "after": true}],
    "comma-style": [2, "last"],
    "complexity": [0, { "max": 4 }], // TODO
    "computed-property-spacing": [2, "never"],
    "consistent-return": 2,
    "consistent-this": [0, "_this"], // TODO
    "curly": 2,
    "default-case": 2,
    "dot-notation": 2,
    "eol-last": 2,
    "eqeqeq": 2,
    "func-names": 2,
    "func-style": [0, "declaration", { "allowArrowFunctions": true }], // TODO
    "global-require": 2,
    "guard-for-in": 2,
    "import/default": 0,
    "import/extensions": 0,
    "import/imports-first": 2,
    "import/named": 0,
    "import/namespace": 0,
    "import/newline-after-import": 2,
    "import/no-duplicates": 0,
    "import/no-dynamic-require": 0, // TODO
    "import/no-extraneous-dependencies": 0,
    "import/no-mutable-exports": 2,
    "import/no-named-as-default": 2,
    "import/no-named-as-default-member": 2,
    "import/no-unresolved": 0,
    "import/prefer-default-export": 0, // TODO
    "indent": [2, 2, { "SwitchCase": 1 }],
    "jsx-a11y/anchor-has-content": 0, // TODO
    "jsx-a11y/img-has-alt": 2,
    "jsx-a11y/label-has-for": 0, // TODO
    "jsx-a11y/lang": 2,
    "jsx-a11y/no-static-element-interactions": 0, // TODO
    "jsx-quotes": [2, "prefer-double"],
    "key-spacing": [2, {"beforeColon": false, "afterColon": true}],
    "keyword-spacing": 2,
    "max-depth": [0, 3], // TODO
    "max-len": [2, 160, 2],
    "max-nested-callbacks": [0, 3], // TODO
    "max-params": [0, 4], // TODO
    "new-cap": [2, { "newIsCap": true, "capIsNew": false}],
    "new-parens": 2,
    "newline-after-var": 2,
    "newline-before-return": 2,
    "no-alert": 0,
    "no-array-constructor": 2,
    "no-bitwise": 0, // TODO
    "no-caller": 2,
    "no-case-declarations": 0,
    "no-catch-shadow": 2,
    "no-cond-assign": 2,
    "no-confusing-arrow": 2,
    "no-console": 1,
    "no-constant-condition": 2,
    "no-control-regex": 2,
    "no-debugger": 1,
    "no-delete-var": 2,
    "no-div-regex": 2,
    "no-dupe-args": 2,
    "no-dupe-keys": 2,
    "no-duplicate-case": 2,
    "no-duplicate-imports": 2,
    "no-else-return": 2,
    "no-empty": 2,
    "no-empty-character-class": 2,
    "no-eq-null": 2,
    "no-eval": 2,
    "no-ex-assign": 2,
    "no-extend-native": 2,
    "no-extra-bind": 2,
    "no-extra-boolean-cast": 2,
    "no-extra-parens": 0,
    "no-extra-semi": 2,
    "no-fallthrough": 2,
    "no-floating-decimal": 2,
    "no-func-assign": 2,
    "no-implied-eval": 2,
    "no-inline-comments": 0, // TODO
    "no-inner-declarations": 2,
    "no-invalid-regexp": 2,
    "no-irregular-whitespace": 2,
    "no-iterator": 2,
    "no-label-var": 2,
    "no-labels": 2,
    "no-lone-blocks": 2,
    "no-lonely-if": 2,
    "no-loop-func": 2,
    "no-mixed-operators": 0, // TODO
    "no-mixed-spaces-and-tabs": 2,
    "no-multi-spaces": 2,
    "no-multi-str": 2,
    "no-multiple-empty-lines": [2, {"max": 1}],
    "no-native-reassign": 2,
    "no-negated-in-lhs": 2,
    "no-nested-ternary": 2,
    "no-new": 2,
    "no-new-func": 2,
    "no-new-object": 2,
    "no-new-wrappers": 2,
    "no-obj-calls": 2,
    "no-octal": 2,
    "no-octal-escape": 2,
    "no-param-reassign": 0, // TODO
    "no-plusplus": 0, // TODO
    "no-process-env": 0,
    "no-proto": 2,
    "no-prototype-builtins": 0, // TODO
    "no-redeclare": 2,
    "no-regex-spaces": 2,
    "no-restricted-syntax": 0,
    "no-return-assign": 2,
    "no-script-url": 2,
    "no-self-compare": 2,
    "no-sequences": 2,
    "no-shadow": 2,
    "no-shadow-restricted-names": 2,
    "no-spaced-func": 2,
    "no-sparse-arrays": 2,
    "no-tabs": 0,
    "no-template-curly-in-string": 0, // TODO
    "no-ternary": 0,
    "no-throw-literal": 2,
    "no-trailing-spaces": 0, // TODO
    "no-undef": 2,
    "no-undef-init": 2,
    "no-underscore-dangle": 0, // TODO
    "no-unneeded-ternary": 2,
    "no-unreachable": 2,
    "no-unused-expressions": 2,
    "no-unused-labels": 2,
    "no-unused-vars": 2,
    "no-use-before-define": 2,
    "no-useless-concat": 2,
    "no-useless-constructor": 2,
    "no-useless-escape": 2,
    "no-var": 2,
    "no-void": 2,
    "no-warning-comments": [0, { "terms": ["todo"] }],
    "no-with": 2,
    "object-curly-spacing": [2, "always"],
    "object-property-newline": 2,
    "operator-assignment": 2,
    "padded-blocks": [2, "never"],
    "prefer-const": 2,
    "prefer-rest-params": 0, // TODO
    "quote-props": 2,
    "quotes": [2, "single"],
    "radix": 2,
    "react/display-name": 0,
    "react/forbid-prop-types": 0,
    "react/jsx-filename-extension": 0,
    "react/jsx-first-prop-new-line": 2,
    "react/jsx-no-bind": 0, // TODO
    "react/jsx-no-duplicate-props": 2,
    "react/jsx-no-undef": 2,
    "react/jsx-sort-props": 2,
    "react/jsx-uses-react": 2,
    "react/jsx-uses-vars": 2,
    "react/jsx-wrap-multilines": 2,
    "react/no-danger": 2,
    "react/no-did-mount-set-state": 2,
    "react/no-did-update-set-state": 2,
    "react/no-find-dom-node": 0, // TODO
    "react/no-multi-comp": 2,
    "react/no-render-return-value": 2,
    "react/no-unescaped-entities": 2,
    "react/no-unknown-property": 2,
    "react/no-unused-prop-types": 0, // TODO
    "react/prefer-es6-class": 0, // TODO
    "react/prefer-stateless-function": 0, // TODO
    "react/prop-types": 0, // TODO
    "react/react-in-jsx-scope": 2,
    "react/self-closing-comp": 2,
    "react/sort-comp": 0, // TODO
    "react/style-prop-object": 0,
    "semi": [2, "always"],
    "semi-spacing": [2, {"before": false, "after": true}],
    "sort-vars": 0,
    "space-before-blocks": [2, "always"],
    "space-before-function-paren": [2, {"anonymous": "always", "named": "never"}],
    "space-in-parens": [2, "never"],
    "space-infix-ops": 2,
    "space-unary-ops": [2, {"words": true, "nonwords": false}],
    "spaced-comment": [2, "always"],
    "use-isnan": 2,
    "valid-typeof": 2,
    "vars-on-top": 2,
    "wrap-iife": 2,
    "wrap-regex": 2,
    "yoda": 2
  },
  "plugins": [
    "react",
    "import"
  ],
  "settings": {
    "import/parser": "babel-eslint",
    "import/resolve": {
      "moduleDirectory": ["node_modules", "src"]
    }
  },
  "ecmaFeatures": {
    "arrowFunctions": true,
    "binaryLiterals": true,
    "blockBindings": true,
    "classes": true,
    "defaultParams": true,
    "destructuring": true,
    "forOf": true,
    "modules": true,
    "objectLiteralComputedProperties": true,
    "objectLiteralDuplicateProperties": true,
    "objectLiteralShorthandMethods": true,
    "objectLiteralShorthandProperties": true,
    "octalLiterals": true,
    "regexUFlag": true,
    "regexYFlag": true,
    "spread": true,
    "superInFunctions": true,
    "templateStrings": true,
    "unicodeCodePointEscapes": true,
    "globalReturn": true,
    "jsx": true
  },
  "globals": {
    "__DEVELOPMENT__": true,
    "__CLIENT__": true,
    "__SERVER__": true,
    "__DISABLE_SSR__": true,
    "__DEVTOOLS__": true,
    "__DLLS__": true,
    "socket": true,
    "chai": true,
    "icepick": true,
    "sinon": true,
    "shallow": true,
    "mount": true,
    "testHelpers": true,
    "webpackIsomorphicTools": true
  }
}:‘
2016-11-14T05:15:31ZªThank you both for the info. However, could you please provide an example of code which causes this error? It's hard to determine the cause of an issue without being able to reproduce it.:≠
2016-11-14T15:42:06ZîUnfortunately I haven't tracked down the code causing it yet. It just continues to blow up the linting of our build. I'll update if I track it down.:√
2016-11-14T16:32:29Z™@not-an-aardvark Based on the stack trace, it looks like this is a regression introduced by 16367a8
I'm still trying to figure out what code might cause an issue, though.:‚	
2016-11-14T19:38:24Z…	I was able to narrow down a repro:
// .eslintrc.js
module.exports = {
    "parserOptions": {
        "ecmaFeatures": {
            "globalReturn": true
        }
    },
    "rules": {
        "indent": ["error", 2]
    }
};
// test.js
return (
  42
  );
$ npm ls --depth 0
~/Desktop/7573
‚îî‚îÄ‚îÄ eslint@3.10.0

$ node_modules/.bin/eslint test.js
Invalid count value
RangeError: Invalid count value
    at String.repeat (native)
    at report (~/Desktop/7573/node_modules/eslint/lib/rules/indent.js:267:73)
    at checkLastReturnStatementLineIndent (~/Desktop/7573/node_modules/eslint/lib/rules/indent.js:430:17)
    at EventEmitter.ReturnStatement (~/Desktop/7573/node_modules/eslint/lib/rules/indent.js:1048:21)
    at emitOne (events.js:96:13)
    at EventEmitter.emit (events.js:188:7)
    at NodeEventGenerator.enterNode (~/Desktop/7573/node_modules/eslint/lib/util/node-event-generator.js:40:22)
    at CodePathAnalyzer.enterNode (~/Desktop/7573/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:608:23)
    at CommentEventGenerator.enterNode (~/Desktop/7573/node_modules/eslint/lib/util/comment-event-generator.js:97:23)
    at Controller.enter (~/Desktop/7573/node_modules/eslint/lib/eslint.js:925:36):ü
2016-11-14T20:22:44ZÜI debugged this code a little bit, and the issue is in this line: https://github.com/eslint/eslint/blob/master/lib/rules/indent.js#L267
The reason why is because needed is 0 and lastNodeCheckEndOffset is 1. So repeat function is called with -1 which causes Invalid count value.
This is based on the example @btmills provided above. I'm not 100% sure what the desired behavior here is. Since it looks like the code is currently unable to remove indentations as a fix, and it can only add it. @not-an-aardvark any ideas?:ä
2016-11-14T20:28:57ZÒThe code is able to remove indentations as a fix. The issue is that the desired indent is coming out as a negative number for some reason. The correct behavior would be for the desired indent size to be 0, which would cause desiredIndent to be an empty string.
For what it's worth, I think this code has the correct behavior:
return (
  42
  ) // <-- same as above example, except no semicolon
So I'm guessing there is an off-by-one error somewhere caused by the semicolon after the closing paren.ÍçÏ/2016-05-10T00:50:46Z"2016-05-13T15:14:41Z*ÿWhat version of ESLint are you using?
v2.9.0
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
NA
What did you do? Please include the actual source code causing the issue.
compareFn that sorts the fixes to be applied is buggy for overlapping range. For input [[4,10] 5,10]] it sorts and returns [[4,10],[5,10]], while for input [[5,10],[4,10]] it returns [[5,10],[4,10]] . ES6 spec says Calling comparefn(a, b) always returns the same value v when given a specific pair of values a and b as its two arguments.
What did you expect to happen?
What actually happened? Please include the actual, raw output from ESLint.
This breaks source-code-fixer unit test for node+chakracore.2G
(d311a6229353e2b4e11c3339a6caed689c50e3e22016-05-13T15:14:39Z72561:ö
2016-05-10T01:51:35ZÅHmm. Since we're trying to apply fixes in reverse order of occurrence, I would say we should probably expand the logic to compare the range ends, then the range starts.
Something like
var compareFn = function (a, b) {
    return (b[1] - a[1]) || (b[0] - a[0]);
});
@nzakas, do you have any thoughts on this? You probably know the logic surrounding the auto-fix implementation the best.:É
2016-05-10T01:54:31ZkJust FYI, I had gitter chat about this issue sometime back with @ilyavolodin and he is aware of this issue.:Ó
2016-05-10T06:25:23Z’I think the problem is that we are comparing begging of range b with the end of range a. I get why we are doing it, but it doesn't seem to take into account overlapping ranges. In any case, sort function shouldn't care what's passed in first, and should always return the same result for same input independent of order it was in originally.Ç	¿õL2017-12-22T10:29:16Z"2018-01-04T19:53:58Z*ÕTell us about your environment

ESLint Version: v4.13.1
Node Version: -
npm Version: -

What parser (default, Babel-ESLint, etc.) are you using?

default

Please show your full configuration:
What did you do? Please include the actual source code causing the issue, as well as the command that you used to run ESLint.

/*eslint no-extra-parens: [error, all] */

for (a in (b, c));
for (a of (b, c));
Online demo

What did you expect to happen?
ESLint reports an error:

3:11 - Gratuitous parentheses around expression. (no-extra-parens)

Because for (a of b, c); is syntax error. (related to acornjs/acorn#642)
What actually happened? Please include the actual, raw output from ESLint.
ESLint reports 2 errors:

3:11 - Gratuitous parentheses around expression. (no-extra-parens)
4:11 - Gratuitous parentheses around expression. (no-extra-parens)2I
(9fcfabfb3b99c79b7adc42a7a72f3df90eab2fa62018-01-04T19:53:57Z3421197:o
2017-12-30T21:35:42ZW@mysticatea if this issue hasn't already been claimed I'd be interested in fixing this!:B
2017-12-31T03:57:38Z*@erindepew Please! I have not started yet.„Âó;2016-11-10T09:11:10Z"2016-11-11T17:26:28Z*óWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7574


What changes did you make? (Give an overview)
This fixes several bugs in object-shorthand's autofixing.


Previously, if an object had a computed key that was anything other than an identifier corresponding to a generator function property, the fixer would output unbalanced square brackets with undefined as the property name.
({ [foo.bar]: function*() {} });

// was previously fixed to:

({ [*[undefined]() {} }); // unexpected `undefined`


Previously, the fixer would output invalid syntax if there was a space between a computed property and its closing bracket.
({ [ foo ]: function() {} });

// was previously fixed to:

({ [ foo () {} }); // no closing ]


Previously, the fixer would output invalid syntax for generator functions if there was a space before the star.
({ foo: function *() {} });

// was previously fixed to:

({ *foo*() {} }); // extra star


Previously, the fixer would output incorrect fixes for async functions (#7574).
({ foo: async function() {} });

// was previously fixed to:

({ foonction() {} }); // lol `foonction`


Is there anything you'd like reviewers to focus on?
This is a fairly bad bug, since the resulting code after autofixing an async function is still syntactically valid (so the user won't notice the issue), but it does something completely different than before. I'm hoping we can expedite this PR to get the fix into the upcoming release.
However, it is a semver-patch change, so it could also go into a patch release if we decide to create one for this release.2J
(b8d6e48b302bf2cb2059b4c388f8d4ae756e7b112016-11-11T17:26:28Z11638619:œ
2016-11-10T09:11:11Z∂@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @NickHeiner, @platinumazure and @martijndeh to be potential reviewers.:
2016-11-10T09:11:12ZLGTM:
2016-11-10T10:41:53ZLGTM:;
2016-11-10T10:44:01Z#Updated to add the requested tests.Íù‚B2017-05-05T16:51:35Z"2017-05-10T06:59:04Z*ÖTell us about your environment

ESLint Version:
master
Node Version:
6.10
npm Version:
3.10

What parser (default, Babel-ESLint, etc.) are you using?
typescript
Please show your full configuration:
module.exports = {
//    "extends": ["eslint:all"],
    "parser": "typescript-eslint-parser",
    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module",
        "ecmaFeatures": {
            "jsx": true
        }
    },
    "rules": {
        "indent": "error"
    }
};
What did you do? Please include the actual source code causing the issue.
Invalid
const fooLongName
        = 1,
    barLongName
        = 2,
    bazLongName
        = 3;
What did you expect to happen?
I expected this to be a valid indentation style. The indent-legacy rule allows for this style. Also if equal operators are on the previous line it is considered a valid indentation.
Valid
const fooLongName =
        1,
    barLongName =
        2,
    bazLongName =
        3;
What actually happened? Please include the actual, raw output from ESLint.
It is expected to be indented like so:
const fooLongName
    = 1,
    barLongName
    = 2,
    bazLongName
    = 3;
/mnt/c/Users/reyad.attiyat/Workspace/eslint-test/test-var-indent.ts
  2:1  error  Expected indentation of 4 spaces but found 8  indent
  4:1  error  Expected indentation of 4 spaces but found 8  indent
  6:1  error  Expected indentation of 4 spaces but found 8  indent

I can a create a PR to fix this. Just want to confirm this is not intended behavior. When the equal operator is on the line with the variable identifier the assignment indentation is ignored completely. We should probably do the same when the equal operator is on the same line as the assignment.
I have tested the changes made in #8498 and it does not fix this case.2I
(de0b4ad7bd820ade41b1f606008bea68683dc11a2017-05-10T06:59:04Z2373964:ƒ
2017-05-05T18:40:02Z´This seems like a bug to me, I suppose. The rule ignores the indentation of the equals signs in assignments, so it makes sense to be consistent with variable declarations.:õ
2017-05-05T18:47:30ZÇI will work on a fix.
This is the last issue I have with the new rule. Everything else works much better than the old indent rule!§
áöL2017-12-22T06:21:58Z"2017-12-23T20:02:54Z*–What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #8535.



What changes did you make? (Give an overview)
Logical-and now counts the same as logical-or for increasing cyclomatic complexity in a function. (a && b is the same as !(!a || !b), so either operator should increase complexity)
Since this change will result in strictly non-decreasing complexity, this will result in more warnings reported, hence "Update".
Is there anything you'd like reviewers to focus on?
Not really.2H
(75c741946e4255cdd8e744578bf474b3a7571cec2017-12-23T20:02:53Z284282:_
2017-12-22T06:46:00ZG@not-an-aardvark Please take another look, at your convenience. Thanks!:L
2017-12-22T18:44:14Z4Closing/reopening to attempt another AppVeyor build.:2
2018-01-08T20:08:52ZThis was a breaking change:∫
2018-01-08T20:13:50Z°@jking90 ESLint‚Äôs policy is that a minor release can break your build, and they recommend using ~ to specify the version you require, instead of the default ^.:3
2018-01-08T21:55:09Z@j-f1 thanks for clarifying√¿‘ 2015-10-18T10:09:50Z"2015-10-19T01:26:09Z*“Using /* no-extend-native: 2 */ does catch this:
Object.defineProperty(Object.prototype, 'lint', {value: 2});
but not this:
Object.defineProperties(Object.prototype, {
  lint: {value: 2}
});
Using ESLint v1.7.12I
(f7124e1f250d13505cfc9282dbcd5439f2e1e1122015-10-18T23:56:12Z5128013:Ó
2015-10-18T10:09:59Z’Thanks for the issue! If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead

Requesting a new rule? Please see Proposing a New Rule for instructions.ñ	lü92016-10-08T23:02:55Z"2016-10-11T12:32:58Z*≤What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7326

Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
(n/a) I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
This updates the fixer for yoda to correctly handle expressions where the operands are parenthesized. Previously, the location of parentheses was not swapped when the fixer swapped the order of operands.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(5d08c335780c4ae605616d57462326b6d5a2c7642016-10-11T12:32:58Z11638619:√
2016-10-08T23:02:56Z™@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @btmills, @nzakas and @vitorbal to be potential reviewers.:
2016-10-08T23:02:56ZLGTM˙*˙¶82016-09-22T01:00:59Z"2016-10-07T19:16:18Z*ÛWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[ ] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[x] Other, please explain:
Changing behavior of a CLI option (--print-config).

Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
(n/a) I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
Since --print-config operates on one file, I've changed the option from being boolean-valued to being string-valued (in other words, the file for which user wants to print a config becomes an argument to the option itself).
This is technically a breaking change because this use is now broken: eslint --print-config --other-options-here fileName.js. In addition, it will no longer flag if too many files are passed in. However, the advantage of this is the optionator output for this option is improved and we get validation for free. Consensus seems to be that this is not a breaking change, because --print-config --some-option fileName.js was never really intended to work, it just happened to because of the implementation.
Needed to update optionator to pick up a bugfix (otherwise, non-boolean options at the end of a command line were not validated properly).
Is there anything you'd like reviewers to focus on?
Nothing in particular.2H
(c9a7ec57604519046fdd267e6bb5ccfe9107ba692016-10-07T19:16:18Z284282:≥
2016-09-22T01:01:00ZöThanks for the pull request, @platinumazure! I took a look to make sure it's ready for merging and found some changes are needed:

The commit summary must be 72 characters or shorter. Please check out our guide for how to properly format your commit summary and update it on this pull request.

Can you please update the pull request to address these?
(More information can be found in our pull request guide.):“
2016-09-22T01:01:00Zπ@platinumazure, thanks for your PR! By analyzing the annotation information on this pull request, we identified @christophercrouzet, @mysticatea and @gyandeeps to be potential reviewers:
2016-09-22T01:02:02ZLGTM:£
2016-09-22T04:09:41ZäI don't think it's breaking, it's a bug fix. We always intended for print-config to work on a file, it was just not enforced before (bug).:°
2016-09-22T19:19:16Zà@eslint/eslint-tsc Just want to confirm, should this be regarded as a bug-fix and non-breaking, per @ilyavolodin's comment here? Thanks!:
2016-09-23T05:37:55ZLGTM:±
2016-09-23T05:39:27Zò@nzakas I've added the logic and test back in, though I changed the error message for clarity. Please let me know if further changes are needed. Thanks!:∂	
2016-09-23T20:45:36Zù	It does wrap, but prettily (I.e., first character of second line aligns
with first character of first line). I don't think it necessarily needs to
be shrunk, if you were thinking the wrapping would be ugly and go to the
left side of the console. Still want this shrunk?
On Sep 23, 2016 1:43 PM, "Nicholas C. Zakas" notifications@github.com
wrote:

@nzakas requested changes on this pull request.
In lib/options.js
#7206 (review):

@@ -216,8 +216,8 @@ module.exports = optionator({
},
{
option: "print-config",


       type: "Boolean",



       description: "Print the configuration to be used"



       type: "path::String",



       description: "Print the configuration which would be used for linting a given file (linting will not occur)"




I'm guessing this will cause the text to wrap when output on the console.
I'm not sure this needs to be changed from the previous text, but if it
does, then can you make it a bit shorter?
‚Äî
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
#7206 (review),
or mute the thread
https://github.com/notifications/unsubscribe-auth/AARWeiUyF5KgKb_3kbIKj1o0XX9l68VXks5qtB3CgaJpZM4KDXga
.:©
2016-09-24T05:23:57Zê@nzakas Here's how my eslint --help looks with this change:

Personally I think this should work, but let me know if you want it shorter anyway.:Ç
2016-09-26T19:34:46ZjI still think it should be shorter. We have documentation for details, these should just be short phrases.:”
2016-09-26T20:26:31Z∫@nzakas Could I get a suggestion of what you're getting at? (Note that there are other options which go onto two lines.) I'm not sure how to shorten what I've got without losing meaning.:“
2016-09-27T20:47:20ZπOptionator does nice line wrapping at all widths. That being said, you could rephrase it to something like:
Print the config to be used when linting the given file (linting won't occur):â
2016-10-01T22:35:22Zq@platinumazure I think you can just leave the message as it was before. I don't see a great need for changing it.:
2016-10-06T05:03:45ZLGTM:Å
2016-10-06T05:06:40ZË@nzakas I've changed the option description-- it's shorter, but I wanted to at least allude to the option argument. It fits on one line on my terminal (which is 80 characters wide). I've also reclassified this as a non-breaking bugfix per consensus on this issue. Please let me know if anything else needs to change.
Also, please let me know if I still need to do anything to get this accepted? I think TSC can just accept if they like? (Nobody has objected to the idea yet, at any rate.)©lû92016-10-08T16:56:14Z"2016-10-11T12:33:02Z*∑Tell us about your environment

ESLint Version: 3.7.1
Node Version: 6.7.0
npm Version: 3.7.4

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:
eslint --fix --no-eslintrc --rule 'yoda: 2' test.js

What did you do? Please include the actual source code causing the issue.
while (0 === (a)) {}

while (0 === (a = b)) {}
What did you expect to happen?
while ((a) === 0) {}

while ((a = b) === 0) {}
What actually happened? Please include the actual, raw output from ESLint.
while (a === (0) {}

while (a = b === (0) {}2J
(5d08c335780c4ae605616d57462326b6d5a2c7642016-10-11T12:32:58Z11638619:ó
2016-10-08T19:22:23Z˛Hi @Hirse, thanks so much for submitting this issue. This is an unfortunate bug and I hope we'll be able to resolve this soon!
Ping @not-an-aardvark: I might have a chance to look at this today, but if you find time and want to look at this, let me know.:V
2016-10-08T21:15:28Z>Oops. I'll look at if now if you're not already looking at it.:œ
2016-10-08T21:46:07Z∂Had to run a few errands, please feel free to investigate. Thanks!
On Oct 8, 2016 2:15 PM, "Teddy Katz" notifications@github.com wrote:

Oops. I'll look at if now if you're not already looking at it.
‚Äî
You are receiving this because you commented.
Reply to this email directly, view it on GitHub
#7326 (comment), or mute
the thread
https://github.com/notifications/unsubscribe-auth/AARWenQQ8RpnrQfCVqjKuCrXH9_r9q0Aks5qx-vRgaJpZM4KRvZL
.:,
2016-10-08T23:03:48ZSee #7327 for a fix.ôÀ÷12016-06-09T22:53:39Z"2016-06-13T22:35:53Z*ôWhat version of ESLint are you using?

v2.11.1

What parser (default, Babel-ESLint, etc.) are you using?

default.

Please show your full configuration:

Configuration is the main subject of this issue.
I use eslint-config-mysticatea sharable config.

Case 1 is: {"extends": "mysticatea/es2015"}
Case 2 is: {"extends": "mysticatea"}


Those 2 configs are the same file (es2015.js) because main: "es2015.js"

What did you do? Please include the actual source code causing the issue.

Lint a file with each case configuration.

What did you expect to happen?

Both case 1 & 2 work fine. Those 2 config files are the same file.

What actually happened? Please include the actual, raw output from ESLint.

Case 1 works fine.
Case 2 does not work.

Cannot find module 'eslint-config-base.js'
Referenced from: mysticatea
Referenced from: C:\Users\t-nagashima.AD\Documents\GitHub\sandbox\.eslintrc.json
Error: Cannot find module 'eslint-config-base.js'
Referenced from: mysticatea
Referenced from: C:\Users\t-nagashima.AD\Documents\GitHub\sandbox\.eslintrc.json
    at Object.ModuleResolver.resolve (C:\Users\t-nagashima.AD\Documents\GitHub\sandbox\node_modules\eslint\lib\util\module-resolver.js:75:19)
    at resolve (C:\Users\t-nagashima.AD\Documents\GitHub\sandbox\node_modules\eslint\lib\config\config-file.js:473:33)
    at load (C:\Users\t-nagashima.AD\Documents\GitHub\sandbox\node_modules\eslint\lib\config\config-file.js:490:24)
    at C:\Users\t-nagashima.AD\Documents\GitHub\sandbox\node_modules\eslint\lib\config\config-file.js:386:36
    at Array.reduceRight (native)
    at applyExtends (C:\Users\t-nagashima.AD\Documents\GitHub\sandbox\node_modules\eslint\lib\config\config-file.js:363:28)
    at load (C:\Users\t-nagashima.AD\Documents\GitHub\sandbox\node_modules\eslint\lib\config\config-file.js:525:22)
    at C:\Users\t-nagashima.AD\Documents\GitHub\sandbox\node_modules\eslint\lib\config\config-file.js:386:36
    at Array.reduceRight (native)
    at applyExtends (C:\Users\t-nagashima.AD\Documents\GitHub\sandbox\node_modules\eslint\lib\config\config-file.js:363:28)

es2015.js has extends: "./base.js", but ESLint searched 'eslint-config-base.js' module.

This may be related in #6338.2I
(fb49c7fb119c6d2a2a0441a01190bda8a91723532016-06-13T22:35:53Z1937871á¡ôK2017-11-15T08:56:47Z"2017-11-19T19:03:29Z*‘Tell us about your environment

ESLint Version: 4.11.0
Node Version: v9.2.0
npm Version: 5.5.1

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

Configuration

const config = {
    parserOptions: {
        ecmaVersion: 6,
    },
    rules: {
        'prefer-destructuring': ['warn'],
    },
};

What did you do? Please include the actual source code causing the issue, as well as the command that you used to run ESLint.

// eslint-test.js
const code = `
class Node {
    static get inheritance() {
        return ['node'];
    }
}
class Element extends Node {
    static get inheritance() {
        const inheritance = super.inheritance;
        inheritance.push('element');
        return inheritance;
    }
}
console.log(Element.inheritance);
`;
const {Linter} = require('eslint');
const linter = new Linter();
const config = {
    parserOptions: {
        ecmaVersion: 6,
    },
    rules: {
        'prefer-destructuring': ['warn'],
    },
};
const messages = linter.verify(code, config);
for (const message of messages) {
    console.log(message);
}

node ./eslint-test.js
What did you expect to happen?
I expect prefer-destructuring ignores the const inheritance = super.inheritance; statement.
const {inheritance} = super throws a SyntaxError.
What actually happened? Please include the actual, raw output from ESLint.
{ ruleId: 'prefer-destructuring',
  severity: 1,
  message: 'Use object destructuring.',
  line: 9,
  column: 15,
  nodeType: 'VariableDeclarator',
  source: '        const inheritance = super.inheritance;',
  endLine: 9,
  endColumn: 40 }2I
(a015234daa4497bfdbacaf28e5ec34c4a15c91eb2017-11-19T19:03:28Z7359068:I
2017-11-15T19:16:30Z1Thanks for reporting, I can reproduce this issue.:î
2017-11-19T16:55:16Z|Also I get "ESlint: Use array destructing. (prefer-destructing)" error with 'this':
this.searchType = this.searchOptions[0];:Œ
2017-11-20T03:34:47Zµ@igidas [this.searchType] = this.searchOptions is valid syntax and prefer-destructuring's suggestion is right.
Here's an example: https://runkit.com/kei-ito/destructuring-assignment…¥—C2017-05-27T10:40:39Z"2017-05-30T03:59:05Z*”What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:



What changes did you make? (Give an overview)
Fix #8654
Avoid checking object destructing when accessing an integer property.
Is there anything you'd like reviewers to focus on?2J
(952483362bf123684a6cd7008e763c1933c37f8d2017-05-30T03:59:04Z11701553:¿
2017-05-27T10:40:40Zß@flowmemo, thanks for your PR! By analyzing the history of the files in this pull request, we identified @alexlafroscia and @not-an-aardvark to be potential reviewers.:0
2017-05-30T03:59:14ZThanks for contributing!°¡öK2017-11-15T10:01:37Z"2017-11-19T19:03:29Z*•What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

This fixes #9625


What changes did you make? (Give an overview)

tests/lib/rules/prefer-destructuring.js: I added a test to reproduce #9625
lib/rules/prefer-destructuring.js: I updated a line to fix #9625

Is there anything you'd like reviewers to focus on?
No2I
(a015234daa4497bfdbacaf28e5ec34c4a15c91eb2017-11-19T19:03:28Z7359068:÷
2017-11-15T20:03:42ZΩI agree that it would be nice to have a test. Having said that, I think the implementation in this PR already handles that case correctly by reporting an error because const {bar} = super.foo is legal.
Conceptually, the rule should report an error only when node.object is a valid expression on its own. So I think checking the type of node.object is correct here, regardless of whether node.object is another MemberExpression or contains super.:Ô
2017-11-15T20:09:45Z÷Thanks for the explanation. You are right that I had misunderstood conceptually how this rule is supposed to work and thought that const { bar } = super.foo; was invalid syntax, when in reality it is valid. Thanks!:¸
2017-11-16T01:44:48Z„Thank you for the reviewing. I added another test to check what @platinumazure pointed out.
I found that I can omit get and the simplest test reproducing #9625 is
class Foo extends Bar {
  foo() {
    var foo = super.foo;
  }
}:0
2017-11-19T19:03:34ZThanks for contributing!˘ ñ∞J2017-10-26T02:39:21Z"2017-10-27T22:01:09Z*„
I'm not sure what the project's policy is about safety of fixes, but the no-var can produce unsafe transformations when the var is global which makes it unsuitable for fixing arbitrary files.
This is a minimal example that isn't safe (and here's a demo page link to it):
var x = 10;
When fixed by eslint it produces:
let x = 10;
However this isn't equivalent as in the global context let/const statements have different semantics than var, take this code for instance:
<script>
    var x = 10;
</script>
<script>
    var x = 20;
</script>
<script>
    console.log(x);
    console.log(window.x);
</script>
Running that code will print 20 twice, but in contrast if we run the eslint "fixed" version:
<script>
    let x = 10;
</script>
<script>
    let x = 20;
</script>
<script>
    console.log(x);
    console.log(window.x);
</script>
In this case it will print 10 followed by undefined, in addition the second script will simply throw an error that x is already defined.
Now I'm not planning on using globals in this way in new code, but a lot of files in the code base are many years old and I know I've seen var someGlobalName being used to add things as window.someGlobalName so running the no-var on the code base is very likely to break things. It would be nice at least to have an option to no-var like ignore-global or something like that to prevent breaking of such code.2I
(d80b9d0752d36148d4852f47903f675ca2f272db2017-10-27T22:01:08Z1937871:â
2017-10-26T04:37:55ZHey @Jamesernator
Thanks for submitting an issue. Definitely a good point.
With regards to the global variables, and how to ignore, ESLint has ignore lines (https://eslint.org/docs/user-guide/configuring#disabling-rules-with-inline-comments) which could solve the issue if there are only a few globals floating around. Would this work for you?
The other part is whether there can be an option that takes in a list of var variable names to ignore those variables and not fix them. Is that correct?:Ÿ
2017-10-26T04:56:31Z¿I think the best thing to do here would be to continue to report top-level global variables, but not autofix them. The fact that autofixing can cause code to break here seems like a bug to me.:ß
2017-10-26T05:47:36Zé@VictorHom I'm not actually writing new var someGlobalName declarations, it's just the case that when running eslint with fix on existing files in the code base it might break files that contain those declarations so added comments doesn't work as I don't know what the contents of all files might be. @not-an-aardvark's solution is exactly what I want anyway so if that happens that would be ideal.
The option I was suggesting was more a workaround so that you could tell eslint to ignore top level vars:
/* eslint "no-var": [2, { ignoreGlobal: true }], "prefer-const": [2] */
var someGlobalVar = ...

function foo() {
    var localVariable = 10
    ...
}

// Would become:
var someGlobalVar = ... // Not changed as it breaks

function foo() {
    const localVariable = 10 // Changed as it's safe
    ...
}
Now one thing that might be a bit annoying about removing the autofix for global vars is that people might be using it with CommonJS instead of the browser in which case it is safe to autofix global var declarations, so perhaps it'd be better for some option like environment which could be set  to hint that autofixing global var declarations is safe.
E.g. maybe something like:
/* eslint "no-var": [2, { env: 'commonjs' }] */

var x = 10; // Will get fixed because it's safe to fix within commonjs

// ---------

/* eslint "no-var": [2, { env: 'browser' }] */

var x = 10; // Won't get fixed because it's not safe to fix in the browser context
           // but it would be nice if it were still reported 
           // to be fixed manually:\
2017-10-26T05:50:51ZDI'm üëç to disabling the autofix logic for global var declarations.:˜
2017-10-26T05:52:32ZﬁWe could probably tighten that constraint so that we still autofix top-level var declarations when using sourceType: module or ecmaFeatures: { globalReturn: true }, because in those scenarios no global variable is created.:*
2017-10-27T13:32:43ZI'll work on this.¢Úü;2016-11-12T04:17:00Z"2016-11-14T15:50:47Z*°
Tell us about your environment

ESLint Version: master
Node Version: 7.1.0
npm Version: 3.10.9

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
(none)
What did you do? Please include the actual source code causing the issue.
/* eslint no-useless-return: error */

function foo() {
  return;
  while (foo) return;
  foo;
}
What did you expect to happen?
ESLint should have either reported a useless return statement, or exited without reporting any errors.
What actually happened? Please include the actual, raw output from ESLint.
no-useless-return threw an error:
Maximum call stack size exceeded
RangeError: Maximum call stack size exceeded
    at WeakMap.get (native)
    at isReturned (/path/to/eslint/lib/rules/no-useless-return.js:119:41)
    at Array.filter (native)
    at markReturnStatementsOnSegmentAsUsed (/path/to/eslint/lib/rules/no-useless-return.js:179:22)
    at Array.forEach (native)
    at markReturnStatementsOnSegmentAsUsed (/path/to/eslint/lib/rules/no-useless-return.js:180:22)
    at Array.forEach (native)
    at markReturnStatementsOnSegmentAsUsed (/path/to/eslint/lib/rules/no-useless-return.js:180:22)
    at Array.forEach (native)
    at markReturnStatementsOnSegmentAsUsed (/path/to/eslint/lib/rules/no-useless-return.js:180:22)2J
(c4dd015a8dd7542f9a4b2432700f7fb143f90bb22016-11-14T15:50:44Z11638619∂"tÚ/2016-05-10T19:58:35Z"2016-05-13T15:25:51Z*˜What version of ESLint are you using?
v2.9.0
What parser (default, Babel-ESLint, etc.) are you using?
Babel-ESLint
Please show your full configuration:
What did you do? Please include the actual source code causing the issue.
Because of the error, it is unclear as to where this error exists. See below.
.eslintrc
{
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 6,
    "jsx": true,
    "experimentalObjectRestSpread": true
  },
  "extends": "eslint:recommended",
  "rules": {
    "comma-dangle": [0, "always-multiline"],
    "complexity": [1, 6],
    "curly": [2, "all"],
    "default-case": [2],
    "dot-notation": [1],
    "dot-location": [1, "property"],
    "eqeqeq": [2, "allow-null"],
    "guard-for-in": [2],
    "indent": [2, 2],
    "quotes": [2, "single"],
    "linebreak-style": [2, "unix"],
    "max-depth": [1, 3],
    "max-len": [1, 120],
    "max-params": [1, 4],
    "max-statements": [1, 20],
    "no-alert": [2],
    "no-caller": [2],
    "no-console": [0],
    "no-else-return": [1],
    "no-extend-native": [2],
    "no-eval": [2],
    "no-floating-decimal": [2],
    "no-implied-eval": [2],
    "no-invalid-this": [2],
    "no-loop-func": [1],
    "no-multi-str": [2],
    "no-native-reassign": [2],
    "no-new-func": [2],
    "no-new-wrappers": [2],
    "no-proto": [2],
    "no-return-assign": [2, "except-parens"],
    "no-script-url": [2],
    "no-self-compare": [2],
    "no-sequences": [2],
    "no-unexpected-multiline": [2],
    "no-unused-expressions": [2],
    "no-unused-vars": [2, {"args": "none"}],
    "no-useless-call": [2],
    "no-var": [2],
    "no-with": [2],
    "radix": [2],
    "semi": [2, "never"],
    "valid-jsdoc": [1, {
      "prefer": {
        "returns": "return"
      },
      "requireParamDescription": false,
      "requireReturn": false,
      "requireReturnDescription": false
    }]
  },
  "env": {
    "es6": true,
    "browser": true,
    "mocha": true,
    "node": true
  },
  "ecmaFeatures": {
    "jsx": true,
    "experimentalObjectRestSpread": true
  },
  "plugins": [
    "react"
  ]
}
.eslintignore
**/*.html
app
libs
mixpanel.jsx
node_modules

What did you expect to happen?
Output a useful error
What actually happened? Please include the actual, raw output from ESLint.
gsquare567@Macintosh-2 ~/S/mobile> eslint -c .eslintrc **/*.jsx
Cannot read property 'range' of null
TypeError: Cannot read property 'range' of null
    at isSafe (/usr/local/lib/node_modules/eslint/lib/rules/no-loop-func.js:123:6)
    at Array.every (native)
    at EventEmitter.checkForLoops (/usr/local/lib/node_modules/eslint/lib/rules/no-loop-func.js:186:29)
    at emitOne (events.js:82:20)
    at EventEmitter.emit (events.js:169:7)
    at NodeEventGenerator.enterNode (/usr/local/lib/node_modules/eslint/lib/util/node-event-generator.js:40:22)
    at CodePathAnalyzer.enterNode (/usr/local/lib/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:607:23)
    at CommentEventGenerator.enterNode (/usr/local/lib/node_modules/eslint/lib/util/comment-event-generator.js:97:23)
    at Controller.traverser.traverse.enter (/usr/local/lib/node_modules/eslint/lib/eslint.js:886:36)
    at Controller.__execute (/usr/local/lib/node_modules/eslint/node_modules/estraverse/estraverse.js:397:31)
gsquare567@Macintosh-2 ~/S/mobile> eslint -v
v2.9.02I
(67916b9bde7a2790490a44d0191a5983bc9351d02016-05-13T15:25:51Z1937871:≤
2016-05-10T20:31:55ZôCould you try the same file without babel-eslint? babel-eslint is not 100% compatible with ESTree, as such some of the errors might be due to the parser.:Œ
2016-05-11T01:25:53ZµAfter experimentation, using the default parser and
"experimentalObjectRestSpread": true

along with
"no-loop-func": [1],

causes the error. When I remove either of those, it works.:f
2016-05-11T01:33:55ZNThank you for this issue.
Could you provide the source code to reproduce this?:q
2016-05-11T02:13:03ZYit is unclear as to where this error exists.

Ah, I'm sorry.
I'll investigate this later.:n
2016-05-11T08:49:50ZVCan you run it with --debug? It should tell you the file it was linting when it failed:Ï
2016-05-11T14:44:34Z”I got it.
If a reference in a function in a loop uses a let variable before the declaration, this crash happens.
/* eslint-env es6 */
/* eslint no-loop-func:2 */

while (true) {
    (function() { a; });
}
let a;ê£û;2016-11-12T03:13:27Z"2016-11-14T18:30:57Z*√What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7581


What changes did you make? (Give an overview)
no-return-await is intended to flag redundant uses of await in returned values. However, if return await is used within a try block, the await is not redundant.
function baz() {
  return Promise.reject('something bad happened');
}

async function foo() {
  try {
    return await baz();
  } catch (err) {
    // error handled
  }
}

async function bar() {
  try {
    return baz();
  } catch (err) {
    // the error won't end up here
  }
}
In the above example, foo() will return a fulfilled Promise, and bar() will return a rejected Promise.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(8a0e92ad88b28f8616b4c4e2cd4e7446d1b713062016-11-14T18:30:57Z11638619:¨
2016-11-12T03:13:28Zì@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @ljharb to be a potential reviewer.:
2016-11-12T03:13:28ZLGTM:
2016-11-12T04:30:17ZLGTM:_
2017-04-17T20:37:02ZGLooks like the docs need to be updated to include info about this case?Ì°ÊB2017-05-06T03:27:37Z"2017-05-09T00:30:33Z*¢Tell us about your environment

ESLint Version: 4.0.0-alpha.2
Node Version: 7.10.0
npm Version: 4.2.0

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
module.exports = {
    "extends": "eslint:recommended"
};
What did you do? Please include the actual source code causing the issue.
const number = 5;
number / (5 / 5);
What did you expect to happen?
No error
What actually happened? Please include the actual, raw output from ESLint.
Cannot read property 'range' of null
TypeError: Cannot read property 'range' of null
    at SourceCode.getTokenAfter (/node_modules/eslint/lib/token-store/index.js:319:17)
    at EventEmitter.BinaryExpression[operator='/'] > BinaryExpression[operator='/'] (/node_modules/eslint/lib/rules/no-unexpected-multiline.js:85:55)
    at emitOne (events.js:96:13)
    at EventEmitter.emit (events.js:191:7)
    at NodeEventGenerator.applySelector (/node_modules/eslint/lib/util/node-event-generator.js:265:26)
    at NodeEventGenerator.applySelectors (/node_modules/eslint/lib/util/node-event-generator.js:294:22)
    at NodeEventGenerator.enterNode (/node_modules/eslint/lib/util/node-event-generator.js:308:14)
    at CodePathAnalyzer.enterNode (/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:602:23)
    at Traverser.enter (/node_modules/eslint/lib/eslint.js:909:36)
    at Traverser.__execute (/node_modules/estraverse/estraverse.js:397:31)2I
(873310e511ec3d13178dc05c0c78409d881ddf3a2017-05-09T00:30:25Z8822573:I
2017-05-06T03:32:57Z1Thanks for reporting, I can reproduce this issue.æ°ÁB2017-05-06T04:26:44Z"2017-05-09T00:30:26Z*†What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
What changes did you make? (Give an overview)
The rule should only execute if two division operators are found next to each other.
Is there anything you'd like reviewers to focus on?
I'm not sure if this is the best solution but it works as far as I see it.2I
(873310e511ec3d13178dc05c0c78409d881ddf3a2017-05-09T00:30:25Z8822573:ø
2017-05-06T04:26:45Z¶@BridgeAR, thanks for your PR! By analyzing the history of the files in this pull request, we identified @glenjamin, @vitorbal and @alberto to be potential reviewers.:;
2017-05-06T04:26:45Z#All committers have signed the CLA.:Æ
2017-05-06T04:26:45ZïThanks for the pull request, @BridgeAR! I took a look to make sure it's ready for merging and found some changes are needed:

The commit summary must be 72 characters or shorter. Please check out our guide for how to properly format your commit summary and update it on this pull request.

Can you please update the pull request to address these?
(More information can be found in our pull request guide.):
2017-05-06T04:29:59ZLGTM:
2017-05-06T04:51:10ZLGTM:0
2017-05-09T00:30:21ZThanks for contributing!†Ÿº72016-09-10T02:24:14Z"2016-09-13T17:13:49Z*√Tell us about your environment

ESLint Version: 3.5.0
Node Version: 6.5.0
npm Version: 3.10.3

What parser (default, Babel-ESLint, etc.) are you using?
Default
Please show your full configuration:
rules:
  line-comment-position:
    - error
    - above
What did you do? Please include the actual source code causing the issue.
Linted the following file:
// Meep
console.log("Meep");
What did you expect to happen?
For there not to be any linting errors.
What actually happened? Please include the actual, raw output from ESLint.
There was a linting error:
1:1  error  Expected comment to be beside code  line-comment-position

The cause of the problem is a typo here. typeof option should be typeof options.2H
(afd132a10782fb8a6f1fe35ef39604940baf79c02016-09-13T17:13:46Z284282:\
2016-09-10T02:43:25ZDConfirmed in online demo. Thanks for the report, I'll work on a fix!ÇCöM2018-01-24T02:10:04Z"2018-02-16T22:16:16Z*ﬂ	Tell us about your environment

ESLint Version: 4.16.0
Node Version: 8.9.4
npm Version: 5.6.0

What parser (default, Babel-ESLint, etc.) are you using? babel-eslint
Please show your full configuration:

Configuration

module.exports = {
    parser: 'babel-eslint',
    rules: {
        indent: ['error', 4, {
            ignoredNodes: [
                'JSXOpeningElement',
            ],
        }],
    },
};

What did you do? Please include the actual source code causing the issue, as well as the command that you used to run ESLint.

function Test() {
    return (
        <div>
            {_.map(array, arrayValue => {
                return (condition &&
                    <Inner
                        one={arrayValue.one}
                    >
                        {arrayValue.two}
                    </Inner>
                );
            })}
        </div>
    );
}

./node_modules/.bin/eslint test.jsx
What did you expect to happen?
No error.
What actually happened? Please include the actual, raw output from ESLint.
path/to/sandbox/2018-01-23/test.jsx
  8:1  error  Expected indentation of 24 spaces but found 20  indent

‚úñ 1 problem (1 error, 0 warnings)
  1 error, 0 warnings potentially fixable with the `--fix` option.2J
(0e4ae22d4adebd1cb603ac9cb55daf70c9b921d02018-02-16T22:16:10Z11638619:õ
2018-01-24T02:16:49ZÇI dug into the source code a little on this one already. It seems, to my untrained eye, that the crux of the matter is this line:

  
    
      eslint/lib/rules/indent.js
    
    
         Line 954
      in
      9cbb487
    
    
    
    

        
          
           if (!unknownNodeTokens.has(offsets.getFirstDependency(token))) { 
        
    
  


This line checks the token corresponding to the node about to be ignored, finds the token upon which its indentation is based, and ensures it's outside the current node before ignoring it.
In this scenario, I want to ignore indentation around JSXOpeningElement, so I have it in my ignoredNodes. What I observed with a little debugging is that the opening token < on line 6 gets properly ignored because the token upon which its indentation is based belongs to another node. However, the closing token > on line 8 has its indentation based upon the opening token (line 6), which belongs to the same node, and therefore doesn't make it into the _ignoredTokens WeakSet.:Ù
2018-01-24T02:38:04Z€I think this is happening because JSX indentation currently works in two phases:


First the JSXElement handler gets run, which indents all tokens in the JSXElement by one level relative to the first <, even the tokens that are part of the opening element. After that happens the desired indentation looks like this:
<Inner
    one={arrayValue.one}
    >
    {arrayValue.two}
</Inner>


Normally, the JSXOpeningElement handler would run afterwards and correct the indentation of the first >, but that's not happening in this case because JSXOpeningElement is ignored.


The opening < on line 6 is actually getting ignored for unrelated reasons -- the indent rule currently doesn't check the operands of logical operators (e.g. &&).:Ÿ
2018-01-24T22:07:57Z¿Hm, interesting. That implied to my mind that I could add JSXElement to the ignoredNodes but that resulted in:
path/to/sandbox/2018-01-23/test.jsx
   8:1  error  Expected indentation of 24 spaces but found 20  indent
  10:1  error  Expected indentation of 24 spaces but found 20  indent

‚úñ 2 problems (2 errors, 0 warnings)
  2 errors, 0 warnings potentially fixable with the `--fix` option.

Which is the wrong direction, but better matches the original scenario of using Airbnb's recommended set of ignoredNodes: https://github.com/airbnb/javascript/blob/53b2d7d245ba4abefc0429bfda4a46f099b9ace5/packages/eslint-config-airbnb-base/rules/style.js#L141
If I copy paste theirs (with changing 2 spaces to 4) in a new config:

Configuration

module.exports = {
    parser: 'babel-eslint',
    rules: {
        // this option sets a specific tab width for your code
        // https://eslint.org/docs/rules/indent
        indent: ['error', 4, {
            SwitchCase: 1,
            VariableDeclarator: 1,
            outerIIFEBody: 1,
            // MemberExpression: null,
            FunctionDeclaration: {
                parameters: 1,
                body: 1
            },
            FunctionExpression: {
                parameters: 1,
                body: 1
            },
            CallExpression: {
                arguments: 1
            },
            ArrayExpression: 1,
            ObjectExpression: 1,
            ImportDeclaration: 1,
            flatTernaryExpressions: false,
            // list derived from https://github.com/benjamn/ast-types/blob/HEAD/def/jsx.js
            ignoredNodes: ['JSXElement', 'JSXElement > *', 'JSXAttribute', 'JSXIdentifier', 'JSXNamespacedName', 'JSXMemberExpression', 'JSXSpreadAttribute', 'JSXExpressionContainer', 'JSXOpeningElement', 'JSXClosingElement', 'JSXText', 'JSXEmptyExpression', 'JSXSpreadChild'],
            ignoreComments: false
        }],
    },
};


It results in:
path/to/sandbox/2018-01-23/test.jsx
  8:1  error  Expected indentation of 24 spaces but found 20  indent

‚úñ 1 problem (1 error, 0 warnings)
  1 error, 0 warnings potentially fixable with the `--fix` option.

(exactly the same error as originally)
So it's a less simple scenario than my original bug report, but this is actually what I care about fixing given the project I'm working in is based on Airbnb's config.
I'm not sure how this impacts your analysis, given that we can assume JSXElement's handler doesn't get run and the same symptom manifests.:π
2018-02-01T23:48:07Z†@airbnb is having this same problem; when JSXOpeningElement is in ignored nodes, the > on a multiline opening element - which has no node type - is not ignored.:ë
2018-02-01T23:53:45Z¯@not-an-aardvark

The opening < on line 6 is actually getting ignored for unrelated reasons -- the indent rule currently doesn't check the operands of logical operators (e.g. &&).

I know this is ancillary to the issue, but is this something that should be changed? Should we only ignore the first token of the node after &&? Or maybe only ignore all tokens on the first line of the operand following &&, but allow the rule to lint later lines against the first line? I'll open a new issue if so. Thanks!:ı
2018-02-01T23:57:29Z‹I think the current behavior is that it ignores the first token after &&, but the rule lints later lines against the indentation of that first token.
Removing the "ignores logical operators" behavior is tracked in #8978.:π
2018-02-02T00:40:09Z†Reading this issue; I'm still not sure what code change would be needed to fix it :-/ certainly the >, since it's part of the JSXOpeningElement node, should be ignored.
Perhaps the JSXElement handler should be checking to see if any of those nodes are already ignored by another selector?:á
2018-02-02T17:17:30ZÓIf my explanation in #9882 (comment) was correct, then I think the solution would be to update the JSXElement handler to only offset the children of the element without offsetting the tokens that are part of the openingElement or closingElement. However, #9882 (comment) makes me think my explanation might not have been correct, so I need to investigate it further.:è
2018-02-02T18:00:17ZˆThis seems to resolve the originally-posted issue, provided that JSXElement and JSXOpeningElement are ignored:
diff --git a/lib/rules/indent.js b/lib/rules/indent.js
index 79a0f25c..acc52463 100644
--- a/lib/rules/indent.js
+++ b/lib/rules/indent.js
@@ -1043,7 +1043,6 @@ module.exports = {
                 offsets.ignoreToken(operator);
                 offsets.ignoreToken(tokenAfterOperator);
                 offsets.setDesiredOffset(tokenAfterOperator, operator, 0);
-                offsets.setDesiredOffsets([tokenAfterOperator.range[1], node.range[1]], tokenAfterOperator, 1);
             },
 
             "BlockStatement, ClassBody"(node) {

@ljharb You mentioned that you're also having this same problem. Have you encountered it in any situations which don't involve a LogicalExpression right before the opening element (e.g. foo && <Bar></Bar>?
(If you have a codebase with a lot of errors from this issue, one fast way to check could be to temporarily apply that diff and see if any errors remain.):è
2018-02-02T18:04:05ZwThat‚Äôs the only scenario I‚Äôve seen it in, but i can‚Äôt really survey 10k+ files :-)
I‚Äôll try it locally as well.Ù	Ú†;2016-11-12T04:53:38Z"2016-11-14T15:50:44Z*¢What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (template)
See #7583


What changes did you make? (Give an overview)
When no-useless-return encounters an unreachable code path segment, it backtracks from that code path segment until it finds a segment that is reachable. If that reachable segment is a return statement, the return statement is considered to not be useless.
If an entire loop was unreachable, the rule would continue "backtracking" in circles forever, because it was always able to find an unreachable code path segment preceding the current one. This resulted in a stack overflow.
/* eslint no-useless-return: error */

function foo() {
  return;
  while (bar) baz;
  qux;
}
This fix makes the rule keep track of segments that it has checked, so that it won't go in circles and check the same segment twice.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(c4dd015a8dd7542f9a4b2432700f7fb143f90bb22016-11-14T15:50:44Z11638619:∞
2016-11-12T04:53:39Zó@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea to be a potential reviewer.:
2016-11-12T04:53:39ZLGTM—ø˜/2016-05-11T11:39:07Z"2016-05-17T18:31:50Z*£What version of ESLint are you using?
v2.9.0
What parser (default, Babel-ESLint, etc.) are you using?
default.
Please show your full configuration:
nothing.
What did you do? Please include the actual source code causing the issue.
/*eslint-env es6*/
/*eslint generator-star-spacing:[2, "after"]*/

class A {
    * foo() {
    }

    * [Symbol.iterator]() {
    }
}
What did you expect to happen?
No errors.
What actually happened? Please include the actual, raw output from ESLint.
generator-star-spacing rule is warning at * [Symbol.iterator]() {2I
(9fce04e76dcbae96445e9f6868947aba07d0d6622016-05-17T18:31:50Z1937871:,
2016-05-14T11:26:56ZI'm working on this.íñµJ2017-10-27T14:15:53Z"2017-10-27T22:01:09Z*íWhat is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix
Fixes #9520.
What changes did you make? (Give an overview)
This PR makes no-var rule not fixing global variables.
If the program has special scope (sourceType: "module" or ecmaFeatures: { globalReturn: true }), the rule keeps the current behavior.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2I
(d80b9d0752d36148d4852f47903f675ca2f272db2017-10-27T22:01:08Z1937871Ô
ùÌB2017-05-07T06:00:38Z"2017-05-08T15:48:47Z*–	What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 7.10.0
npm Version: 4.2.0

What did you do? Please include the actual source code causing the issue.
const RuleTester = require("eslint").RuleTester;
const ruleTester = new RuleTester();

ruleTester.run("foo", require("eslint/lib/rules/new-parens"), {
    valid: [
        {
            code: "foo",
            options: { ok: true } // <-- not an array
        }
    ],
    invalid: []
});
What did you expect to happen?
I expected RuleTester to either run to completion or give a clear error message.
What actually happened? Please include the actual, raw output from ESLint.
RuleTester produced a confusing error message:
TypeError: item.options.concat is not a function
      at runRuleForItem (lib/testers/rule-tester.js:308:46)
      at testInvalidTemplate (lib/testers/rule-tester.js:455:28)
      at Context.RuleTester.it (lib/testers/rule-tester.js:553:25)

What changes did you make? (Give an overview)
This updates RuleTester to output a clear error message when options for a test is not an array.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(833a0cad511ea41037c6eb752bbbf907d92888ac2017-05-08T15:48:47Z11638619:
2017-05-07T06:07:31ZLGTMí,∂„C2017-06-01T16:07:52Z"2017-07-04T19:57:50Z*˙See #8353 for background.
I think the best way to fix this is to allow users the option to go either way and to be very explicit about how the options work.
Here's one proposal along those lines:

Rename --quiet to --no-report-warnings (supporting --quiet as an alias and preserving its behavior), to avoid reporting warnings but possibly fix them
Add option --no-fix-warnings to support not running autofix on warnings but possibly report them (no effect if --fix not specified)
Users can use both to completely ignore warnings altogether

With this proposal, our CLI options become more clear and more flexible with regard to whether warnings are reported/logged (--quiet/--no-report-warnings) and whether warnings are fixed (--no-fix-warnings).
I'll champion.2H
(f00854e068b5d453c99139daf216221eb920a9cb2017-07-04T19:57:45Z284282:v
2017-06-03T19:33:20Z^Maybe we could add a third option to not report and not fix, something like --ignore-warnings.:t
2017-06-03T19:51:33Z\Could that be achieved by using --no-fix-warnings and --no-report-warnings at the same time?:˝
2017-06-03T19:54:34Z‰I agree with @not-an-aardvark, we probably wouldn't need a third option.
‚Ä¶
On Jun 3, 2017 12:51 PM, "Teddy Katz" ***@***.***> wrote:
 Could that be achieved by using --no-fix-warnings and --no-report-warnings
 at the same time?

 ‚Äî
 You are receiving this because you were assigned.
 Reply to this email directly, view it on GitHub
 <#8675 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AARWepBmyrYJuhJJV69JMpHtA8Ox9PCKks5sAZ0lgaJpZM4NtCGA>
 .:º
2017-06-03T19:55:58Z£It could it would just alias those two options. I understand that adding too many options to the CLI would be a problem. I'm fine with just having the two options.:ƒ
2017-06-05T04:03:38Z´In my first impression, it's surprisable that warnings still fix code with --no-report-warnings. I think better that people cannot choose "not reported but fixed".
How about?



Option
Reported
Fixed




(default)
Yes
Yes


--ignore-warnings=fix
Yes
No


--ignore-warnings=full (alias --quiet)
No
No:É
2017-06-05T05:01:22ZÍ@mysticatea Yes, I think you're right, that behavior is unexpected (and was the root of the original issue). I like the direction you're going, but maybe we could bikeshed the name a little bit?
How about this?

--warnings=report-and-fix (default)
--warnings=report-only (no fix, but report warnings)
--warnings=none (don't report or fix warnings, alias --quiet):±
2017-06-05T05:04:53ZòSo are we proposing that the behavior of --quiet should change to not fix warnings? At the moment, warnings are fixed but are not reported with --quiet.:˜
2017-06-05T05:08:49ZﬁI would strongly prefer that `--quiet` not fix warnings, as it seems
unintuitive, unexpected, and dangerous. Maybe `--quiet` should be
deprecated (and removed in next major) in favor of a more explicit option
from one of the proposals here.

Or, if we think `--quiet` fixing warnings might be a bug (I certainly
consider it one), then it could be done as a semver-patch or semver-minor
change. I would be okay with that too. In that case, I think there is still
room for a new option for "report but don't fix warnings".
‚Ä¶
On Jun 4, 2017 22:04, "Teddy Katz" ***@***.***> wrote:
 So are we proposing that the behavior of --quiet should change to not fix
 warnings? At the moment, warnings are fixed but are not reported with
 --quiet.

 ‚Äî
 You are receiving this because you were assigned.
 Reply to this email directly, view it on GitHub
 <#8675 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AARWelI5w1rbKkftTYPZgHbzrNFLqC1Aks5sA3BXgaJpZM4NtCGA>
 .:ú
2017-06-05T05:13:43ZÉI wonder if it would be better to just change --quiet to not fix warnings, and not introduce any other options. Then --warnings=report-and-fix would just be the default with --fix, and --warnings=report-only could be simulated by running with --fix --quiet once, and then again without --fix.
I'm not sure I like that the --warnings option would be meaningless unless --fix is also used.:π
2017-06-05T05:30:54Z†Just arranged.
Granted, looks good to me if we change that ‚Äª as a bug.



Option
Error reported
Error fixed
Warning reported
Warning fixed




(default)
‚úî

‚úî



--quiet
‚úî





--fix
‚úî
‚úî
‚úî
‚úî


--fix --quiet
‚úî
‚úî

‚Äª


‚Äª Currently, warnings are fixed but not reported.:¥
2017-06-05T05:59:00ZõI am 100% behind @mysticatea's latest proposal (just fix --quiet). If a few other people (especially TSC) get behind it, I'll change the top post and reclassify this as a bug.
I'm not super attached to adding a "report but don't fix warnings" option in this PR. The thing I'm really championing here is making it so people can completely silence warnings (both report and fix), which --quiet should probably do.:¶
2017-06-08T07:10:18ZçCreated #8699 for if we want to treat this as a bugfix. If we decide this should be treated as a feature or enhancement, I can close that PR.:Ÿ
2017-06-08T12:46:53Z¿ping @gyandeeps since you disagreed with changing --quiet behaviour
Another possibility would be to add options to --fix: all (default), error, warning (not sure this one makes a lot of sense):◊
2017-06-30T07:26:00ZæIf @gyandeeps still disagrees with changing --quiet behavior, should this perhaps go on TSC agenda?
Now that #8730 is merged, I'm willing to write a PR using that functionality to avoid autofixing warnings when --quiet is passed. I might hold off a day or two to see if TSC might want this to go a different direction.∞
›D2017-06-25T02:05:06Z"2017-06-26T02:06:14Z*»What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8791)



What changes did you make? (Give an overview)
Due to a bug, an invalid Config instance was getting used when applying extensions to a baseConfig object. This updates the Config constructor to use the correct context, and to make sure the config cache exists when the baseConfig is evaluated.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(0d041e715927d28ef1c6f4e72c539148404966a52017-06-26T02:06:13Z11638619:
2017-06-25T02:05:07ZLGTM:«
2017-06-25T02:05:10ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @gyandeeps, @nzakas and @mysticatea to be potential reviewers.™ÆÎB2017-05-07T05:06:09Z"2017-05-10T06:55:46Z*©What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8541)



What changes did you make? (Give an overview)
Previously, the prefer-arrow-callback autofixer would simply replace a function expression with an arrow function. However, arrow functions have a different precedence than regular functions, so this was sometimes creating invalid syntax. This commit updates the fixer to parenthesize the arrow functions if necessary to avoid a syntax error.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(927ca0dca7485b99ae8fd6a2b2b8f1f7156eeed02017-05-10T06:55:45Z11638619“çÒ02016-05-26T11:24:32Z"2016-05-27T20:48:37Z*ÙOn running eslint --init I get the following error. I've tried a few different choices and all result in the same problem. The init phase never succeeds.
$ ./node_modules/eslint/bin/eslint.js --init
? How would you like to configure ESLint? Answer questions about your style
? Are you using ECMAScript 6 features? Yes
? Are you using ES6 modules? Yes
? Where will your code run? Browser
? Do you use CommonJS? Yes
? Do you use JSX? Yes
? Do you use React Yes
? What style of indentation do you use? Spaces
? What quotes do you use for strings? Single
? What line endings do you use? Unix
? Do you require semicolons? Yes
? What format do you want your config file to be in? JavaScript
Unexpected token }
SyntaxError: Unexpected token }
    at Object.parse (native)
    at check (/home/peter/Projects/rikesh-accounting-web/node_modules/eslint/lib/util/npm-util.js:76:25)
    at Object.checkDevDeps (/home/peter/Projects/rikesh-accounting-web/node_modules/eslint/lib/util/npm-util.js:116:12)
    at installModules (/home/peter/Projects/rikesh-accounting-web/node_modules/eslint/lib/config/config-initializer.js:86:29)
    at processAnswers (/home/peter/Projects/rikesh-accounting-web/node_modules/eslint/lib/config/config-initializer.js:262:5)
    at null.completed (/home/peter/Projects/rikesh-accounting-web/node_modules/eslint/lib/config/config-initializer.js:469:30)
    at PromptUI.onCompletion (/home/peter/Projects/rikesh-accounting-web/node_modules/eslint/node_modules/inquirer/lib/ui/prompt.js:57:10)
    at AnonymousObserver.Rx.AnonymousObserver.AnonymousObserver.completed (/home/peter/Projects/rikesh-accounting-web/node_modules/eslint/node_modules/inquirer/node_modules/rx-lite/rx.lite.js:1550:12)
    at AnonymousObserver.Rx.internals.AbstractObserver.AbstractObserver.onCompleted (/home/peter/Projects/rikesh-accounting-web/node_modules/eslint/node_modules/inquirer/node_modules/rx-lite/rx.lite.js:1489:14)
    at Subject.Rx.Subject.addProperties.onCompleted (/home/peter/Projects/rikesh-accounting-web/node_modules/eslint/node_modules/inquirer/node_modules/rx-lite/rx.lite.js:5871:19)

What version of ESLint are you using?
$ ./node_modules/eslint/bin/eslint.js -v
v2.10.2

$ node -v
v4.4.5

What parser (default, Babel-ESLint, etc.) are you using?
n/a
Please show your full configuration:
n/a
What did you do? Please include the actual source code causing the issue.
See above.
What did you expect to happen?
To successfully create the .eslintrc
What actually happened? Please include the actual, raw output from ESLint.
Syntax Error2I
(77dd2b4cecd080917ab6e2d46f90b227d5a4d2f32016-05-27T20:48:34Z7041728:ˇ
2016-05-26T16:08:24ZÊTotally guessing here, but I'm wondering if we're trying to parse your package.json here and maybe there's a syntax error in that file? Could you post that here and/or try running the contents of package.json through jsonlint.com?:ã
2016-05-26T16:28:09ZÚYou are correct! I've continued working on this project and now the package.json is correctly formatted and eslint --init works fine... I'll close the issue but it might be worth catching this error and showing a more useful error message :-):t
2016-05-26T16:31:47Z\I agree we should handle this better. Hope it's okay if i reopen and retitle the issue. üòÑ:´
2016-05-26T16:44:14ZíReproduced with package.json file consisting solely of an open curly brace. We should catch this and display a friendly message to the user (IMO).:(
2016-05-27T00:53:53ZWorking on this!ùµˇ.2016-04-30T04:00:22Z"2016-05-03T18:15:53Z*ªWhat version of ESLint are you using?
2.9.0
What parser (default, Babel-ESLint, etc.) are you using?
babel-eslint = 6.0.4
Please show your full configuration:
rules: {
   ...
   "object-shorthand": 1,
   ...
}

What did you do? Please include the actual source code causing the issue.
const constant = 'foo'
....
const obj = { [constant]: constant }

What did you expect to happen?
This should pass or I am missing something on how to do it.
What actually happened? Please include the actual, raw output from ESLint.
warning  Expected property shorthand  object-shorthand2I
(ef8cbffe79c61c5813dfad5716929c4c31759d0c2016-05-03T18:15:51Z7041728:É
2016-04-30T07:42:57ZÍCan you share the config you're using? Do you have the object-shorthand rule turned on? With the information you provided, it looks like you're not using the object shorthand syntax and, assuming you have the rule turned on in your config, this warning is the expected behavior. The shorthand notation would be:
const constant = 'foo'
const obj = { 
  constant
}:]
2016-04-30T07:53:25ZE@kaicataldo Look again at the example. The property name is computed.:C
2016-04-30T07:54:34Z+Ah, I see. Shouldn't be doing this so late.:ˆ
2016-04-30T15:17:47Z›Updated my original comment to add the configuration part that is responsible for object-shorthand. I do not see any issue here. I only encountered this after upgrading to 2.9.0 and I suspect it is related to this e2ad1ec:Ó
2016-04-30T20:15:09Z’@kikoanis Yeah, sorry, I shouldn't have been trying to triage so late in the evening. It does seem like a bug introduced in this commit: e2ad1ec.
Edit: Was able to recreate locally with the default parser as well.:.
2016-05-01T20:52:06ZPR opened to fix this.:
2016-06-20T05:50:39Zgood¢
û÷D2017-06-24T01:50:47Z"2017-06-28T03:05:24Z*÷Tell us about your environment

ESLint Version: 4.1.0
Node Version: 7.10.0
npm Version: 4.2.0

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
{
  "root": true,
  "parserOptions": {
    "ecmaVersion": 2017
  },
  "rules": {
    "indent": ["error", 2, {
      "SwitchCase": 1,
      "MemberExpression": 1,
      "FunctionDeclaration": {"parameters": 1},
      "FunctionExpression": {"parameters": 1},
      "CallExpression": {"arguments": 1}
    }]
  }
}
What did you do? Please include the actual source code causing the issue.

const str = (obj =>
  Object.keys(obj).join('')
)({
  k: 'v',
});
What did you expect to happen?
No errors
What actually happened? Please include the actual, raw output from ESLint.
4:1  error  Expected indentation of 4 spaces but found 2  indent
5:1  error  Expected indentation of 2 spaces but found 0  indent

The problem seems like it's being caused by the indentation of the arrow function.
If I use a normal function:
const str = (function(obj) {
  return Object.keys(obj).join('')
})({
  k: 'v',
});
there are no errors.2J
(85c93276fc8cab588417d70c74c0b3bb1bda9c582017-06-28T03:05:20Z11638619:I
2017-06-25T05:23:49Z1Thanks for reporting, I can reproduce this issue.â.
◊D2017-06-24T03:56:35Z"2017-06-26T02:06:20Z*∆During release today, release script failed while generating formatters page for the site. It looks like glob-based configs introduced a regression for configs that use extend with baseConfig. This branch of code is not covered by unit tests, and it wasn't clear how to fix it during the release. So we skipped generation of formatter page and decided to fix it over the weekend.
We traced the error to this line of code: 
  
    
      eslint/lib/config/config-file.js
    
    
         Line 567
      in
      7d9e3be
    
    
    
    

        
          
           return configObject.extends ? applyExtends(configObject, "") : configObject; 
        
    
  


Also config is passing two properties here: 
  
    
      eslint/lib/config.js
    
    
         Line 70
      in
      7d9e3be
    
    
    
    

        
          
           ? ConfigOps.merge({}, ConfigFile.loadObject(options.baseConfig, this)) 
        
    
  

 but loadObject function only accepts one. Even when I changed the code locally to accept two arguments and pass configContext as second parameter into applyExtends it failed with the same error, because we only add configCache after we call loadObject.
Error message is below:
/var/lib/jenkins/workspace/Releases/ESLint Release/eslint/lib/config/config-file.js:431
            throw e;
            ^

TypeError: Cannot read property 'getConfig' of undefined
Referenced from: undefined
    at load (/var/lib/jenkins/workspace/Releases/ESLint Release/eslint/lib/config/config-file.js:582:51)
    at configExtends.reduceRight.e (/var/lib/jenkins/workspace/Releases/ESLint Release/eslint/lib/config/config-file.js:421:36)
    at Array.reduceRight (native)
    at applyExtends (/var/lib/jenkins/workspace/Releases/ESLint Release/eslint/lib/config/config-file.js:405:28)
    at Object.loadObject (/var/lib/jenkins/workspace/Releases/ESLint Release/eslint/lib/config/config-file.js:567:35)
    at new Config (/var/lib/jenkins/workspace/Releases/ESLint Release/eslint/lib/config.js:70:46)
    at new CLIEngine (/var/lib/jenkins/workspace/Releases/ESLint Release/eslint/lib/cli-engine.js:427:23)
    at getFormatterResults (/var/lib/jenkins/workspace/Releases/ESLint Release/eslint/Makefile.js:467:15)
    at Function.target.gensite (/var/lib/jenkins/workspace/Releases/ESLint Release/eslint/Makefile.js:736:31)
    at Object.global.target.(anonymous function) [as gensite] (/var/lib/jenkins/workspace/Releases/ESLint Release/eslint/node_modules/shelljs/make.js:36:40)2J
(0d041e715927d28ef1c6f4e72c539148404966a52017-06-26T02:06:13Z11638619:«
2017-06-24T04:28:33ZÆSimplified reproduction case:
const eslint = require("eslint");
const cliEngine = new eslint.CLIEngine({ baseConfig: { extends: "eslint:recommended" } });

console.log(cliEngine.executeOnText("foo"));

Expected output
{
  "results": [
    {
      "filePath": "<text>",
      "messages": [
        {
          "ruleId": "strict",
          "severity": 2,
          "message": "Use the global form of 'use strict'.",
          "line": 1,
          "column": 1,
          "nodeType": "Program",
          "source": "foo"
        },
        {
          "ruleId": "no-unused-expressions",
          "severity": 2,
          "message": "Expected an assignment or function call and instead saw an expression.",
          "line": 1,
          "column": 1,
          "nodeType": "ExpressionStatement",
          "source": "foo"
        },
        {
          "ruleId": "no-undef",
          "severity": 2,
          "message": "'foo' is not defined.",
          "line": 1,
          "column": 1,
          "nodeType": "Identifier",
          "source": "foo"
        },
        {
          "ruleId": "eol-last",
          "severity": 2,
          "message": "Newline required at end of file but not found.",
          "line": 1,
          "column": 4,
          "nodeType": "Program",
          "source": "foo",
          "fix": {
            "range": [
              3,
              3
            ],
            "text": "\n"
          }
        },
        {
          "ruleId": "semi",
          "severity": 2,
          "message": "Missing semicolon.",
          "line": 1,
          "column": 4,
          "nodeType": "ExpressionStatement",
          "source": "foo",
          "fix": {
            "range": [
              3,
              3
            ],
            "text": ";"
          }
        }
      ],
      "errorCount": 5,
      "warningCount": 0,
      "fixableErrorCount": 2,
      "fixableWarningCount": 0,
      "source": "foo"
    }
  ],
  "errorCount": 5,
  "warningCount": 0,
  "fixableErrorCount": 2,
  "fixableWarningCount": 0
}

This crashes with the same stack trace as above.:–
2017-06-24T17:41:57Z∑Unit tests for this error is in config.js:
it("should create config object when using baseConfig with extends", () => {
    const customBaseConfig = { extends: path.resolve(__dirname, "..", "fixtures", "config-extends", "array", ".eslintrc") },
    configHelper = new Config({ baseConfig: customBaseConfig }, linter);

    assert.equal(configHelper.baseConfig.rules["no-empty"], 2);
});
However, I still can't figure out what should be the right behavior. We keep trying to deal with configCache while loading extends, but at that point, it still hasn't been created.:ñ
2017-06-25T00:26:59Z˝Does it make sense to store the baseConfig in the configCache at all? I had thought the cache was only useful for configs read from the filesystem, but I'll have to look at the PR again to double check. (#8792 is also caused by an issue with the cache.):ä
2017-06-25T00:28:42ZÒRight, but it goes through the same code as other configs do as well. I tried to change the logic in the morning by adding checks for empty configContext, but I think something else is wrong, since the extends doesn't get resolved correctly.Ó£ù;2016-11-12T01:09:03Z"2016-11-14T18:31:00Z*«no-return-await currently doesn't consider if the return statement is inside a try block. In this case, the presence of await does meter.
Consider this:
function asyncLog() {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log('first log');
      resolve(true);
    }, 1000);
  });
}

async function foo() {
  try {
    return await asyncLog();
    // I really need this await, but no-return-await is complaining about it :(
  } finally {
    console.log('second log');
  }
}

foo();
// first log
// second log


async function bar() {
  try {
    return asyncLog();
  } finally {
    console.log('second log');
  }
}

bar();
// second log
// first log


async function baz() {
  try {
    return asyncLog();
  } catch (error) {
    // if asyncLog() rejects, error will be swallowed because I missed await :(
  }
}2J
(8a0e92ad88b28f8616b4c4e2cd4e7446d1b713062016-11-14T18:30:57Z11638619:¨
2016-11-12T01:20:03ZìThanks, I can reproduce this. So if I'm understanding correctly, would the correct behavior be to not report any return await statements in try blocks?
edit: Actually, I suppose it shouldn't report anything in catch blocks either, provided that the catch block has a finally.:t
2016-11-12T01:25:46Z\@not-an-aardvark exactly. Inside try, you have to chose whether use or not, no warns at all.:≠
2016-11-12T01:26:30ZîWhat happens if you split the await from the return?
try {
    const result = await asyncLog();
    return result;
} finally {
    // Do the thing
}:â
2016-11-12T01:29:15Zq@platinumazure That has the same behavior as
try {
    return await asyncLog();
} finally {
    // Do the thing
}:©
2016-11-12T01:30:57ZêThen I think we have a solution- no need for special logic here. Or am I
missing something? Why does the presence of a try/catch/finally block mean
we need to handle return await statements differently?
On Nov 11, 2016 6:29 PM, "Teddy Katz" notifications@github.com wrote:

@platinumazure https://github.com/platinumazure That has the same
behavior as
try {
return await asyncLog();
} finally {
// Do the thing
}
‚Äî
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
#7581 (comment), or mute
the thread
https://github.com/notifications/unsubscribe-auth/AARWeshgvv2hC6YLxRDpqFaJXVF6uzy4ks5q9QhcgaJpZM4KwQfP
.:¬
2016-11-12T01:31:38Z©The problem is that the warning message of this rule is ‚ÄúRedundant use of await on a return value‚Äù.
The term ‚ÄúRedundant‚Äù is in fact incorrect in these try cases.:—
2016-11-12T01:33:54Z∏The intention of the no-return-await rule is to flag unnecessary return await statements where await could be removed without observably changing the behavior of the code*. When return await is used within a try statement, this is not the case.

*aside from the fact that the Promise will fulfill one tick sooner®‰≠J2017-10-25T18:10:44Z"2017-10-26T15:09:34Z*ßWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (fixes #9515)



What changes did you make? (Give an overview)
This fixes an issue where cli would treat an empty-string argument as missing.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(b8aa0718c88774f7ef59b5b1ca22e1478a09b1e62017-10-26T15:09:34Z11638619Ï.èˆ.2016-04-29T15:28:12Z"2016-05-04T23:35:17Z*õ$What version of ESLint are you using?  eslint@2.8.0
What parser (default, Babel-ESLint, etc.) are you using?  "parser": "babel-eslint",
Please show your full configuration:
{
  "extends": "eslint-config-airbnb",
  "env": {
    "browser": true,
    "node": true,
    "mocha": true
  },
  "parser": "babel-eslint",
  "rules": {
    //
    // Safety
    //
    "no-unused-vars": 1,
    // Do not allow `alert` calls.
    "no-alert": 1,
    // Use the `eslint-disable-line no-console` comment for intentional console statements.
    "no-console": 1,
    // The `no-use-before-define` prevents variable and function use before definition.
    "no-use-before-define": 1,
    // The `no-var` enforces `const` and `let`.
    "no-var": 1,
    // The `block-scoped-var` warns about possibly invalid logic when `var` is declared in a block scope and used outside. We prefer `const` and `let` over `var` but keep this for now.
    "block-scoped-var": 1,
    // Disable `guard-for-in` because we use `Object.keys().forEach` and do not have to extend `Object.prototype` for older browsers.
    "guard-for-in": 0,
    // Disable `no-shadow` and `no-param-reassign` to avoid useless renaming. Be careful.
    "no-shadow": 0,
    "no-param-reassign": 0,

    //
    // Coding style
    //
    "indent": [ 1, 2, { "SwitchCase": 1 } ],
    "padded-blocks": 0,
    // The `spaced-comment` warns about the commented-out source code and dirty comments.
    "spaced-comment": 1,
    // The `comma-dangle` helps to keep version control clean if array or object items are added or removed - only the lines that are actually changed will be highlighted.
    "comma-dangle": 0,
    "space-in-parens": 0,
    // TODO(sompylasar): Re-enable `curly` and fix.
    "curly": [ 0, "all" ],
    "array-bracket-spacing": [ 1, "always" ],
    "object-curly-spacing": [ 1, "always" ],
    "computed-property-spacing": 0,
    "brace-style": [ 1, "stroustrup", { "allowSingleLine": true } ],
    "no-trailing-spaces": [ 1, { "skipBlankLines": true } ],
    "linebreak-style": [ 1, "unix" ],
    "no-multiple-empty-lines": [ 1, { "max": 3, "maxEOF": 1 } ],
    "eol-last": [ 2, "unix" ],
    "id-length": [ 1, { "min": 2, "exceptions": [ "_", "$", "i", "j", "k", "x", "y", "e" ] } ],
    "camelcase": 1,
    "func-names": 1,
    "keyword-spacing": 1,
    "space-before-blocks": 1,
    "space-before-function-paren": [ 1, { "anonymous": "always", "named": "never" } ],
    "quotes": [ 1, "single", "avoid-escape" ],
    "no-multi-spaces": [ 1, { "exceptions": { "VariableDeclarator": true, "ImportDeclaration": true } } ],
    "dot-notation": 0,
    "prefer-template": 0,
    "max-len": [ 1, 250, 4, { "ignoreComments": true } ],
    "arrow-body-style": 0,
    "object-shorthand": 0,
    "no-case-declarations": 1,

    //
    // React:
    //
    "react/prop-types": 1,
    "react/jsx-uses-react": 2,
    "react/jsx-uses-vars": 2,
    "react/react-in-jsx-scope": 2,
    "react/jsx-quotes": 0,
    "react/no-multi-comp": 0,
    "react/sort-comp": 0,
    "react/jsx-closing-bracket-location": 1,
    "react/prefer-stateless-function": 1,
    "react/jsx-space-before-closing": 1,
    "jsx-quotes": 2,
    "jsx-a11y/img-uses-alt": 0,

    //
    // ES6:
    //
    "import/default": 0,
    "import/no-duplicates": 0,
    "import/named": 0,
    "import/namespace": 0,
    "import/no-unresolved": 0,
    "import/no-named-as-default": 2,
  },
  "plugins": [
    "react",
    "import"
  ],
  "settings": {
    "import/ignore": [
      "node_modules",
      "\\.(scss|less|css)$"
    ],
    "import/resolver": {
      "webpack": {
        "config": "./webpack/configForEslintImportResolver.js"
      }
    }
  },
  "globals": {
    "__DEVELOPMENT__": true,
    "__SERVER__": true,
    "__SERVER_DEVTOOLS__": true,
    "__SERVER_DISABLE_SERVERSIDE_RENDERING__": true,
    "__CLIENT__": true,
    "__CLIENT_DEVTOOLS__": true,
    "__LOCALHOST__": true,
    "__FAST_DEVELOPMENT__": true
  }
}

What did you do? Please include the actual source code causing the issue.
// snippet 1
const def = {};
const abc = [
  (''
  ),
  def,
];
def.abc = abc;
// snippet 2
const def = {};
const abc = [
  (''),
  def,
];
def.abc = abc;
// snippet 3
const def = {};
const abc = [
  '',
  def,
];
  def.abc = abc;
// snippet 4
const def = {};
const abc = {
  x: (''
  ),
  def,
};
def.abc = abc;
What did you expect to happen?
Validation passes on all 4 snippets.
What actually happened? Please include the actual, raw output from ESLint.
// snippet 1
const def = {};
const abc = [
  (''
  ),  // error: Bad line breaking before and after ','. (comma-style)
  def,
];
def.abc = abc;
Other snippets pass.2I
(d40017f3c20f73eee70f3d07c3cc74f4e3a8fc9c2016-05-04T23:35:15Z7041728:W
2016-04-29T18:11:44Z?Can you please paste in the actual ESLint output you're seeing?:ﬂ
2016-04-30T06:02:36Z∆@nzakas It comes through the IDE (atom linter eslint), so I can't, sorry. I created a separate file and verified each snippet separately in it. I hit these two issues #6006 and #6007 in a big project, so I can't share the whole codebase, but it should be irrelevant because eslint verifies the syntax for each file separately.:ñ
2016-04-30T07:37:07Z~Any chance you can run ESLint on your files from the command line and share the output/confirm you're getting the same errors?:è
2016-04-30T14:41:24ZwPlease:
/__redacted__/eslint-test.js
  5:4  error  Bad line breaking before and after ','  comma-style

Any difference?:∫
2016-04-30T20:06:11Z°@sompylasar Thanks!
I've confirmed this also happens with the default parser. Checking it out locally, it seems that the closing parens is not taken into account in snippet 1, but IS in snippet 4. This seems like a bug to me.
More specifically in snippet 1 in the original post, previousItemToken is the empty string on line 4 at this point. However, in the case of snippet 4, previousItemToken is the closing parens.:,
2016-05-02T02:51:13ZPR opened with a fix£óÔ/2016-05-10T18:58:35Z"2016-05-27T18:07:02Z*–I think --ignore-pattern should be able to unignore files ignored in .eslintignore. Not sure if this is a bug or an enhancement.
What version of ESLint are you using?
2.9.0
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
.eslintrc.yml
root: true

env:
    node: true

extends:
    "./packages/eslint-config-eslint/default.yml"

.eslintignore
/bin/**
/build/**
/conf/**
/coverage/**
/docs/**
/jsdoc/**
/templates/**
/tests/bench/**
/tests/fixtures/**
/tests/performance/**
/tmp/**
test.js

What did you do? Please include the actual source code causing the issue.
eslint test.js --ignore-pattern '!test.js'

What did you expect to happen?
I expected test.js to get linted
What actually happened? Please include the actual, raw output from ESLint.
/Users/alberto/projects/oss/eslint/test.js
  0:0  warning  File ignored because of a matching ignore pattern. Use "--no-ignore" to override

‚úñ 1 problem (0 errors, 1 warning)2G
(7f60186376d33d36176d7f205ead7a96d3b02d562016-05-27T18:06:59Z72561:`
2016-05-13T14:42:04ZHSounds good to me.
I'm also not sure it's which a bug or an enhancement.::
2016-05-18T23:57:17Z"@eslint/eslint-team more opinions?:ë
2016-05-19T00:20:53Z¯Thanks for contributing. Double negatives are harder to reason about than positive assertions. Do we have an --include-pattern option? Would that make more sense? I'd also imagine that'd be much easier to implement than the negative negative match.:˘
2016-05-20T17:50:54Z‡@mikesherov ignore-pattern lets you specify a pattern as if it were in .eslintignore, so the "ignore" is not a verb, it's a noun.
I do think anything we support in .eslintignore should be possible using --ignore-pattern üëç:c
2016-05-20T17:51:39ZKOh, and this looks more like a bug to me since inclusions work in the file.:∞
2016-05-20T22:54:24ZóI'll relent considering that this is a bug, but I don't buy the "it's a noun not a verb so double negative isn't a problem" argument.
Mike Sherov

On May 20, 2016, at 11:51 AM, Nicholas C. Zakas notifications@github.com wrote:
Oh, and this looks more like a bug to me since inclusions work in the file.
‚Äî
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub:å
2016-05-25T19:12:30ZÛDo we have an --include-pattern option? Would that make more sense? I'd also imagine that'd be much easier to implement than the negative negative match.

Actually it would be harder, since we would have to negate it to pass it to node-ignore.œÄñM2018-01-23T18:29:57Z"2018-03-06T09:09:28Z*ŒTell us about your environment

**ESLint Version:**4.6.1
**Node Version:**6.11.3
**npm Version:**3.10.10

What parser (default, Babel-ESLint, etc.) are you using?
eslint, babel-eslint
Please show your full configuration:

Configuration

{
  "extends": [
    "airbnb"
  ],
  "plugins": [
    "react",
    "import"
  ],
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "env": {
    "es6": true,
    "browser": true,
    "node": true,
    "jest": true
  },
  "settings": {
    "import/resolver": "webpack"
  },
  "rules": {
    "jsx-a11y/label-has-for": [ 2, {
      "components": [ "Label" ],
      "required": {
        "some": [ "nesting", "id" ]
      },
      "allowChildren": false
    }],
    "arrow-body-style": 1,
    "arrow-parens": 0,
    "indent": [2, 2],
    "linebreak-style": [2, "unix"],
    "no-tabs": 2,
    "no-unused-expressions": 0,
    "semi": [2, "never"],
    "import/extensions": 0,
    "import/no-extraneous-dependencies": 0,
    "import/no-unresolved": 0,
    "import/prefer-default-export": 1,
    "jsx-a11y/href-no-hash": 2,
    "react/forbid-prop-types":   [2, { "forbid": ["any"] } ],
    "react/jsx-filename-extension": [2, { "extensions": [".js"] }],
    "react/jsx-indent": [2, 2]
  }
}

What did you do? Please include the actual source code causing the issue, as well as the command that you used to run ESLint.

            <small>By choosing to continue, you acknowledge you have reviewed our&nbsp;
              <a>information disclosure</a>.
            </small>

eslint [folder]
What did you expect to happen?
The code above should pass indent linting rules.
What actually happened? Please include the actual, raw output from ESLint.
It generated the following error:
  62:1  error  Expected indentation of 12 spaces but found 14  indent
Removing two spaces generates the same error, inverted:
[eslint] Expected indentation of 14 space characters but found 12. 
However, moving the non-breaking space to the same line as the anchor tag, with 14 spaces, does not generate an error. It appears the line ending with the non-breaking space is breaking linting on the next line, at least partially (no other errors are generated).
This works:
            <small>By choosing to continue, you acknowledge you have reviewed our
              &nbsp;<a>information disclosure</a>.
            </small>2J
(72ca5b35b843cc376a66632e07c307f9230637012018-03-06T09:09:17Z11638619:Â
2018-01-23T18:37:53ZÃHi, thanks for the report. I noticed you put "all" as your ESLint version, but I assume you haven't actually tried this on every ESLint version. Could you be more specific about what version you're using?:√
2018-01-23T18:39:23Z™Sorry, I meant to update that before submitting. What that was meant to indicate is that it's apparently present in all recent versions. I've tested 4.6.1 and the latest.:π
2018-02-12T16:05:54Z†FWIW, I noticed that while trying to upgrade from 4.15.0 to 4.16.0. Same behavior on 4.17.0.
Not sure if this is related, but this also fail since 4.16.0 :
const Foo = () => {
    return (
        <div>Some text
            <span>yolo</span> //error  Expected indentation of 8 spaces but found 12   indent
        </div>
    )
}
Not the prettiest code but I don't think this line should be flagged as badly indented.:ì
2018-02-16T00:28:46Z˙I have the same problem. For now I find this stylistic compromise acceptable for my style guide:
        <small>
          By choosing to continue, you acknowledge you have reviewed our &nbsp;
          <a>information disclosure</a>.
        </small>ù‰´J2017-10-25T17:38:05Z"2017-10-26T15:09:34Z*≈ESLint Version: 3.7.1
Node Version: 8.7.0
npm Version: 5.4.2

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration: None
Running eslint in STDIN mode on an empty file prints weirdly formated help text:
$ touch a.js
$ eslint --format=checkstyle --stdin --stdin-filename a.js < a.js
eslint [options] file.js [file.js] [dir]

Basic configuration:
  -c, --config path::String

      Use
      configuration
      from
      this
      file
      or
      shareable
      config
  --no-eslintrc

      Disable
      use
      of
      configuration
      from
      .eslintrc
  --env [String]

      Specify
      environments
  --ext [String]

      Specify
      JavaScript
      file
      extensions
      -
      default:
      .js
[‚Ä¶ lots more output ‚Ä¶]
$ echo $?
0

Is this expected?2J
(b8aa0718c88774f7ef59b5b1ca22e1478a09b1e62017-10-26T15:09:34Z11638619:4
2017-10-25T17:42:19ZNope. Thanks for the report.:
2017-10-26T15:24:39ZThanks!§Ω˙A2017-04-11T10:37:05Z"2017-04-15T16:21:04Z*‰Tell us about your environment

ESLint Version: 3.19.0
Node Version: 6
npm Version: 3

What parser (default, Babel-ESLint, etc.) are you using? babel-eslint
Please show your full configuration:
"no-unused-vars" : "warn",

What did you do? Please include the actual source code causing the issue.
Paste this into the demo:
(function ({ a }, b ) {
    return b;
})();
What did you expect to happen?
a should be detected as being unused.
What actually happened? Please include the actual, raw output from ESLint.
a passed, because I think it assumes the first parameter (the { a } object) to be padding the b param.2I
(9f540fd284dc45c48e5bc0792be34c08b7a418852017-04-15T16:21:03Z1937871:Å
2017-04-11T17:40:44ZËHi @dwelle, thanks for the issue.
I believe this is working as designed. The default rule options treat any parameter before the leftmost used parameter as "not unused", because it's possible you had to define that argument to conform to a contract not under your control. If you want earlier arguments to be flagged by this rule, use the "args": "all" option.:Ü
2017-04-11T20:08:58ZÌ@platinumazure to achieve what you're describing, I wouldn't have to actually destructure arguments[0]. I could write:
(function ( a, b ) {
    return b;
})();

but when you destructure, it's because you actually need to access child properties. It's an example. In real world, it's more like:
someApi({ a, b, c, d }, { e, f, g }) {
   // oops.. `c` is not used
   transform( a, b, d, e, f g );
}

Thus, it should still consider a in the original example (or c in the above example) as unused.:∞
2017-04-11T20:21:35ZóHmm, I think this is a bug. The point of the "args": "after-used"  option is that if the first parameter of a function is unused, it's not possible to remove it if the second argument is used. However, that's not the case here, because the variable can be removed from the destructuring pattern:
(function ({ a }, b ) {
    return b;
})();

// can be replaced with:

(function ({}, b ) {
    return b;
})();“ßø82016-09-24T23:09:46Z"2016-09-27T21:53:58Z*›What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7229 for more info on the bug.

Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
(n/a) I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
Previously, the nestedBinaryExpressions: false option would cause no-extra-parens to ignore all binary expressions, even non-nested ones.
/* eslint no-extra-parens: [2, "all", {"nestedBinaryExpressions": false}]*/

(foo) + baz // foo is not nested, so this should be reported
(foo * bar) + baz // (foo * bar) is itself a binary expression, so this should not be reported.
Is there anything you'd like reviewers to focus on?2J
(e3f95de20346a58cb2b60cec189619f13fef1c682016-09-27T21:53:58Z11638619:À
2016-09-24T23:09:48Z≤@not-an-aardvark, thanks for your PR! By analyzing the annotation information on this pull request, we identified @vitorbal, @mysticatea and @kaicataldo to be potential reviewers:
2016-09-24T23:09:48ZLGTM:°
2016-09-24T23:28:59ZàMind adding a test to ensure non-nested LogicalExpressions warn for extra parens with this config in the invalid tests? Otherwise, LGTM!:
2016-09-24T23:44:20ZLGTM:E
2016-09-24T23:44:38Z-Added some more tests for LogicalExpressions.:ﬁ
2016-09-24T23:50:39Z≈Sorry, one last thing I didn't notice the first time around: the commit message should start with "Fix" instead of "Update", since this is a bug fix. Other than that, LGTM. Thanks for contributing!:å
2016-09-24T23:51:17Zt@kaicataldo This will introduce more warnings-- bugfixes with more warnings are Updates and semver-minor, I believe.:ç
2016-09-24T23:53:49ZuAgreed that this is a semver-minor change, but didn't realize we actually label them differently. In that case, LGTM.:∑
2016-09-24T23:56:48ZûAh, I see. From http://eslint.org/docs/developer-guide/contributing/pull-requests#step-2-make-your-changesa-namestep2a

Update - for a backwards-compatible enhancement or a change to a rule that increases the number of reported problems.

Makes sense, just something I didn't know. TIL!:˜
2016-09-25T00:08:08ZﬁMight be an artifact of eslint-release using those tags to determine
whether a release should be major/minor/patch. Not 100% sure though.
On Sep 24, 2016 4:56 PM, "Kai Cataldo" notifications@github.com wrote:

Ah, I see. From http://eslint.org/docs/developer-guide/contributing/
pull-requests#step-2-make-your-changesa-namestep2a
Update - for a backwards-compatible enhancement or a change to a rule that
increases the number of reported problems.
Makes sense, just something I didn't know. TIL!
‚Äî
You are receiving this because you commented.
Reply to this email directly, view it on GitHub
#7231 (comment), or mute
the thread
https://github.com/notifications/unsubscribe-auth/AARWeo-vO1UG7sVowFOAxtG0bcO1vEgVks5qtZyhgaJpZM4KFvxC
.:Ü
2016-09-26T12:22:12Zn@platinumazure you're correct! eslint-release uses those tags to determine which type of release it should be.:@
2016-09-27T21:54:06Z(LGTM. Thanks for contributing to ESLint!ñ
+∏92016-10-13T17:34:15Z"2016-10-14T16:47:30Z*„What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7351

Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
(n/a) I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
This updates no-unused-vars to avoid reporting setter parameters in class bodies as unused.
(class {
  set foo(param) { // <-- don't report `param`
  }
})
Setter functions must always have exactly one parameter, so the parameter cannot be omitted if it's unused. The rule already has an exception for setters in object literals, but it didn't have one for setters in class bodies.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(2729d94b8dd20c434e0b0e0049ed8ea2e7f798da2016-10-14T16:47:29Z11638619:Ä
2016-10-13T23:32:53ZhDo we want to go ahead and merge this before our release tomorrow, despite it not being the full 2 days?:.
2016-10-13T23:45:08ZSounds good to me üëç‰	ùÛB2017-05-08T05:50:06Z"2017-05-10T06:59:05Z*˛What is the purpose of this pull request? (put an "X" next to item)
[X ] Bug fix (fixes #8546 )
What changes did you make? (Give an overview)
Allow the VariableDeclarator node listener to ignore the operator as well as the initial value.
Is there anything you'd like reviewers to focus on?
I tried to match the behavior of variable assignment but might have missed something. The following are now all valid:
const aLongName 
    = 1,
  bLongName
    = 2;
const aLongName 
    =
  1,
  bLongName
     =
     2;2I
(de0b4ad7bd820ade41b1f606008bea68683dc11a2017-05-10T06:59:04Z2373964:
2017-05-09T05:35:49ZLGTM:·
2017-05-09T05:40:12Z»@not-an-aardvark Thanks for the review. I can't reply to your comments, some JS isn't loading, but I made the following changes:

I used astUtils.isNotOpeningParenToken() to ensure the previous token is not a parenthese. Also added a test for this case
Removed the check to ensure it was an equal operator. I think I was concerned it could be a comma or some other token but cannot think of an example
Removed the first token of line since it is not needed:
2017-05-09T13:57:04ZLGTM:D
2017-05-09T13:57:50Z,Removed the if statement completely. Thanks.«	+∑92016-10-13T16:50:25Z"2016-10-14T16:47:34Z*ÃTell us about your environment

ESLint Version:
3.7.1
Node Version:
6.8.0
npm Version:
3.10.8

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

{
  "env": {"es6": true, "node": true},
  "extends": "eslint:recommended"
}
What did you do? Please include the actual source code causing the issue.

exports.Test = class Test {
  set value(v) {
    throw new Error('You must not set the value directly');
  }
};
What did you expect to happen?
The code should be valid. JavaScript forces a parameter to be declared; the linter should not force us to use it. As far as I can tell object setters behave correctly.
What actually happened? Please include the actual, raw output from ESLint.
.../test.js
  2:13  error  'v' is defined but never used  no-unused-vars

‚úñ 1 problem (1 error, 0 warnings)2J
(2729d94b8dd20c434e0b0e0049ed8ea2e7f798da2016-10-14T16:47:29Z11638619:¯
2016-10-13T17:07:54ZﬂThanks for the report. I can reproduce this issue.
The rule currently ignores setter parameters in object literals, because a setter without a parameter is a syntax error. It should also ignore setter parameters in classes.ö	e∞:2016-10-29T00:28:29Z"2016-10-31T04:49:49Z*˜It appears that the recent changes related to the no-useless-escape rule are not handling the integer back references (e.g. \1) correctly.
eslint: 3.9.0
node: 4.4.3
npm: 2.15.1
parser: default
.eslintrc:
{
  "rules": {
    "no-useless-escape": 2,
    "no-console": 0
  }
}

JavaScript file:
var keyword = "'the thing \"on the inside\" is what to match'";
var exactMatchPhrases = keyword.match(/(["'])(.*?)\1/g);
console.log(exactMatchPhrases);
What did you expect to happen?
No eslint errors
What actually happened? Please include the actual, raw output from ESLint.
2:51  error  Unnecessary escape character: \1  no-useless-escape2J
(56a662b4ebccf9e50acddcec38816060c89e8f5b2016-10-31T04:49:46Z11638619:9
2016-10-29T00:33:05Z!Confirmed, thanks for the report.:¨
2016-10-29T00:38:22ZìI think the issue is that digits in regex literals should always be valid escapes (either they represent control characters, or they represent backreferences).
var foo = /\0/; // null character
var foo = /\1/; // \x01 character
var foo = /(a)\1/; // 2 'a' characters in a row:7
2016-10-29T21:54:14ZAnother example: /^(['"]).*\1$/˚ÿØ)2016-02-15T22:57:02Z"2016-02-17T15:54:24Z*¨Starting with eslint 2.1.0, I get incorrect indent behavior.
With this config:
{
  "rules": {
    "indent": [2, 2]
  }
}
And this code:
var info = {
  options: fn(
    true,
    {
      prop: true
    }
  )
}
I get this error:
/Users/feross/code/standard-stuff/test/t.js
  4:5  error  Expected indentation of 2 space characters but found 4  indent
  5:7  error  Expected indentation of 4 space characters but found 6  indent
  6:5  error  Expected indentation of 2 space characters but found 4  indent

‚úñ 3 problems (3 errors, 0 warnings)

In 2.0.0, this reported no errors. Starting in 2.1.0, it does.
This might be caused by @gyandeeps's fix for #5237 which was released in 2.1.0.2H
(afb6708eff08b739b7e57b7d807cf8ef9a790b142016-02-16T21:09:48Z126780:\
2016-02-15T23:05:27ZD@BYK Can you please evaluate this against your latest fix in #5237 ?:Å
2016-02-16T07:57:40ZËSame bug I believe... This is causing many of our builds to fail.  Here were my findings:
/* eslint indent: [2,2] */
function SillyFunction(arg, arg2) {
  return { irrelevant: true };
}

// validates fine in 2.0 and 2.1
SillyFunction(
  {
    value: true,
  },
  {
    _id: true,
  }
);

var haveFun = function () {

  // No longer validates here in 2.1.0
  SillyFunction(
    {
      value: true,
    },
    {
      _id: true,
    }
  );

  // I guess this is what it wants?  This validates in 2.1.0.
  SillyFunction(
  {
    value: true,
  },
  {
    _id: true,
  }
  );

  return "fun";
};

// Guess not! Same code doesn't validate here, outside of the block.
SillyFunction(
{
  value: true,
},
{
  _id: true,
}
);

haveFun();
$ eslint --no-eslintrc untitled.js 

/private/tmp/untitled.js
  20:5  error  Expected indentation of 2 space characters but found 4  indent
  21:7  error  Expected indentation of 4 space characters but found 6  indent
  22:5  error  Expected indentation of 2 space characters but found 4  indent
  23:5  error  Expected indentation of 2 space characters but found 4  indent
  24:7  error  Expected indentation of 4 space characters but found 6  indent
  25:5  error  Expected indentation of 2 space characters but found 4  indent
  43:1  error  Expected indentation of 2 space characters but found 0  indent
  44:3  error  Expected indentation of 4 space characters but found 2  indent
  45:1  error  Expected indentation of 2 space characters but found 0  indent
  46:1  error  Expected indentation of 2 space characters but found 0  indent
  47:3  error  Expected indentation of 4 space characters but found 2  indent
  48:1  error  Expected indentation of 2 space characters but found 0  indent

‚úñ 12 problems (12 errors, 0 warnings):l
2016-02-16T08:48:12ZT@gyandeeps - definitely a fall out from that. Taking on, hope to get a fix out soon.Á[ÆL2017-12-26T13:41:24Z"2017-12-30T09:49:03Z*Ñ
'no-unused-vars' shows varsIgnorePattern when argsIgnorePattern is not specified.

Tell us about your environment

ESLint Version:
4.13.1 and 4.14.0
Node Version:
8.1.3
npm Version:
5.6.0

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

Configuration

env:
  browser: true
  es6: true
extends: 'eslint:recommended'
parserOptions:
  sourceType: module
rules:
  eqeqeq: error
  indent:
    - error
    - 4
  linebreak-style:
    - error
    - unix
  quotes:
    - off
    - double
  semi:
    - error
    - always
  no-unused-vars:
    - error
    - varsIgnorePattern: "^_$"

What did you do? Please include the actual source code causing the issue, as well as the command that you used to run ESLint.

/*
  no-unused-vars:
    - error
    - varsIgnorePattern: "^_$"
*/
buttonActions($('#next-word'), _ => changeWord(1), _ => changeWord(10));

$ eslint *.js
What did you expect to happen?
I expected it to report that argsIgnorePattern is not specified, which caused this error.
What actually happened? Please include the actual, raw output from ESLint.
It told me about varsIgnorePattern, which confused me and made it difficult to understand the problem.
error  '_' is defined but never used. Allowed unused vars must match /^_$/2I
(4c87f428bc501e087ab4882dae9b4fd2bc22041d2017-12-30T09:49:01Z2476461:.
2017-12-26T19:27:30ZConfirmed in the demo.:2
2017-12-29T07:13:02ZI'm going to work on this.ØàÚ12016-06-12T02:34:48Z"2016-06-13T15:44:47Z*≠What version of ESLint are you using?
2.12.0
What parser (default, Babel-ESLint, etc.) are you using?
Default
Please show your full configuration:
{"extends": "eslint:recommended"}
What did you do? Please include the actual source code causing the issue.
if(arr[0] === "1");
else if(arr[0] === "2"){
    ...
}
What did you expect to happen?
Nothing.
What actually happened? Please include the actual, raw output from ESLint.
  31:48  error  Unnecessary semicolon  no-extra-semi

Also, when using --fix, the semicolon is removed, which leads to invalid code.2G
(cfdd5249dd0b1f18239bf6ee6af17e8dd578366a2016-06-13T15:44:43Z72561:ì
2016-06-12T03:33:36Z{This rule simply warns on all empty statements. You can use an empty block ({}) or some effect-free expression (0) instead.:l
2016-06-12T03:36:41ZTThat's right, but --fix still produces invalid code, which IMHO should never happen.:7
2016-06-12T03:38:44ZYou're right, that is an issue.:ƒ
2016-06-12T03:39:39Z´No, that rule has exceptions by the parent node type: 
  
    
      eslint/lib/rules/no-extra-semi.js
    
    
         Line 69
      in
      cd1b057
    
    
    
    

        
          
           allowedParentTypes = ["ForStatement", "ForInStatement", "ForOfStatement", "WhileStatement", "DoWhileStatement"]; 
        
    
  


But the exception list does not include IfStatement.
Maybe it should include IfStatement.Ûø¨;2016-11-14T21:12:25Z"2016-11-15T23:50:02Z*‡What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7573


What changes did you make? (Give an overview)
This fixes the indent autofixer to avoid throwing an error on global return values.
The autofixer is intended to replace all the indentation before a line with the desired amount of indentation:
return (
    foo
-    );
+);
Due to a bug, when a closing paren was followed by a semicolon, the start index of the fix range was 1 too large, and the length of the replacement text was 1 too small. Normally, these offsets would cancel each other out, resulting in the correct behavior. However, if the correct fix would result in an indentation of 0, this offset caused the replacement text length to be negative, resulting in an error.
This commit updates the fixing logic to avoid the off-by-one error.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(f56c1ef0eecfb87c490310a9e77f48f5f48281452016-11-15T23:50:02Z11638619:
2016-11-14T21:12:27ZLGTM:∆
2016-11-14T21:12:30Z≠@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @eelyafi, @gyandeeps and @vitorbal to be potential reviewers.:
2016-11-14T21:13:57ZLGTM:B
2016-11-14T21:14:44Z*Can you also add a test without semicolon?:
2016-11-14T21:18:09ZLGTM:)
2016-11-14T21:18:16Z@gyandeeps Added.†¯02016-05-27T23:12:24Z"2016-05-30T17:56:46Z*“What version of ESLint are you using?
v2.11.0
What parser (default, Babel-ESLint, etc.) are you using?
Default (babel-eslint shows the same issue)
Please show your full configuration:
{
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module"
  },
  "rules": {
    "max-statements-per-line": [1, {"max": 1}]
  }
}
What did you do? Please include the actual source code causing the issue.
export default function someFunction() {
    return true;
}
What did you expect to happen?
No warnings.
What actually happened? Please include the actual, raw output from ESLint.

/path-to-the-file/index.js
  1:16  warning  This line has too many statements. Maximum allowed is 1  max-statements-per-line

‚úñ 1 problem (0 errors, 1 warning)


So‚Ä¶ Maybe we could say that I have two statements because I'm declaring a function and exporting it. But in my opinion that is not the case, it's a special one related to ES6 syntax.
But, if we really consider that there are two statements in that line, it would be nice to have an option for max-statements-per-line rule that we could ignore cases like this.2I
(113c1a878446e1f4c37984484bdfed936f2f42252016-05-30T17:56:46Z1937871:≠
2016-05-27T23:53:03ZîSeems like a bug to me. My guess is we use FunctionDeclaration node as a "top level statement node", but in reality it is a child of the export node. We need to add a check that the FunctionDeclaration isn't a child of the export declaration node.
Or something like that. üòÅ:“
2016-05-27T23:58:51ZπThank you for this issue.
I confirmed it.
This bug was introduced in #6192.
This rule should ignore child node of ExportDeclarations as similar to such IfStatement.
I'm working on this.:é
2016-05-28T19:13:56ZvIn case it helps, this is also happening when exporting classes as follows
export default class MyClass {
    // ...
}:7
2016-05-28T23:15:40ZThanks for the fast replies! :)Ωe≤:2016-10-29T00:53:41Z"2016-10-31T04:49:46Z*ˆWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7472


What changes did you make? (Give an overview)
This updates no-useless-escape to allow digit characters to be escaped in regular expressions. Escaped digits can either be backreferences or octal literals, so the rule should not warn when it encounters them.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(56a662b4ebccf9e50acddcec38816060c89e8f5b2016-10-31T04:49:46Z11638619:Ã
2016-10-29T00:53:42Z≥@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @kaicataldo, @onurtemizkan and @vitorbal to be potential reviewers.:
2016-10-29T00:53:43ZLGTM:
2016-10-29T01:02:27ZLGTM:
2016-10-30T07:08:50ZLGTM:
2016-10-30T07:18:33ZüëçŒ•µ:2016-10-29T16:30:39Z"2016-10-31T19:32:52Z*ëSo I decided to give a try to the new rule no-useless-return and I stumbled on what looks to me like too much of goodness.
Here is a minimal example to illustrate the issue (actual code is here: https://github.com/fasttime/JScrewIt/blob/b3cce7dbc33628c184a1d39bf827c5b5bb52877e/src/lib/encoder-base.js#L363).
function returnValidValueOrUndefined(value)
{
    if (!isValidValue(value))
        return; // Unnecessary return statement   no-useless-return
    return value;
}
Granted, there are plenty of ways to get rid of the expressionless return;, but it seems unfair to call it useless when the next statement would potentially return something different.2J
(8a71d4a80750c820bed098d43bb2c237427755d42016-10-31T19:32:47Z11638619:Ö
2016-10-29T17:30:20ZmHmm... I agree, this seems like a bug.
@mysticatea, what do you think? Is this a bug, or working as designed?:/
2016-10-29T19:31:38ZI agree, this is a bug.:Ä
2016-10-30T06:42:57ZhI agree, this is a bug.
I have forgotten to mark as used at return statements which have a return value.˜ëÜA2017-03-26T05:52:24Z"2017-03-27T21:35:12Z*èWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix



Tell us about your environment

ESLint Version: master
Node Version: 7.7.4
npm Version: 4.1.2

What did you do? Please include the actual source code causing the issue.
const ruleConfigs = require("eslint/lib/config/config-rule").createCoreRuleConfigs();
What did you expect to happen?
I expected all the configs in ruleConfigs to be valid.
What actually happened? Please include the actual, raw output from ESLint.
Some of the configs were invalid. For example:
console.log(ruleConfigs["id-match"]);
// => [ 2, [ 2, { properties: true } ], [ 2, { properties: false } ] ]
What changes did you make? (Give an overview)
Previously, the config-rule logic for generating rule options had a bug where it could generate invalid options. For example, it could generate these options for the id-match rule:
[2, { "properties": true }]
This is invalid because the first option in id-match must be a string, and the second option must be an object. The config generator doesn't handle strings, but it was incorrectly skipping the string option and trying to fill in the config with an object after realizing that it couldn't generate a string. As a result, it placed the object where the string was supposed to go, so an invalid set of options was created. A similar issue can appear when generating configs for the max-statements rule.
Luckily, the id-match and max-statements rule are still able to run when passed an invalid config, and the invalid config never results in fewer errors being reported than the default, so the invalid options wouldn't ever get output to a config file. However, this is only the case due to implementation details in the two rules, and a new rule could be introduced in the future that crashes when given an invalid schema, so this is still worth fixing.
This commit fixes the issue by stopping early when the option generator reaches an option that it doesn't know how to fill in.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(d52173f2da9bb9b4c571d5891786e818e854808e2017-03-27T21:35:11Z11638619:∆
2017-03-26T05:52:25Z≠@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @IanVS, @mysticatea and @gyandeeps to be potential reviewers.:
2017-03-26T05:52:26ZLGTMπ	¡ä@2017-03-04T20:15:49Z"2017-03-06T23:42:08Z*´Tell us about your environment

ESLint Version: 3.17.0
Node Version: 7.6.0
npm Version: 4.1.2

What parser (default, Babel-ESLint, etc.) are you using?
Default
Please show your full configuration:

{
    rules: {
        'nonblock-statement-body-position':  2
    }
}

What did you do? Please include the actual source code causing the issue.

function blah() {
    if (window.hey) return window.doit({
        asdf: 2,
    });
    return 1;
}
What did you expect to happen?
No errors.
What actually happened? Please include the actual, raw output from ESLint.
3:21 error Expected no linebreak before this statement nonblock-statement-body-position
Even if the rule doesn't allow expressions that extend onto the next line (which would be a bit of a bummer), the error message doesn't make a whole lot of sense.2J
(f713f11793f910d5a8356bba8d21ee5b0a0f54082017-03-06T23:42:05Z11638619:ä
2017-03-04T20:19:57ZÒThanks for the report, I can reproduce this issue.
The intended behavior is that this code should be valid. It looks like the rule is reporting an error when the statement is multiline, even if it starts on the same line as the if statement.ì1|≈82016-09-25T08:19:20Z"2016-10-25T17:06:04Z*ˆWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x ] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:


Please check each item to ensure your pull request is ready:

[ x] I've read the pull request guide
[ x] I've included tests for my change
[x ] I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
This PR fixes: #4161 (comment).
Updated a few tests referencing the indent rule and updated the indent rule w/ new tests to check if each element in the ArrayExpression, if the element is on the same line as the beginning of the node, then we early return, if not the rule continues parsing.
Is there anything you'd like reviewers to focus on?
N/A2J
(6e9ff08cf8ac9188331fcea7905ce162accefe812016-10-25T17:06:04Z10355544:¿
2016-09-25T08:19:21ZßThanks for the pull request, @sstern6! I took a look to make sure it's ready for merging and found some changes are needed:

The commit summary needs to begin with a tag (such as Fix: or Update:). Please check out our guide for how to properly format your commit summary and update it on this pull request.

Can you please update the pull request to address these?
(More information can be found in our pull request guide.):
2016-09-25T08:20:18ZLGTM:
2016-09-25T08:30:16ZLGTM:ä
2016-09-25T15:44:58ZrThanks for the PR! Please investigate the CI failures (looks like a bunch of other files now have linting errors).:„
2016-09-25T17:14:33Z For what it's worth, all the linting errors in other files seem legitimate (i.e. the indentation is actually incorrect and we're only noticing now.)
You can fix them with ./bin/eslint.js tests/lib --fix:—
2016-09-25T19:08:31Z∏Thanks @platinumazure and @not-an-aardvark will look into the linting errors and repush.  Before pushing I ran npm test locally.  Shouldn't that have caught all linting errors as well?:
2016-09-25T19:20:26ZLGTM:˜
2016-09-25T19:31:20ZﬁI think npm test didn't catch the linting errors because npm test uses a cache to determine whether to lint a file, and since the file hadn't changed since the last time it was linted, it wasn't linted again. The cache didn't account for the fact that the rule had changed.
(That raises a separate question though: Are .eslintcache files pinned to a particular version of ESLint? If not, files might not get linted after a minor release, which could cause errors to get missed.):±
2016-09-25T19:41:58Zò@not-an-aardvark cant seem to find my .eslintcache file locally, which directory would it be in?
Also looks like the linting errors are resolved now but travis is failing.  From the logs it looks like it cant find eslint-plugin-node.  Any ideas why this would be happening?
Thanks:¡
2016-09-25T19:52:37Z®The cache file for the ESLint tests is in cache/js_cache. If you remove that file, I think it will regenerate itself.
Regarding the eslint-plugin-node issue, see #7239.:ê
2016-09-25T19:56:51ZxThank you @not-an-aardvark.  Re eslint-plugin-node, is there anything on my end i need to do to make travis pass?
Thanks:Í
2016-09-25T20:01:37Z—Nope, nothing that you can do at the moment as far as I know. When the issue is fixed, you'll probably have to rebase your branch onto master (i.e. get the fix onto your branch as well) to make the tests pass.:
2016-09-26T02:18:01Zg@sstern6: @not-an-aardvark is correct - we'll have to get that sorted out on our end. Sorry about that!:ï
2016-09-27T01:26:56Z¸@not-an-aardvark @platinumazure @kaicataldo just an fyi, this fixes the use case referenced in the issue(String Literals/Nums).  But the following would be my next step after this is merged. Wanted to separate PR's to avoid too many problems etc. #7242:H
2016-09-30T07:45:03Z0hope this fix be release soon, such common scene:~
2016-10-18T02:05:35Zf@nzakas just following up, any feedback on the PR you would like me to address before rebasing?
Thanks:≠
2016-10-18T19:57:22ZîSorry, I'm not familiar enough with the indent rule to provide feedback. @gyandeeps @platinumazure @not-an-aardvark  do you have any other feedback?:
2016-10-18T21:53:29ZLGTM:
2016-10-18T21:57:58ZLGTM:]
2016-10-21T13:32:47ZEIs there any chance that this PR would make it into the next release?:o
2016-10-21T13:35:00ZW@sstern6 @gyandeeps @not-an-aardvark I can jump in to take this over if/when necessary.:»
2016-10-24T19:08:33ZØ@not-an-aardvark @gyandeeps @BYK anything else needed to be done on this to get this into the next release?
Let me know if theres anything you guys want/need on my end.
Thanks::
2016-10-24T19:19:31Z"LGTM üëç
Thanks for contributing.:6
2016-10-25T17:05:58ZThanks for sticking with this!:<
2016-10-25T17:10:51Z$@sstern6 Thanks for working on this!:π
2016-10-30T21:55:18Z†I get why this change was made, and I'll probably just roll with it, but I did want to chime in that I found this change a little surprising. I work on a codebase that uses a 4-space indent but an 8-space continuation indent, and so I guess we were relying on the fact that ESLint bailed out for cases like this. e.g.
 const someVarData = ['some test', 'data here that would', 'eventually hit',
         'the max line length'];

with 8 spaces because the line wraps. With this, the array is required to be 4 spaces, which will now be inconsistent with any other type of continuation we have, e.g.
const data = someFunctionCall() || someOtherThing ||
        'the default';:ç
2016-10-30T22:15:54ZÙI think having a continuation indent that's distinct from a normal indent is what I'd find surprising - that sounds like something that might warrant a separate option, but I wouldn't expect an indentation linting rule to allow that by default.:‹
2016-10-30T22:38:07Z√Yeah, and that's one of the reasons I'm up for rolling with it, I agree it's a weird thing for my company's style guide.
I figured I'd mention it though, because since this rule doesn't enforce continuation line indents, it makes it more likely that changes like this will introduce breaking changes for unsuspecting users.›¡ã@2017-03-04T20:37:36Z"2017-03-06T23:42:05Z*’What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8202)
What changes did you make? (Give an overview)
The nonblock-statement-body-position rule is intended to compare the start line of a statement with the end line of the previous token. Due to a typo, it was comparing the end line of the statement instead, which caused false positives for multiline statements.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(f713f11793f910d5a8356bba8d21ee5b0a0f54082017-03-06T23:42:05Z11638619:
2017-03-04T20:37:37ZLGTM:D
2017-03-04T20:59:40Z,Wow, awesome, quick, and simple fix üëçüèª:2
2017-03-05T00:54:05ZIs this a patch candidate?:m
2017-03-05T01:58:33ZUNot sure. I guess we could release a patch for it, but it's a relatively minor issue.ª¢∑K2017-11-24T11:06:50Z"2017-11-26T03:31:54Z*ªWhat is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix (template)
Tell us about your environment

ESLint Version: master
Node Version: 8.9.1
npm Version: 5.5.1

What parser (default, Babel-ESLint, etc.) are you using?

default

Please show your full configuration:

nothing

What did you do? Please include the actual source code causing the issue.
/* eslint space-in-parens: [error, always, {}] */
1

I couldn't get the URL of our online demo because it crashes. Please copy/paste then see devtools' console.

What did you expect to happen?
No errors.
What actually happened? Please include the actual, raw output from ESLint.
A type error was thrown.
Uncaught TypeError: Error while loading rule 'space-in-parens': Cannot read property 'length' of undefined

What changes did you make? (Give an overview)
This PR fixes space-in-parens rule not crashing.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2I
(e13d439fe2f03e3fe2b7950599c0ff78b20739d02017-11-26T03:31:53Z1937871‚Ö™)2016-02-15T19:19:50Z"2016-02-26T05:46:29Z*The version of ESLint you are using.
$ node_modules/.bin/eslint -v
v2.0.0

Env and parserOptions
    "env": {
        "browser": true,
        "node": true,
        "jasmine": true,
        "es6": true
    },
    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module",
        "ecmaFeatures": {
            "jsx": true,
            "experimentalObjectRestSpread": true
        }
    },

What you did.
"no-useless-constructor": 2
What you expected to happen.
eslint not to crash.
What actually happened.
eslint crashed.
Repro 1
import React from 'react';
var foo = 2;
class TestComponent extends React.Component {
    constructor() {
        super(foo);
    }
    render() {
        return <div/>;
    }
}

/Users/jacobp/z/static-mortgage/node_modules/eslint/lib/rules/no-useless-constructor.js:30
            return (arg.type === "Identifier" && arg.name === ctorParams[index].name) ||
                                                                               ^

TypeError: Cannot read property 'name' of undefined
    at /Users/jacobp/z/static-mortgage/node_modules/eslint/lib/rules/no-useless-constructor.js:30:80
    at Array.every (native)
    at isRedundantSuperCall (/Users/jacobp/z/static-mortgage/node_modules/eslint/lib/rules/no-useless-constructor.js:30:45)
    at EventEmitter.checkForConstructor (/Users/jacobp/z/static-mortgage/node_modules/eslint/lib/rules/no-useless-constructor.js:53:46)
    at emitOne (events.js:82:20)
    at EventEmitter.emit (events.js:169:7)
    at NodeEventGenerator.enterNode (/Users/jacobp/z/static-mortgage/node_modules/eslint/lib/util/node-event-generator.js:42:22)
    at CodePathAnalyzer.enterNode (/Users/jacobp/z/static-mortgage/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:591:23)
    at CommentEventGenerator.enterNode (/Users/jacobp/z/static-mortgage/node_modules/eslint/lib/util/comment-event-generator.js:98:23)
    at Controller.controller.traverse.enter (/Users/jacobp/z/static-mortgage/node_modules/eslint/lib/eslint.js:836:36)


Repro 2
import React from 'react';
class TestComponent extends React.Component {
    constructor() {
        super(...arguments);
    }
    render() {
        return <div/>;
    }
}

/Users/jacobp/z/static-mortgage/node_modules/eslint/lib/rules/no-useless-constructor.js:33
                ctorParams[index].type === "RestElement" &&
                                 ^

TypeError: Cannot read property 'type' of undefined
    at /Users/jacobp/z/static-mortgage/node_modules/eslint/lib/rules/no-useless-constructor.js:33:34
    at Array.every (native)
    at isRedundantSuperCall (/Users/jacobp/z/static-mortgage/node_modules/eslint/lib/rules/no-useless-constructor.js:29:45)
    at EventEmitter.checkForConstructor (/Users/jacobp/z/static-mortgage/node_modules/eslint/lib/rules/no-useless-constructor.js:52:46)
    at emitOne (events.js:82:20)
    at EventEmitter.emit (events.js:169:7)
    at NodeEventGenerator.enterNode (/Users/jacobp/z/static-mortgage/node_modules/eslint/lib/util/node-event-generator.js:42:22)
    at CodePathAnalyzer.enterNode (/Users/jacobp/z/static-mortgage/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:591:23)
    at CommentEventGenerator.enterNode (/Users/jacobp/z/static-mortgage/node_modules/eslint/lib/util/comment-event-generator.js:98:23)
    at Controller.controller.traverse.enter (/Users/jacobp/z/static-mortgage/node_modules/eslint/lib/eslint.js:836:36)2H
(cf14c71977cb323ff8ea4ed2d683cae7421fc2142016-02-25T22:33:52Z126780:v
2016-02-15T19:30:56Z^That looks like a bug. We should crash on the rules. @mysticatea could you take a look please?:5
2016-02-16T09:13:36ZAble to repro, working on it.:B
2016-02-16T09:50:49Z*Thanks @BYK , I could not take it for now.û]Ì12016-06-11T17:45:51Z"2016-06-15T18:25:36Z*üFrom https://twitter.com/ponko2_jp/status/741573129105854465
What version of ESLint are you using?

2.12.0

What parser (default, Babel-ESLint, etc.) are you using?

default

Please show your full configuration:

nothing

What did you do? Please include the actual source code causing the issue.
var obj = {
    // comment.
    a: 1
}
eslint test.js --fix --rule object-curly-newline:error --no-eslintrc --no-ignore

What did you expect to happen?

The code isn't modified because the object literal is multiline with a comment and a property.

What actually happened? Please include the actual, raw output from ESLint.


The code was modified to:
var obj = {a: 1}



Currently, this rule checks whether an object literal is multiline or not by comparing the following 2 tokens.

The next token of the open brace.
The previous token of the close brace.

So comments are ignored.
I think this rule should check comments as well.2I
(4f73240cd1cee198b3e5dbd6160510c1b6ddf83c2016-06-15T18:25:36Z1937871¿ßΩ82016-09-24T20:59:46Z"2016-09-27T21:54:02Z*ÌTell us about your environment

ESLint Version: 3.6.0
Node Version: 6.6.0
npm Version: 3.10.3

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:
(none)
What did you do? Please include the actual source code causing the issue.
echo '((((foo)))) instanceof bar' | eslint --stdin --no-eslintrc --rule 'no-extra-parens: [2, "all", {"nestedBinaryExpressions": false}]'
What did you expect to happen?
I expected ESLint to report an error, because the parentheses around foo are unnecessary.
What actually happened? Please include the actual, raw output from ESLint.
No error.2J
(e3f95de20346a58cb2b60cec189619f13fef1c682016-09-27T21:53:58Z11638619:)
2016-09-24T22:37:24ZWorking on a fix.:¨
2016-09-24T23:04:51ZìConfirmed the original example in online demo.
@not-an-aardvark Could you be more specific about what "some binary expressions" means here? Thanks!:v
2016-09-24T23:11:01Z^Updated the title to be more descriptive. (Additional explanation can also be found in #7231.)≈ÜˆA2017-04-10T17:56:41Z"2017-05-05T05:19:04Z*¥Tell us about your environment

ESLint Version:
4.0.0-alpha.0
Node Version:
6
npm Version:
3

What parser (default, Babel-ESLint, etc.) are you using?
typescript
Please show your full configuration:
module.exports = {
//    "extends": ["eslint:all"],
    "parser": "typescript-eslint-parser",
    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module",
        "ecmaFeatures": {
            "jsx": true
        }
    },
    "rules": {
        "indent": [
            "error",
            4,
            {
                MemberExpression: 1,
                SwitchCase: 1,
                FunctionDeclaration: {
                    body: 1,
                    parameters: 1
                },
                FunctionExpression: {
                    body: 1,
                    parameters: 1
                },
                CallExpression: {
                    arguments: 1
                }
            }
        ]
    }
};



What rule do you want to change?
indent
Does this change cause the rule to produce more or fewer warnings?
Fewer
How will the change be implemented? (New option, new default behavior, etc.)?
Possible add an option for Import/Export declarations
Please provide some example code that this change will affect:
import {Foo}
    from "long/file/path/that/extends/max/len.js";
What does the rule currently do for this code?
/mnt/c/Users/reyad.attiyat/Workspace/eslint-test/test-import.js
  2:1  error  Expected indentation of 0 spaces but found 4  indent

What will the rule do after it's changed?
It should allow for from to be indented2J
(cf940c6c8f51c0ab8da326633420901df81580072017-05-05T05:18:57Z11638619:ô
2017-04-10T18:43:55ZÄDoes anyone use from without indenting it? Personally, I think the rule should enforce one style rather than ignoring that word.:ñ
2017-04-10T19:04:01Z~Yea makes sense. Most people would expect mutli line breaks to be indented. I have never seen code with the from not indented.:Y
2017-04-10T19:09:34ZAOk, let's call this a bug then and make sure to fix it for 4.0.0.Ú	®√92016-10-14T10:28:05Z"2016-10-22T00:41:58Z*àTell us about your environment

ESLint Version: v3.7.1
Node Version: v6.7.0
npm Version: 3.10.8

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  camelcase: 2

What did you do? Please include the actual source code causing the issue.
/* global My_Global */
new My_Global;
or
/* global My_Global */
new Object(My_Global);
What did you expect to happen?
No error should be given, based on the fact that in a browser, on can usually not change the name of globals provided. Interestingly, the bug only happens when new is involved, e.g. the code passes once new is removed.
What actually happened? Please include the actual, raw output from ESLint.
  2:5  error  Identifier 'My_Global' is not in camel case  camelcase2J
(8dfd802f993b302328faaa278260e6ee82badfab2016-10-22T00:41:54Z11638619:…
2016-10-15T21:56:03Z∞Thanks for the report. I can reproduce this.
I'm not sure what the intended behavior is here, but it seems like we should be consistent between My_Global() and new My_Global().:ö
2016-10-18T03:42:37ZÅIt also flags things like __webpack_public_path__, which are meta-globals (the webpack compiler replaces it with something else).¯w∏L2017-12-28T19:03:27Z"2018-01-10T01:05:31Z*ü
Tell us about your environment

ESLint Version: 4.14.0
Node Version: 9.3.9
npm Version: 5.6.0

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:

Configuration
{
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module"
  },

  "extends": [
    "airbnb-base"
  ],

  "rules": {
    "class-methods-use-this": "off",
    "import/no-extraneous-dependencies": ["off", {"devDependencies": ["webpack-config/*.js"]}],
    "no-prototype-builtins": "off",
    "no-param-reassign": [0],
    "prefer-default-export": "off"
  }
}

What rule do you want to change?  prefer-destructuring
Does this change cause the rule to produce more or fewer warnings?  Fewer
How will the change be implemented? (New option, new default behavior, etc.)? New default behavior
Please provide some example code that this change will affect:
const INTEGER_WORDS = {
  one: 1,
  two: 2,
  three: 3,
  four: 4,
 };

let num = 1;
num = INTEGER_WORDS[num]; 
What does the rule currently do for this code?
Generates a warning for num = INTEGER_WORDS[num];
What will the rule do after it's changed?
It will ignore array indexes/keys that are not constants. I would argue this should always be the case, as it must be considered bad practice to destructure from a computed index or key.2J
(6a5cd32e5a75b23558ad0282e080ffbb6affcad02018-01-10T01:05:24Z11638619:v
2017-12-28T20:10:29Z^You could do let { [num]: num } = INTEGER_WORDS, but I agree that that should be an exception.:ˇ
2017-12-28T20:16:29ZÊHi @aparajita, thanks for the issue. I agree with @j-f1 that the rule is currently working as designed but that we could consider an enhancement to avoid warning when a computed property access is being used.
Would you mind editing your original post to match our Rule Change Proposal template so we can evaluate the proposed enhancement more easily? Thanks!:‘
2017-12-28T20:16:46ZªHi @aparajita, thanks for the issue. It looks like there's not enough information for us to know how to help you.
Requesting a rule change? Please see Proposing a Rule Change for instructions.
If it's something else, please just provide as much additional information as possible. Thanks!
(edited by @platinumazure):†
2017-12-28T22:05:37Zá@j-f1 That is invalid syntax; you're trying to declare and reference num at the same time. Even it were valid, it's a tortured syntax at best and indecipherable to mere mortals at worst.
const words = { one: 1, two: 2 };
let num = 1;
let { [num]: num } = words;
Run that, you get:
SyntaxError: Identifier 'num' has already been declared
Remove let num = 1:
ReferenceError: num is not defined:V
2017-12-28T22:32:29Z>The correct way to do this is
({ [num]: num} = INTEGER_WORDS);:¢
2017-12-29T01:56:49Zâ@not-an-aardvark Correct, but looking at it I still can't decipher what's happening without seriously scratching my head, and I've written Javascript parsers and compilers. So under normal circumstances I think prefer-destructuring should have pity on us mere mortals and not complain if we use num = INTEGER_WORDS[num]. And I still think it's bad practice to destructure a computed index/key.:ì
2017-12-29T02:19:41Z˙Oh, I see what's going on. The issue is that the enforceForRenamedProperties option for prefer-destructuring should consider any computed property access to be a "renaming".
The current behavior is intended to report something like this:
num = foo.num;

// should be replaced with

({ num } = foo);
But it should not report an issue when the right-hand side is foo[num] instead.::
2017-12-31T23:38:56Z"@not-an-aardvark That explains it.:ì
2018-01-01T00:04:10Z˙The fix seems to be quite easy. I haven't thought through it deeply, but this works:
Change these lines to:
if (!rightNode.computed && ((property.type === "Literal" && leftNode.name === property.value) ||
    (property.type === "Identifier" && leftNode.name === property.name))) {
I added the check for rightNode.computed. If that's true, a non-literal expression is being used.⁄ØåA2017-03-26T10:34:45Z"2017-03-28T08:12:31Z*–What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 7.7.4
npm Version: 4.1.2

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  dot-notation: error
What did you do? Please include the actual source code causing the issue.
1['toString']
What did you expect to happen?
I expected the autofixer to produce valid syntax:
1 .toString
What actually happened? Please include the actual, raw output from ESLint.
The autofixer produced invalid syntax:
1.toString



What changes did you make? (Give an overview)
Previously, when fixing a computed property access from a number literal, the dot-notation autofixer would place a dot immediately after the number literal. However, a dot after a decimal integer literal gets parsed as a decimal point, not a property accessor. This commit updates the fixer to insert a space before the dot when the object is a decimal integer literal.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(927de90b8b507dd581e19b0acbb246c91bb6d9542017-03-28T08:12:30Z11638619: 
2017-03-26T10:34:46Z±@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @gyandeeps and @goatslacker to be potential reviewers.:
2017-03-26T10:34:47ZLGTM:
2017-03-27T21:57:57ZLGTM¯éG¯C2017-06-07T20:30:11Z"2017-06-09T02:01:46Z*üçTell us about your environment

ESLint Version: 4.0.0-rc.0
Node Version:
npm Version:

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
{
    "root": true,
    "parserOptions": {
        "ecmaVersion": 6,
        "ecmaFeatures": {
            "jsx": true
        },
        "sourceType": "module"
    },
    "plugins": ["destructuring", "switch-case", "promise"],
    "settings": {
        "react": {
            "version": "15.1"
        },
        "import/resolver": {
            "@saxo/webpack-import-resolver": {
                "config": "./js/build/webpack/config"
            }
        },
        "import/ignore": [
            "templates",
            "libs",
            "\\.json",
            "node_modules"
        ]
    },
    "globals": {
        // added by the build process
        "BUILD_IS_DEBUG": false,
        "BUILD_IS_PHONE": false,
        "BUILD_IS_TABLET": false,
        "BUILD_IS_DESKTOP": false,
        "BUILD_APP_NAME": false,
        // use for module splitting
        "require": false,
        // define our own globals since the built-in list contains many false negatives like "find" that are non-standard
        "window": false,
        "document": false,
        "location": false,
        "escape": false,
        "unescape": false,
        "setTimeout": false,
        "clearTimeout": false,
        "setInterval": false,
        "clearInterval": false,
        "console": false,
        "sessionStorage": false,
        "localStorage": false,
        "XMLHttpRequest": false,
        "atob": false,
        "Blob": false,
        "navigator": false,
        "MessageChannel": false,
        "Map": false,
        "Uint8Array": false,
        "Promise": false,
        "HTMLElement": false,
        "MouseEvent": false,
        "performance": false
    },
    "rules": {
        // Possible errors
        "no-await-in-loop": "error",
        "no-compare-neg-zero": "error",
        "no-cond-assign": "error",
        "no-console": "error",
        "no-constant-condition": "error",
        "no-control-regex": "error",
        "no-debugger": "error",
        "no-dupe-args": "error",
        "no-dupe-keys": "error",
        "no-duplicate-case": "error",
        "no-empty": "error",
        "no-empty-character-class": "error",
        "no-ex-assign": "error",
        "no-extra-boolean-cast": "error",
        "no-extra-parens": ["error", "functions"],
        "no-extra-semi": "error",
        "no-func-assign": "error",
        "no-inner-declarations": ["error", "functions"],
        "no-invalid-regexp": "error",
        "no-irregular-whitespace": "error",
        "no-obj-calls": "error",
        "no-prototype-builtins": "off",
        "no-regex-spaces": "error",
        "no-sparse-arrays": "error",
        "no-template-curly-in-string": "off",
        "no-unexpected-multiline": "error",
        "no-unreachable": "error",
        "no-unsafe-negation": "error",
        "no-unsafe-finally": "error",
        "use-isnan": "error",
        "valid-jsdoc": [
            "off", {
                // too restrictive at present
                "requireReturn": false,
                "requireParamDescription": false,
                "requireReturnDescription": false
            }
        ],
        "valid-typeof": "error",
        // Best practices
        "accessor-pairs": "off",
        "array-callback-return": "error",
        "block-scoped-var": "error",
        "class-methods-use-this": "off",
        "complexity": ["error", 18],
        "consistent-return": "off",
        "curly": ["error", "all"],
        "default-case": "off",
        "dot-location": ["error", "property"],
        "dot-notation": "off",
        "eqeqeq": ["error", "always", {"null": "ignore"}],
        "guard-for-in": "error",
        "no-alert": "error",
        "no-caller": "error",
        "no-case-declarations": "error",
        "no-div-regex": "error",
        "no-else-return": "error",
        "no-empty-function": "off",
        // Related - lodash/use-noop
        "no-empty-pattern": "error",
        "no-eq-null": "off",
        // see also eqeqeq
        "no-eval": "error",
        "no-extend-native": "error",
        "no-extra-bind": "error",
        "no-extra-label": "error",
        "no-fallthrough": "error",
        "no-floating-decimal": "error",
        "no-global-assign": "error",
        "no-implicit-coercion": "error",
        "no-implicit-globals": "error",
        "no-implied-eval": "error",
        "no-invalid-this": "off",
        // Does not work with spine this.proxy and arrows used in new code
        "no-iterator": "error",
        "no-labels": "error",
        "no-lone-blocks": "error",
        "no-loop-func": "error",
        "no-magic-numbers": [
            "off",
            {
                "ignore": [-1, 0, 1, 2]
            }
        ],
        // nice idea but many self explanatory numbers caught
        "no-multi-spaces": ["error", { "ignoreEOLComments": true }],
        "no-multi-str": "error",
        "no-new": "off",
        "no-new-func": "error",
        "no-new-wrappers": "error",
        "no-octal": "error",
        "no-octal-escape": "error",
        "no-param-reassign": "off",
        "no-proto": "error",
        "no-redeclare": "error",
        "no-return-assign": "error",
        "no-return-await": "error",
        "no-script-url": "error",
        "no-self-assign": "error",
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-throw-literal": "error",
        "no-unmodified-loop-condition": "error",
        "no-unused-expressions": "error",
        "no-unused-labels": "error",
        "no-useless-call": "error",
        "no-useless-concat": "error",
        "no-useless-escape": "error",
        "no-useless-return": "error",
        "no-void": "error",
        "no-warning-comments": "off",
        "no-with": "error",
        "radix": ["error", "always"],
        "require-await": "off",
        // fixed in es5 but we support android 4.1-4.3 which require a radix
        "vars-on-top": "off",
        "wrap-iife": ["error", "any"],
        "yoda": ["error", "never"],
        // Strict mode
        "strict": "error",
        // Variables
        "init-declarations": "off",
        "no-catch-shadow": "error",
        "no-delete-var": "off",
        "no-label-var": "error",
        "no-restricted-globals": "off",
        "no-shadow": "error",
        "no-shadow-restricted-names": "error",
        "no-undef": "error",
        "no-undef-init": "off",
        "no-undefined": "off",
        "no-use-before-define": ["error", "nofunc"],
        // Node.js and CommonJS
        "callback-return": "off",
        "global-require": "off",
        "handle-callback-err": "off",
        "no-mixed-requires": "off",
        "no-new-require": "off",
        "no-path-concat": "off",
        "no-process-env": "off",
        "no-process-exit": "off",
        "no-restricted-modules": "off",
        "no-restricted-properties": "off",
        "no-sync": "off",

        // Stylistic issues
        "array-bracket-spacing": ["error", "never"],
        "block-spacing": ["error", "always"],
        "brace-style": [
            "error",
            "1tbs",
            {
                "allowSingleLine": false
            }
        ],
        "camelcase": [
            "error",
            {
                "properties": "always"
            }
        ],
        "capitalized-comments": ["off", "never"], // would need a full review of alot of comments!
        "comma-dangle": ["error", "always-multiline"],
        "comma-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ],
        "comma-style": ["error", "last"],
        "computed-property-spacing": ["error", "never"],
        "consistent-this": "off",
        "eol-last": "error",
        "for-direction": "off",
        "func-call-spacing": ["error", "never"],
        "func-name-matching": "error",
        "func-names": "off",
        "func-style": [
            "error",
            "declaration",
            {
                "allowArrowFunctions": true
            }
        ],
        "id-blacklist": "off",
        "id-length": ["off"],
        // Difficult to enforce
        "id-match": "off",
        "indent": [
            "error",
            4,
            {
                "SwitchCase": 1
            }
        ],
        // TODO: Consider MemberExpression
        "jsx-quotes": ["error", "prefer-double"],
        "key-spacing": [
            "error",
            {
                "beforeColon": false,
                "afterColon": true
            }
        ],
        "keyword-spacing": "error",
        "line-comment-position": "off",
        "linebreak-style": ["error", "windows"],
        "lines-around-comment": [
            "error",
            {
                "beforeBlockComment": true,
                "beforeLineComment": true,
                "allowBlockStart": true,
                "allowObjectStart": true,
                "allowArrayStart": true
            }
        ],
        "max-depth": ["error", 4],
        "max-len": [
            "error",
            {
                "code": 150
            }
        ],
        "max-lines": [
            "error",
            {
                "skipBlankLines": true,
                "skipComments": true,
                "max": 300
            }
        ],
        "max-nested-callbacks": ["error", 3],
        "max-params": ["error", 5],
        "max-statements": ["error", 30],
        "max-statements-per-line": [
            "error",
            {
                "max": 2
            }
        ],
        "multiline-ternary": "off",
        "new-cap": [
            "error",
            {
                "newIsCap": true,
                "capIsNew": false
            }
        ],
        // React mixins are capitalized
        "new-parens": "error",
        "newline-per-chained-call": "off",
        "no-array-constructor": "error",
        "no-bitwise": "off",
        "no-continue": "off",
        "no-inline-comments": "off",
        "no-lonely-if": "error",
        "no-mixed-spaces-and-tabs": "error",
        "no-multiple-empty-lines": [
            "error",
            {
                "max": 1,
                "maxBOF": 0,
                "maxEOF": 1
            }
        ],
        "no-multi-assign": "off",
        "no-negated-condition": "error",
        "no-nested-ternary": "error",
        "no-new-object": "error",
        "no-plusplus": "off",
        "no-restricted-syntax": "off",
        "no-tabs": "error",
        "no-ternary": "off",
        "no-trailing-spaces": "error",
        "no-underscore-dangle": [
            "off",
            {
                "allow": ["_"]
            }
        ],
        // required in a few cases
        "no-unneeded-ternary": [
            "error",
            {
                "defaultAssignment": false
            }
        ],
        "no-whitespace-before-property": "error",
        "nonblock-statement-body-position": "off",
        "object-curly-newline": [
            "off", {
                // waiting on https://github.com/eslint/eslint/issues/6488
                "ObjectExpression": {
                    "multiline": true,
                    "minProperties": 3
                }
            }
        ],
        "object-curly-spacing": ["error", "always"],
        "object-property-newline": [
            "error", {
                "allowMultiplePropertiesPerLine": true
            }
        ],
        "one-var": [
            "error",
            {
                "let": "never",
                "const": "never"
            }
        ],
        "one-var-declaration-per-line": "off",
        "operator-assignment": ["error", "always"],
        "operator-linebreak": ["error", "after"],
        "padded-blocks": "off",
        "padding-line-between-statements": "off",
        "quote-props": "off",
        "quotes": ["error", "single"],
        "require-jsdoc": "off",
        "semi": ["error", "always"],
        "semi-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ],
        "semi-style": ["error", "last"],
        "sort-keys": "off",
        "sort-vars": "off",
        "space-before-blocks": ["error", "always"],
        "space-before-function-paren": ["error", "never"],
        "space-in-parens": ["error", "never"],
        "space-infix-ops": "error",
        "space-unary-ops": [
            "error",
            {
                "words": true,
                "nonwords": false
            }
        ],
        "spaced-comment": ["error", "always", { "exceptions": ["*"] }],
        "switch-colon-spacing": ["error", { "after": true, "before": false }],
        "template-tag-spacing": "off",
        "unicode-bom": "off",
        "wrap-regex": "off",
        // ES2015 rules
        "arrow-body-style": [
            "error",
            "as-needed",
            {
                "requireReturnForObjectLiteral": true
            }
        ],
        "arrow-parens": ["error", "always"],
        "arrow-spacing": [
            "error",
            {
                "before": true,
                "after": true
            }
        ],
        "constructor-super": "error",
        "generator-star-spacing": "off",
        "no-class-assign": "error",
        "no-confusing-arrow": "off",
        "no-const-assign": "error",
        "no-dupe-class-members": "error",
        "no-duplicate-imports": "error",
        "no-new-symbol": "error",
        "no-restricted-imports": "error",
        "no-this-before-super": "error",
        "no-useless-computed-key": "error",
        "no-useless-constructor": "error",
        "no-useless-rename": "error",
        "no-var": "error",
        "object-shorthand": "error",
        "prefer-arrow-callback": "off",
        "prefer-const": [
            "error",
            {
                "ignoreReadBeforeAssign": true
            }
        ],
        "prefer-destructuring": "off", // could consider when autofixed
        "prefer-numeric-literals": "off",
        "prefer-promise-reject-errors": "off",
        "prefer-reflect": "off",
        "prefer-rest-params": "off",
        "prefer-spread": "off",
        "prefer-template": "off",
        "sort-imports": "off",
        "symbol-description": "off",
        "require-yield": "off",
        "template-curly-spacing": "off",
        "yield-star-spacing": "off",
        // Destructuring
        "destructuring/no-rename": "error",
        "destructuring/in-params": [
            "error",
            {
                "max-params": 1
            }
        ],
        // Switch-Case
        "switch-case/no-case-curly": "error",
        "switch-case/newline-between-switch-case": [
            "error",
            "always",
            {
                "fallthrough": "never"
            }
        ],
        "promise/catch-or-return": "off",
        "promise/param-names": "error",
        "promise/no-native": "off",
        "promise/no-return-wrap": "off",
        "promise/always-return": "off",
        "promise/no-nesting": "off",
        "promise/no-promise-in-callback": "error",
        "promise/no-callback-in-promise": "off",
        "promise/prefer-await-to-then": "off",
        "promise/prefer-await-to-callbacks": "off"
    }
}

What did you do? Please include the actual source code causing the issue.
ran eslint.. got an error. This appears to be a decent file that reproduces the issue..
describe('xyz', () => {
})
;


What did you expect to happen?
No error..
What actually happened? Please include the actual, raw output from ESLint.
TypeError: Cannot read property 'range' of null
  at SourceCode.getFirstTokenBetween (c:\path\to\node_modules\eslint\lib\token-store\index.js:339:18)
  at commentsExistBetween (c:\path\to\node_modules\eslint\lib\rules\semi-style.js:50:31)
  at Object.fix (c:\path\to\node_modules\eslint\lib\rules\semi-style.js:82:29)
  at RuleContext.report (c:\path\to\node_modules\eslint\lib\rule-context.js:127:34)
  at check (c:\path\to\node_modules\eslint\lib\rules\semi-style.js:73:25)
  at Linter.:matches(BreakStatement,ContinueStatement,DebuggerStatement,DoWhileStatement,EmptyStatement,ExportAllDeclaration,ExportDefaultDeclaration,ExportNamedDeclaration,ExpressionStatement,ImportDeclaration,ReturnStatement,ThrowStatement,VariableDeclaration) (c:\path\to\node_modules\eslint\lib\rules\semi-style.js:101:21)
  at emitOne (events.js:96:13)
  at Linter.emit (events.js:188:7)
  at NodeEventGenerator.applySelector (c:\path\to\node_modules\eslint\lib\util\node-event-generator.js:265:26)
  at NodeEventGenerator.applySelectors (c:\path\to\node_modules\eslint\lib\util\node-event-generator.js:294:22)
  at NodeEventGenerator.enterNode (c:\path\to\node_modules\eslint\lib\util\node-event-generator.js:308:14)
  at CodePathAnalyzer.enterNode (c:\path\to\node_modules\eslint\lib\code-path-analysis\code-path-analyzer.js:602:23)
  at Traverser.enter (c:\path\to\node_modules\eslint\lib\linter.js:920:36)
  at Traverser.__execute (c:\path\to\node_modules\estraverse\estraverse.js:397:31)
  at Traverser.traverse (c:\path\to\node_modules\estraverse\estraverse.js:501:28)
  at Traverser.traverse (c:\path\to\node_modules\eslint\lib\util\traverser.js:31:22)
  at Linter.verify (c:\path\to\node_modules\eslint\lib\linter.js:917:28)
  at multipassFix (c:\path\to\node_modules\eslint\lib\cli-engine.js:169:27)
  at processText (c:\path\to\node_modules\eslint\lib\cli-engine.js:272:27)
  at processFile (c:\path\to\node_modules\eslint\lib\cli-engine.js:320:18)
  at executeOnFile (c:\path\to\node_modules\eslint\lib\cli-engine.js:655:25)
  at fileList.forEach.fileInfo (c:\path\to\node_modules\eslint\lib\cli-engine.js:693:13)
  at Array.forEach (native)
  at CLIEngine.executeOnFiles (c:\path\to\node_modules\eslint\lib\cli-engine.js:692:18)
  at Object.<anonymous> (c:\path\to\node_modules\grunt-eslint\tasks\eslint.js:29:20)2I
(3da7b5e9297917849b66e9e78398b4ac6dce02bd2017-06-09T02:01:38Z2373964:W
2017-06-07T21:34:00Z?I can reproduce the problem. Its caused by the semi-style rule.∆§ª:2016-10-30T01:56:36Z"2016-11-01T18:26:18Z*‘What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (template)
See #7450


What changes did you make? (Give an overview)
This allows lines-around-directive to correctly handle directives that have a trailing semicolon on a different line.
'use strict'

; [1, 2, 3].map(foo)
Is there anything you'd like reviewers to focus on?
This is semver-minor with our semver policy, because it can cause more warnings to be reported in cases like this:2J
(8a3e7171d65b45410896001f69d1e44a4c843c4e2016-11-01T18:26:18Z11638619:∞
2016-10-30T01:56:37Zó@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @kaicataldo to be a potential reviewer.:
2016-10-30T01:56:37ZLGTM:ù
2016-10-31T21:19:33ZÑJust a heads up: we have moved to a new CLA checker on pull requests. Even if you've previously signed our CLA, we will need to you sign the new one. To do so, look at the status checks for licence/cla and click the "Details" link. Sorry for the inconvenience.Ú
yäA2017-03-26T09:08:12Z"2017-03-27T21:32:28Z*ÈWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix



Tell us about your environment

ESLint Version:
Node Version:
npm Version:

What parser (default, Babel-ESLint, etc.) are you using?
Please show your full configuration:
rules:
  dot-notation: error
What did you do? Please include the actual source code causing the issue.
foo[('bar')];
What did you expect to happen?
I expected eslint to autofix the code to
foo.bar;
What actually happened? Please include the actual, raw output from ESLint.
eslint autofixed the code to invalid syntax:
foo[.bar]
What changes did you make? (Give an overview)
This commit updates the dot-notation autofixer logic to ensure that parenthesized computed keys are handled correctly. Previously, the rule didn't account for the possibility that a computed key might be parenthesized, so it ended up using the parens instead of the square brackets for the fix range.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(6c819d8ee5f0e355eb5d938b5e65e172bce2b70f2017-03-27T21:32:27Z11638619: 
2017-03-26T09:08:13Z±@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @gyandeeps and @goatslacker to be potential reviewers.:
2017-03-26T09:08:13ZLGTM:
2017-03-26T09:19:28ZLGTMà#ã02016-05-13T14:59:15Z"2016-05-14T17:14:21Z*£What version of ESLint are you using?
eslint@2.9.0
What parser (default, Babel-ESLint, etc.) are you using?
babel-eslint@6.0.4
What did you do? Please include the actual source code causing the issue.
I'm using the grunt-eslint module that do this call:
var results = report.results;
if (opts.quiet) {
    results = eslint.CLIEngine.getErrorResults(results);
}
var output = formatter(results);
What did you expect to happen?
I think it should filter the results getting only the "errors".
What actually happened? Please include the actual, raw output from ESLint.
The problem is that the function getErrorResults(results) only returns the filePath: and messages key, while the original report.results passed to the function contains also errorCount and warningCount keys.
Am I missing something?
Thanks.2G
(2166ad475bf58a4c1fa11d5c595598d17574ffd92016-05-14T17:14:19Z72561:f
2016-05-13T23:30:42ZNConfirmed using --quiet breaks the output of some formatters.
Working on this.§A“72016-09-12T10:44:43Z"2016-10-24T23:56:57Z*ôTell us about your environment

ESLint Version: 3.5.0
Node Version: n/a - confirmed in our online demo. (Chrome 54)
npm Version: n/a

What parser (default, Babel-ESLint, etc.) are you using?

default

Please show your full configuration:

nothing

What did you do? Please include the actual source code causing the issue.
Lint the following code on the online demo.
/*eslint no-extra-parens:error*/

(0123).toString()
Or
$ echo "(0123).toString()" | eslint --stdin --no-eslintrc --rule no-extra-parens:error
What did you expect to happen?
1 error.
The parentheses which are enclosing the octal numeric literal are unnecessary.
0123.toString() is legal since OctalIntegerLiteral production never ends with ..
What actually happened? Please include the actual, raw output from ESLint.
No errors.2I
(3813988e5aa82d3b8b19ec9a99f163b910c1ae4b2016-10-24T23:56:54Z1937871:â
2016-09-12T10:54:43ZqNote: Requires acorn@4.0.2 to fix this. The problem of parsing 0123.toString() has fixed in acornjs/acorn@b14cb8bï-’72016-09-12T16:56:10Z"2016-09-16T16:42:19Z*Ç	Tell us about your environment

ESLint Version: 3.5.0
Node Version: 6.2.1
npm Version: 3.9.6

What parser (default, Babel-ESLint, etc.) are you using? Babel-eslint
Please show your full configuration: Isolated config and used only one rule.
        "max-len": [
            2,
            100, {
                "ignoreComments": true,
                "ignoreTrailingComments": true,
                "ignoreUrls": true,
                "ignoreStrings": true,
                "ignoreTemplateLiterals": true
            }
        ]
What did you do? Please include the actual source code causing the issue.
        this.x = `aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
        aaaaaaaaaaaaa`;

What did you expect to happen? I expected eslint to not throw a max-len error as I have ignoreTemplateLiterals turned on.
What actually happened? Please include the actual, raw output from ESLint. It threw an error for multi-line template literal.
/cc #5805 and #7049.2G
(28ddcf8e4b0337f14374210c22d8f8458a06bade2016-09-16T16:42:14Z45469:∏
2016-09-12T19:13:14ZüThanks for the report, @RanadeepPolavarapu! Easy repro in the demo:
/* eslint max-len: ["error", 16, { "ignoreComments": true, "ignoreTemplateLiterals": true }] */

const a = `asdffdsaasdffdsaasdffdsa
asdffdsaasdffdsaasdffdsa
asdffdsaasdffdsaasdffdsa
asdffdsaasdffdsaasdffdsa`;
This gives a max-len error on the second and third lines of the literal. It looks like groupByLineNumber is only handling the first and last lines of the literal and not any interior lines.
@RanadeepPolavarapu do you want to put together a pull request to fix this?:ù
2016-09-12T23:44:45ZÑ@ljharb FYI. Any chance you can take a look at this (and maybe help @RanadeepPolavarapu if s/he wants to put together a PR)? Thanks!:ú
2016-09-12T23:57:14ZÉAbsolutely - @RanadeepPolavarapu please ping me if you need any help, or if you're not interested in making a PR, I can work on it.:Ö
2016-09-13T08:06:47ZmI'm going to put up a PR for this shortly, since this is my bug - @RanadeepPolavarapu, I hope you don't mind!:#
2016-09-13T08:13:14Z#7138 filed:m
2016-09-13T16:46:39ZU@ljharb Thanks for the PR. I apologize for my late reply, I fell ill and was resting.ê—ÀJ2017-10-30T23:31:05Z"2017-11-01T22:35:56Z*ÂThis fixes JUnit parsing errors which treat no testcases as a failure (e.g. Atlassian bamboo).

What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[ ] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[X] Other, please explain:

On files that pass, a "passing" testcase should be added. Without any passing testcases, some JUnit parsers will fail, claiming that there are no tests.
This was unofficially reported here: #16 (comment)
This pull request ensures that a passing testcase is added to a testsuite if there are no failures.


What changes did you make? (Give an overview)
Added empty "passing" testcase to JUnit formatter when a file has no messages.
Is there anything you'd like reviewers to focus on?
No2H
(accc49039c5b436a2396141a32cf49421ac4158f2017-11-01T22:35:56Z462466:;
2017-10-30T23:31:06Z#All committers have signed the CLA.:ß
2017-10-31T03:34:05ZéI'm not very familiar with the JUnit format. What does the tests value mean in this context? Would it make sense for the value to always be 1?:Œ
2017-10-31T03:44:06Zµ"Tests" refers to the number of tests run. In an instance of multiple
failures, "tests" and "failures" would always be the same. In the case
where there's no failures, we just want to record that a test has been run
and passed.

With proper unit testing, a suite will have the same value for "tests", no
matter how many pass or fail, but because linting doesn't explicitly list
every test run and passed for each file, only the places where it fails,
and because the same "test" may fail in multiple locations, the number of
tests to report should either be a pass for the whole file, or the number
of failures.
‚Ä¶
On 31 Oct. 2017 12:34, "Teddy Katz" ***@***.***> wrote:
 I'm not very familiar with the JUnit format. What does the tests value
 mean in this context? Would it make sense for the value to always be 1?

 ‚Äî
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#9547 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AAcOgge_N4kT2lV07xtenkC4ugva4nZEks5sxocjgaJpZM4QL8qO>
 .:ÿ
2017-10-31T03:49:11ZøClosing and reopening this PR to restart the Appveyor build. (We had an unrelated issue where the build was failing on master today, and I think this PR was created while that was happening.):&
2017-11-01T22:36:02ZThanks for PR!:∑
2017-11-02T03:41:59ZûTotally separate issue: Is it worth having a CLI option that would allow all files to be included in input and shown in formatters, even those with no linting errors? I would hate to see that for a formatter like stylish, but it could be interesting or useful for formatters like JUnit.:¥
2017-11-02T05:05:12ZõI think formatters already have access to this information. Do you mean the command-line flag would trigger a behavior change in the formatters themselves?ÈüÄC2017-05-10T19:27:39Z"2017-05-13T05:20:48Z*Å
FYI, this is a dupe of #8351, but just including more information:
Tell us about your environment

ESLint Version:
3.19.0
Node Version:
7.9.0
npm Version:
4.2.0

What parser (default, Babel-ESLint, etc.) are you using?
babel-eslint
Please show your full configuration:

'object-shorthand': [2, 'always', {'ignoreConstructors': true}],

What did you do? Please include the actual source code causing the issue.

const keys = {
first: 'first',
second: 'second',
};
const o = {
[keys.first]: true,
[keys.last]: true,
};
const actionHandlers = {
	[actionTypes.UPDATE_COLLAPSED_ENTRIES]: state => true
};
What did you expect to happen?
For it not to error out.
What actually happened? Please include the actual, raw output from ESLint.
It through an error:
TypeError: Cannot read property 'charAt' of undefined
    at isConstructor (/Users/ncavanaugh/Dev/git/check-source-formatting/node_modules/eslint/lib/rules/object-shorthand.js:120:35)
    at EventEmitter.Property:exit (/Users/ncavanaugh/Dev/git/check-source-formatting/node_modules/eslint/lib/rules/object-shorthand.js:395:48)
...

It comes down to keys that have a property don't have a name string attached, and so when it tries to run charAt on it, it throws an error.
Let me know if you need more info than the above.
Thanks!2J
(df17bc878a07229993d7652ca7624d0510fb5d0a2017-05-13T05:20:40Z11638619:Ä
2017-05-10T19:41:51ZÁThanks for the report. However, I can't seem to reproduce this issue -- ESLint is running successfully on that code without an error.
What version of babel-eslint are you using? Does the error also occur if you remove babel-eslint?:•
2017-05-10T20:09:22Zå@not-an-aardvark Thanks for the response.
I'm using babel-eslint v6.1.2, but I also just realized, I never tested the above code directly, so but it's happening without babel-eslint, but only with arrow functions as the property value.
Ala:
const actionHandlers = {
	[actionTypes.UPDATE_COLLAPSED_ENTRIES]: state => true
};

Let me know if there's any other info you need.
Thanks @not-an-aardvark::
2017-05-11T05:16:52Z"Thanks, I can reproduce the issue.¥8éA2017-03-26T20:01:52Z"2017-03-28T10:47:12Z*ƒWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
N/A
What did you do? Please include the actual source code causing the issue.
const eslint = require("eslint");

const config = {};

eslint.linter.verify("foo", config);

console.log(config);

What did you expect to happen?
I expected config to still be an empty object.
What actually happened? Please include the actual, raw output from ESLint.
A globals property was added to config, so the output was:
{ globals: {} }



What changes did you make? (Give an overview)
Avoid modifying the argument object. Fixes #8329
Is there anything you'd like reviewers to focus on?
No.2G
(3146167a9c1dafa15ba991155ae8b76344eab2ab2017-03-28T10:47:10Z72561:
2017-03-26T20:01:53ZLGTM:≈
2017-03-26T20:01:56Z¨@alberto, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @not-an-aardvark and @nzakas to be potential reviewers.:T
2017-03-26T22:00:42Z<@alberto Could you do perf run before and after this change?:¥
2017-03-27T00:24:42Zõ@ilyavolodin no noticeable difference:
Before:
Loading:
  Load performance Run #1:  174.65021ms
  Load performance Run #2:  168.799739ms
  Load performance Run #3:  178.816711ms
  Load performance Run #4:  177.747853ms
  Load performance Run #5:  182.442309ms

  Load Performance median:  177.747853ms


Single File:
  CPU Speed is 2600 with multiplier 13000000
  Performance Run #1:  4207.118519ms
  Performance Run #2:  4098.461712ms
  Performance Run #3:  3699.8055409999997ms
  Performance Run #4:  3638.281188ms
  Performance Run #5:  3681.332236ms

  Performance budget ok:  3699.8055409999997ms (limit: 5000ms)


Multi Files (0 files):
  CPU Speed is 2600 with multiplier 39000000
  Performance Run #1:  12933.732048ms
  Performance Run #2:  12714.120701ms
  Performance Run #3:  12723.325213ms
  Performance Run #4:  12861.724682ms
  Performance Run #5:  12863.99631ms

  Performance budget ok:  12861.724682ms (limit: 15000ms)

After:
Loading:
  Load performance Run #1:  174.81977ms
  Load performance Run #2:  179.599493ms
  Load performance Run #3:  183.244189ms
  Load performance Run #4:  181.803644ms
  Load performance Run #5:  165.226383ms

  Load Performance median:  179.599493ms


Single File:
  CPU Speed is 2600 with multiplier 13000000
  Performance Run #1:  3713.787855ms
  Performance Run #2:  3659.128527ms
  Performance Run #3:  3659.855329ms
  Performance Run #4:  3786.704485ms
  Performance Run #5:  4434.773668ms

  Performance budget ok:  3713.787855ms (limit: 5000ms)


Multi Files (0 files):
  CPU Speed is 2600 with multiplier 39000000
  Performance Run #1:  12947.623801ms
  Performance Run #2:  12859.656538ms
  Performance Run #3:  12722.837927ms
  Performance Run #4:  12703.583254ms
  Performance Run #5:  13003.146405ms

  Performance budget ok:  12859.656538ms (limit: 15000ms)”G˘C2017-06-07T22:13:18Z"2017-06-09T02:01:39Z*íWhat is the purpose of this pull request? (put an "X" next to item)
[ X ] Bug fix (template)



What changes did you make? (Give an overview)
Ensure prevToken and nextToken are not null before checking for comments
Is there anything you'd like reviewers to focus on?
Nothing2I
(3da7b5e9297917849b66e9e78398b4ac6dce02bd2017-06-09T02:01:38Z2373964:
2017-06-07T22:13:18ZLGTM:"
2017-06-08T23:38:34Z
Fixing CLAç#∫è02016-05-14T03:11:17Z"2016-05-14T16:52:19Z*¨What version of ESLint are you using?
2.10.0
What parser (default, Babel-ESLint, etc.) are you using?
babel-eslint
Please show your full configuration:
{
  "parser": "babel-eslint",
  "extends": "airbnb",
  "env": {
    "browser": true,
    "mocha": true,
    "node": true
  },
  "rules": {
    "react/jsx-no-bind": 0,
    "react/prefer-stateless-function": 0,
    "comma-dangle": 0,
    "no-use-before-define": 0,
    "consistent-return": 0
  },
  "plugins": [
    "react"
  ]
}

What did you do? Please include the actual source code causing the issue.
Just ran eslint on my project as normal
What did you expect to happen?
No parser error
What actually happened? Please include the actual, raw output from ESLint.
Get the following error:
TypeError: Cannot read property 'value' of undefined
On linting this file:
module.exports = {
  'Home.Company': 'Comapny ABC'
};


Cannot read property 'value' of undefined
TypeError: Cannot read property 'value' of undefined
at isEnclosedInParens (/Users/Shared/Jenkins/Home/workspace/Bulk-Downloader-Test/node_modules/eslint/lib/rules/no-return-assign.js:23:21)
at EventEmitter.AssignmentExpression (/Users/Shared/Jenkins/Home/workspace/Bulk-Downloader-Test/node_modules/eslint/lib/rules/no-return-assign.js:51:32)
at emitOne (events.js:95:20)
at EventEmitter.emit (events.js:182:7)
at NodeEventGenerator.enterNode (/Users/Shared/Jenkins/Home/workspace/Bulk-Downloader-Test/node_modules/eslint/lib/util/node-event-generator.js:40:22)
at CodePathAnalyzer.enterNode (/Users/Shared/Jenkins/Home/workspace/Bulk-Downloader-Test/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:607:23)
at CommentEventGenerator.enterNode (/Users/Shared/Jenkins/Home/workspace/Bulk-Downloader-Test/node_modules/eslint/lib/util/comment-event-generator.js:97:23)
at Controller.traverser.traverse.enter (/Users/Shared/Jenkins/Home/workspace/Bulk-Downloader-Test/node_modules/eslint/lib/eslint.js:886:36)
at Controller.__execute (/Users/Shared/Jenkins/Home/workspace/Bulk-Downloader-Test/node_modules/estraverse/estraverse.js:397:31)
at Controller.traverse (/Users/Shared/Jenkins/Home/workspace/Bulk-Downloader-Test/node_modules/estraverse/estraverse.js:501:28)

This was working on 2.9.02I
(f33e49ffbc7414b747b3345489ca90c0047628212016-05-14T16:52:17Z5554486:^
2016-05-14T03:12:13ZFI'm seeing this too this morning. eslint@2.10.0 and eslint@latest both:&
2016-05-14T03:12:40ZAlso see #6158:ü
2016-05-14T03:15:34ZÜIf I drop to 2.9.0 I get
Error: Cannot find module 'estraverse-fb'

FYI, but updating babel-eslint SEEMS to make the problems go away.:.
2016-05-14T03:18:06Zits because of #6158 .:]
2016-05-14T03:45:31ZEPinning eslint@2.9.0 and using babel-eslint@latest should be working.:Æ
2016-05-14T03:45:57ZïThis particular issue occurs with the default parser as well. Here's a barebone example:
ESLint Config:
rules:                                                                          
  no-return-assign: 2 
File being linted:
module.exports = {a: 42};
Error:

Cannot read property 'value' of undefined
TypeError: Cannot read property 'value' of undefined
at isEnclosedInParens (/opt/code/eslint-test/node_modules/eslint/lib/rules/no-return-assign.js:23:21)
at EventEmitter.AssignmentExpression (/opt/code/eslint-test/node_modules/eslint/lib/rules/no-return-assign.js:51:32)
at emitOne (events.js:96:13)
at EventEmitter.emit (events.js:188:7)
at NodeEventGenerator.enterNode (/opt/code/eslint-test/node_modules/eslint/lib/util/node-event-generator.js:40:22)
at CodePathAnalyzer.enterNode (/opt/code/eslint-test/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:607:23)
at CommentEventGenerator.enterNode (/opt/code/eslint-test/node_modules/eslint/lib/util/comment-event-generator.js:97:23)
at Controller.traverser.traverse.enter (/opt/code/eslint-test/node_modules/eslint/lib/eslint.js:886:36)
at Controller.__execute (/opt/code/eslint-test/node_modules/estraverse/estraverse.js:397:31)
at Controller.traverse (/opt/code/eslint-test/node_modules/estraverse/estraverse.js:501:28)
npm ERR! Test failed.  See above for more details.

The error only occurs in 2.10.0 and only when the no-return-assign rule is enabled.:E
2016-05-14T04:01:14Z-Guys can u plz try the solution on here #6160:^
2016-05-14T04:12:24ZF@gyandeeps Same error using that build.
Edit: Moved this post to #6161:N
2016-05-14T04:24:14Z6@meeber Plz log a separate issue for that rule. thanksÆ.èA2017-03-26T20:30:05Z"2017-03-28T21:49:44Z*™What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 7.7.4
npm Version: 4.1.2

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  no-useless-computed-key: error
What did you do? Please include the actual source code causing the issue.
({ get[0]() {} });
What did you expect to happen?
I expected the code to be autofixed to
({ get 0() {} });
What actually happened? Please include the actual, raw output from ESLint.
The code was autofixed to
({ get0() {} });



What changes did you make? (Give an overview)
Previously, the no-useless-computed-key autofixer could sometimes place a key next to get, set, or async identifier in a property, causing the identifier and the key to combine and become a new identifier. This commit updates the autofixer to insert a space whenever that would happen to prevent the identifiers from combining.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(29f4ba59aaba02177c539ce8414ff2639bb81b3b2017-03-28T21:49:43Z11638619:≈
2017-03-26T20:30:06Z¨@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @BYK, @mysticatea and @kaicataldo to be potential reviewers.:
2017-03-26T20:30:07ZLGTM:
2017-03-27T02:08:14ZLGTMãüÅC2017-05-11T05:23:40Z"2017-05-13T05:20:41Z*üWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8576)
What changes did you make? (Give an overview)
This commit adds a missing node type check to fix the crash described in #8576.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(df17bc878a07229993d7652ca7624d0510fb5d0a2017-05-13T05:20:40Z11638619: 
2017-05-11T05:23:41Z±@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @martijndeh, @vitorbal and @mysticatea to be potential reviewers.:
2017-05-11T05:23:41ZLGTMÎ•∫:2016-10-30T01:00:29Z"2016-10-31T19:32:48Z*ôWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (template)
See #7477


What changes did you make? (Give an overview)
This ensures that if a return statement has an argument, and it's on the same code path as another return statement, the first return statement is not considered to be a useless return.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(8a71d4a80750c820bed098d43bb2c237427755d42016-10-31T19:32:47Z11638619:∞
2016-10-30T01:00:30Zó@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea to be a potential reviewer.:
2016-10-30T01:00:30ZLGTMê4†ø(2016-02-08T14:11:28Z"2016-02-15T16:55:54Z*±Consider the following one-liner:
export default function () {}
Eslint config (from demo):
ECMA features:

 modules

Rules:

 func-style

Error is reported:
1:16 - Expected a function expression. (func-style)

Although the example given is obviously not a function expression there might be a way to define exception in the rule for the case when one want to have all functions created using function expressions but allow anonymous (or maybe even named?) function to be exported as default from a module.
It makes sense to do so for short modules that export one single function as default.
Without a way to express this exception one valid way to default-export a function is this:
const init = function () {};

export {init as default};
which makes us define provisional variable which would be unneeded otherwise.2H
(86c5a20815b5246ce404700fa3921b4a06512b912016-02-15T10:38:59Z126780:ˆ
2016-02-08T14:11:31Z›@jrencz Thanks for the issue! If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead

Requesting a new rule? Please see Proposing a New Rule for instructions.:_
2016-02-08T14:52:30ZGexport default (function () {});
There, now it's a function expression.:§
2016-02-08T15:24:45Zã@michaelficarra that's right, but then we're modifying the source just to meet the rule with its current possibilities.
Main benefit from using func-style is (as described in rule readme) disallowing functions to be hoisted. There's no other benefit from forcefully making this anonymous function a function expression than to make func-style pass - it won't be hoisted anyway in this very case.:”
2016-02-08T15:32:59Z∫Well technically the binding is hoisted, but its name cannot be referenced from JavaScript code, so it's not observable. Anyway, if your goal is to never use function declarations, wrapping it in parentheses would indeed be the proper solution. If, however, your goal is to avoid a potential pitfall involving hoisting (I'm not sure what that pitfall is) then you are right, this one particular form should be an exception.
edit: Given that this rule is listed as a stylistic issue, I am now certain that the first solution is the proper one, in which case üëé from me.:G
2016-02-08T18:00:40Z/This rule shouldn't apply for a default export.:Ô
2016-02-09T05:40:02Z÷@nzakas Of course it should:
f();
// ...
export default function f(){}
This is exactly the kind of thing this rule is meant to avoid. What we were discussing is whether it should apply to an unnamed default export.:ó
2016-02-09T20:36:05Z˛The rule isn't about enforcing a name or not, it's about the stylistic preference between these:
function foo() {}
var foo = function(){};
Forcing people to put parentheses around or name a default exported function doesn't seem remotely related to that.:˙
2016-02-09T22:47:03Z·@nzakas From the docs:

The primary difference between function declarations and function expressions is that declarations are hoisted to the top of the scope in which they are defined, which allows you to write code that uses the function before the declaration. For example:
doSomething();

function doSomething() {
    // ...
}
Although this code might seem like an error, it actually works fine because JavaScript engines hoist the function declarations to the top of the scope. That means this code is treated as if the declaration came before the invocation.
For function expressions, you must define the function before it is used, otherwise it causes an error.

The style is that they don't want to see a reference to a function above the definition of that function. So this rule should certainly apply for a default export of a named function declaration. The only remaining question is whether this rule should treat a default export of an unnamed function declaration the same way.:¿
2016-02-10T20:46:27ZßThe style is that they don't want to see a reference to a function above the definition of that function

That's an inference that I don't think is 100% valid. We have another rule no-use-before-define that is a better indicator of this intent. This rule is just about style, and the docs explain the consequences of changing that style not as a rationalization for the rule but for the edification of the reader.
And yes, the question of this issue is about unnamed default export functions. My feeling is that these should be omitted from this rule.:ì
2016-02-13T14:12:43Z{@nzakas - Is the action item "This rule shouldn't apply for a default export.", thus make the rule skip on default exports?:
2016-02-13T17:11:01ZYes:4
2016-02-14T02:45:31Züòí unnamed default exports:›
2016-02-18T22:57:28ZƒHere's my concern: I just don't believe that people who want their functions to look like this:
var foo = function(){};
are also going to want default exports to look like this:
export default (function(){})
Nor do I think that forcing them to remove the ID makes any sense if they prefer function expressions because, again, this isn't about hoisting or about names, it's about the preferred style for writing functions as either an assignment or a declaration. In the case of default exports, you don't have a choice - it's always a declaration so long as its not surrounded by parentheses. Whether or not it has ID doesn't really matter.
I mistyped before because I forgot about the case of people preferring declaration vs. expression, I think we just omit all default exports as I don't think it makes sense for this rule to apply.:€
2016-02-19T00:59:16Z¬@nzakas Then why not have an exception for all export forms? How is it different than preferring
var f = function(){};
export f;
to
export function f(){}
which this rule would currently enforce?:
2016-02-19T18:25:27Z◊@michaelficarra if I'm not mistaken, you can do this:
export var f = function(){};
But you cannot do this:
export default var f = function(){};
So it seems like checking nondefault exports is still a valid use case.:∞
2016-02-19T18:33:23ZóOh okay, so you just don't think users who prefer function expressions would want to use the parentheses in export default position. I can accept that.:s
2016-02-19T18:34:26Z[maybe this rule should just ignore exports and we need another rule just to handle exports?:Ø
2017-05-17T03:30:00ZñWould be cool to have some rule that allows to export like this:
export default (props) => (
    <View>
        <TextInput {...props} />
    </View>
)ÜÄ«N2018-03-03T23:23:04Z"2018-03-06T09:09:18Z*ÖWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#9878)



What changes did you make? (Give an overview)
This fixes a bug in the indent rule where a line comparison with the end of a token would use the end location of any trailing whitespace in the token, rather than the location of the last non-whitespace character in the token. This behavior went against user intuition for tokens with trailing whitespace.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(72ca5b35b843cc376a66632e07c307f9230637012018-03-06T09:09:17Z11638619≠8âA2017-03-26T08:35:26Z"2017-03-28T10:47:12Z*∞Tell us about your environment

ESLint Version: master
Node Version: 7.7.4
npm Version: 4.1.2

What did you do? Please include the actual source code causing the issue.

const eslint = require("eslint");

const config = {};

eslint.linter.verify("foo", config);

console.log(config);
What did you expect to happen?
I expected config to still be an empty object.
What actually happened? Please include the actual, raw output from ESLint.
A globals property was added to config, so the output was:
{ globals: {} }

I ran into this issue when I tried to pass a config to linter.verify and then to CLIEngine afterwards. An error was thrown because CLIEngine expected an array of globals instead of an object, which was confusing because I hadn't originally specified globals at all.
I suspect this is the cause of #7967.2G
(3146167a9c1dafa15ba991155ae8b76344eab2ab2017-03-28T10:47:10Z72561Øòë@2017-03-07T02:27:22Z"2017-03-09T19:34:52Z*°What is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix (template)
Fixes #8175.
What changes did you make? (Give an overview)
This PR fixes the overlooking of no-extra-parens around spread operators and super classes.
//‚úò BAD
let a = [ ...(b) ]
let b = { ...(c) }
class A extends (B) { }

//‚úî GOOD
class C extends (D,E) { } // Allow this parentheses. 
                          // `SequenceExpression` is not a `LeftHandSideExpression`, 
                          // so if the parentheses are removed then will get a syntax error.

class F extends (await G()) { } // Arrow this parentheses.

The argument of spread operators is an AssignmentExpression. So parentheses around the argument of spread operators should be always extra.
The super class of ClassDeclaration/ClassExpression is an LeftHandSideExpression. If a super class is a LeftHandSideExpression, the parentheses of the super class should be extra.

Is there anything you'd like reviewers to focus on?
I'm not familiar with no-extra-parens rule.
Is this fix correct?2I
(7f8afe627f25c87b5a9481772a322eec9153025a2017-03-09T19:34:51Z1937871:
2017-03-07T02:27:23ZLGTM: 
2017-03-07T02:27:23Z±@mysticatea, thanks for your PR! By analyzing the history of the files in this pull request, we identified @not-an-aardvark, @vitorbal and @kaicataldo to be potential reviewers.:(
2017-03-07T02:29:51ZOops, I mistook.:
2017-03-07T02:41:49ZLGTM:;
2017-03-07T02:43:14Z#This is ready to review.
Thank you.:
2017-03-07T09:49:04ZLGTMÿ
ÇáA2017-03-26T06:20:03Z"2017-03-27T21:31:23Z*What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix



Tell us about your environment

ESLint Version:
Node Version:
npm Version:

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
parserOptions:
  ecmaVersion: 6

rules:
  quotes: [error, backtick]
What did you do? Please include the actual source code causing the issue.
class Foo {
  'bar'() {}
}
What did you expect to happen?
I expected no errors to be reported, because replacing that string with a template literal would result in a syntax error.
What actually happened? Please include the actual, raw output from ESLint.
2:3  error  Strings must use backtick  quotes

What changes did you make? (Give an overview)
This commit updates the quotes rule to not report quoted class method names when the backtick option is enabled, because backticks are not allowed as non-computed class method names.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(cd9b774b4893f9dc53c1e9e9158fbb0d67e93ef52017-03-27T21:31:23Z11638619:∆
2017-03-26T06:20:04Z≠@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @nzakas, @mysticatea and @vitorbal to be potential reviewers.:
2017-03-26T06:20:04ZLGTMÃ≤»I2017-10-12T11:44:11Z"2017-10-16T18:14:26Z*Ò[X] Changes an existing rule (template)
What rule do you want to change?
no-trailing-spaces
Does this change cause the rule to produce more or fewer warnings?
More
How will the change be implemented? (New option, new default behavior, etc.)?
New default behavior
Please provide some example code that this change will affect:
// Comment with trailing space 
What does the rule currently do for this code?
By default trailing spaces in comments are ignored.
What will the rule do after it's changed?
As specified in the docs (https://eslint.org/docs/rules/no-trailing-spaces) the comments are also checked for trailing whitespace by default.
What changes did you make? (Give an overview)

Update the code to invert the check for absence of the options.ignoreComments. The variable ignoreComments will now be false if the option is absent, instead of true.
Add test for this rule, focusssing on default behavior.
Fix 3 instances of this error in lib/rules/generator-star-spacing.js to fix test errors.

Is there anything you'd like reviewers to focus on?
If my assumption is correct that the documentation described the preferred behavior.2H
(ebb530d532c028608a17df857be8aa9cc13bf4ed2017-10-16T18:14:25Z678500:
2017-10-12T11:44:12ZLGTM:´
2017-10-12T20:51:24ZíThis is a breaking change and seems like a common enough error that it could break a lot of people's linting tasks. I know we reserve the right to add this in semver-minor releases, but I'd at least like to discuss as a team and do it intentionally :)
The alternative to this would be to update the documentation for now and defer this change until our next major release (I also think it should be the default behavior).
Edit: Actually, since we have the TSC meeting today, I'm going to throw the label on and we can decide then.:¥
2017-10-12T20:54:22ZõTSC Summary:
This is a breaking change for a case that I feel like could be very common.
Question:
Do we want to include this in a semver-minor release? Or should we update the documentation to accurately reflect the current behavior and defer this change for our next major release?:æ
2017-10-12T21:13:32Z•The documentation clearly states the correct behavior, and the current implementation does not follow the documented behavior. In my opinion, this is a clear case where it's just a bugfix in a rule that results in more errors, which would be a semver-minor change according to our semver policy.
Note that this issue was introduced in when the ignoreComments option came out in v4.1.0  (which was in June). So I think the ecosystem impact won't be that bad, since it would only potentially affect code which has been modified in the last few months.:d
2017-10-13T06:25:28ZLIn today's meeting, the TSC decided to accept this as a semver-minor bugfix.:0
2017-10-16T18:14:59ZThanks for contributing!˘
1àA2017-03-26T06:59:02Z"2017-03-27T21:31:55Z*éWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix



Tell us about your environment

ESLint Version: master
Node Version: 7.7.4
npm Version: 4.1.2

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
parserOptions:
  ecmaVersion: 6
rules:
  object-shorthand: erorr
What did you do? Please include the actual source code causing the issue.
({ foo: (function() {}) });
What did you expect to happen?
I expected the code to be autofixed to
({ foo() {} });
What actually happened? Please include the actual, raw output from ESLint.
The code was autofixed to invalid syntax:
({ foo() {}) });
What changes did you make? (Give an overview)
The object-shorthand autofixer would previously produce invalid syntax when replacing a parenthesized function property with a method. This commit updates the fixer to replace the function text, excluding any closing parens that might appear after it.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(2d883d7c62b0dca01ee31e6cc3751283acb9c3302017-03-27T21:31:55Z11638619: 
2017-03-26T06:59:03Z±@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @martijndeh, @vitorbal and @mysticatea to be potential reviewers.:
2017-03-26T06:59:03ZLGTM—,Íå12016-05-30T17:28:29Z"2016-06-01T16:14:44Z*øThe new no-useless-rename rule will fail with:
TypeError: Cannot read property 'type' of undefined
    at EventEmitter.checkDestructured (/Users/evgueni.naverniouk/Git/ux/node_modules/eslint/lib/rules/no-useless-rename.js:96:26)
    at emitOne (events.js:95:20)
    at EventEmitter.emit (events.js:182:7)
    at NodeEventGenerator.enterNode (/Users/evgueni.naverniouk/Git/ux/node_modules/eslint/lib/util/node-event-generator.js:40:22)
    at CodePathAnalyzer.enterNode (/Users/evgueni.naverniouk/Git/ux/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:607:23)
    at CommentEventGenerator.enterNode (/Users/evgueni.naverniouk/Git/ux/node_modules/eslint/lib/util/comment-event-generator.js:97:23)
    at Controller.traverser.traverse.enter (/Users/evgueni.naverniouk/Git/ux/node_modules/eslint/lib/eslint.js:886:36)
    at Controller.__execute (/Users/evgueni.naverniouk/Git/ux/node_modules/eslint/node_modules/estraverse/estraverse.js:397:31)
    at Controller.traverse (/Users/evgueni.naverniouk/Git/ux/node_modules/eslint/node_modules/estraverse/estraverse.js:501:28)
    at Controller.Traverser.controller.traverse (/Users/evgueni.naverniouk/Git/ux/node_modules/eslint/lib/util/traverser.js:36:33)

When a spread operator is encountered, such as in this code:
const {...stuff} = myObject;

The issue is in the checkDestructured function which is expecting a properties[i].key to exist. But the ExperimentalSpread AST object does not have a key defined.2H
(bb69380dd1fc31d98ccc7f41483117375ce22a842016-06-01T16:14:39Z284282:Ã
2016-05-30T17:34:55Z≥Could you please provide your configuration (at least for the rule), for ease of reproduction? Thanks!
Also, for bug reports, please do consider using the issue template that we have provided. It might seem like a pain, but it makes it much easier to triage and troubleshoot bug reports on our side. Thanks!:˛
2016-05-30T17:38:18ZÂMy apologies for not following the template. The rule configuration used in my case was the default:
"no-useless-rename": [2, {
        "ignoreDestructuring": false,
        "ignoreImport": false,
        "ignoreExport": false
}]:~
2016-05-30T17:41:14ZfThank you! I agree this seems like a bug- hopefully we can get on it pretty quickly.
Ping @mysticatea?:a
2016-05-30T17:44:24ZIeslint doesn't support object spread. That is part of a stage 2 proposal.:v
2016-05-30T17:45:05Z^I should clarify that I am also using "parser": "babel-eslint" with babel-eslint version 6.0.4:K
2016-05-30T17:45:58Z3This is where the issue template comes in handy :-):€
2016-05-30T19:07:36Z¬@EvNaverniouk Can you try this with default parser? We do not maintain babel-eslint, and if the issue is coming from parser, there's nothing we can do about it.
P.S. @michaelficarra Object Rest/Spread is the only experimental feature that we support, it's controlled by experimentalObjectRestSpread switch in ecmaFeatures.:V
2016-05-30T19:22:37Z>@ilyavolodin That's strange. Why do we make such an exception?:Œ
2016-05-30T19:38:14ZµThis issue is reproducible without babel-eslint.
Command used to test: node_modules/.bin/eslint test.js
Contents of test.js:
var {...stuff} = myObject;

ESLint configuration:
{
    "parserOptions": {
        "ecmaFeatures": {
            "experimentalObjectRestSpread": true
        },
        "ecmaVersion": 6
    },
    "rules": {
        "no-useless-rename": [2, {
            "ignoreDestructuring": false,
            "ignoreImport": false,
            "ignoreExport": false
        }]
    }
}

Output:
Cannot read property 'type' of undefined
TypeError: Cannot read property 'type' of undefined
    at EventEmitter.checkDestructured (/Users/evgueni.naverniouk/Git/ux/node_modules/eslint/lib/rules/no-useless-rename.js:94:38)
    at emitOne (events.js:90:13)
    at EventEmitter.emit (events.js:182:7)
    at NodeEventGenerator.enterNode (/Users/evgueni.naverniouk/Git/ux/node_modules/eslint/lib/util/node-event-generator.js:40:22)
    at CodePathAnalyzer.enterNode (/Users/evgueni.naverniouk/Git/ux/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:607:23)
    at CommentEventGenerator.enterNode (/Users/evgueni.naverniouk/Git/ux/node_modules/eslint/lib/util/comment-event-generator.js:97:23)
    at Controller.traverser.traverse.enter (/Users/evgueni.naverniouk/Git/ux/node_modules/eslint/lib/eslint.js:886:36)
    at Controller.__execute (/Users/evgueni.naverniouk/Git/ux/node_modules/eslint/node_modules/estraverse/estraverse.js:397:31)
    at Controller.traverse (/Users/evgueni.naverniouk/Git/ux/node_modules/eslint/node_modules/estraverse/estraverse.js:501:28)
    at Controller.Traverser.controller.traverse (/Users/evgueni.naverniouk/Git/ux/node_modules/eslint/lib/util/traverser.js:36:33):ˆ
2016-05-30T20:07:19Z›@ilyavolodin @michaelficarra Now that we have a reproduction without babel-eslint, I think we need to accept this issue, unless I'm missing something. For what it's worth, I'm üëç to avoiding rule crashes where possible.:Ó
2016-05-30T20:49:47Z’@platinumazure Agree. Seems like a valid bug, rules shouldn't just crash.
@michaelficarra Mostly due to two reasons. This was number one requested new feature, and we were getting a lot of requests for it. And we were also getting a lot of false-positives from babel-eslint users, because they couldn't switch to Espree due to the lack of objectRestSpread, which is suggested by a lot of React examples/tutorials out there. We felt like in this case user experience mattered more then purity. It's marked as experimental and we don't have any rules targeting objectRestSpread. Just parser support.:(
2016-05-30T20:51:50ZWorking on this.ﬁ‘82016-09-26T21:08:02Z"2016-10-07T12:13:08Z*ˆWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[] Bug fix (template)
[ ] New rule (template)
[X] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

What rule do you want to change?
semi
Does this change cause the rule to produce more or fewer warnings?
more (with "never")
How will the change be implemented? (New option, new default behavior, etc.)?
Change to behavior of "never" option
Please provide some example code that this change will affect:
a;
++b;
What does the rule currently do for this code?
Give only one error.
What will the rule do after it's changed?
Give two errors.

Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
 I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
Is there anything you'd like reviewers to focus on?2H
(14183848a1551710dd4a4dc602c5ba10adba502e2016-10-07T12:13:07Z139208:
2016-09-26T21:08:03ZLGTM:√
2016-09-26T21:08:04Z™@adrianheine, thanks for your PR! By analyzing the annotation information on this pull request, we identified @mysticatea, @nzakas and @vitorbal to be potential reviewers:≈
2016-09-26T21:11:43Z¨Does this change cause the rule to produce more or fewer warnings?
fewer (with "never")

(snip)

What does the rule currently do for this code?
Give only one error.
What will the rule do after it's changed?
Give two errors.

Those sections of the PR template conflict with each other. Please clarify.::
2016-09-26T21:16:28Z"Sorry, it's obviously more errors.:Î
2016-09-26T21:53:15Z“We should verify that the semicolon there doesn't change semantics at all. I think it's fine in this case due to ASI:
// this increments bar
foo
++bar

// this increments foo
foo++
bar

// this increments bar
foo
++
bar
However, could you add a test for this case? It should not report any errors.
/* eslint semi: [2, "always"] */
++
foo;:
2016-09-26T22:18:12ZLGTM:F
2016-09-26T22:18:45Z.@not-an-aardvark Added the test you requested.:
2016-09-30T13:37:51ZLGTM:
2016-10-02T11:16:58ZLGTM:p
2016-10-05T00:10:44ZXI changed label to bug since I think this is the bug to overlook unnecessary semicolons.‹-Õ(2016-02-09T19:32:55Z"2016-03-22T16:39:11Z*∑I use the Allman style of braces, so I have this setting in my .eslintrc.yaml file:
brace-style:
    - 1
    - allman
    - allowSingleLine: true

If I have this setting, brace style checking is entirely deactivated!
If I replace allman with stroustrup, it works, reporting lines with Allman style and not those in Stroustrup style, even on one line.
If I remove the last line, it works, but it complains on single line braces.
Sometime, eg. when making small objects like { id: 'foo' }, I want to use the single line style.
Is it forbidden for the Allman style? Why?2H
(167a03a8bb33575b161e702ae2a24bef09e5a08d2016-03-12T23:05:23Z126780:˙
2016-02-09T19:32:55Z·@PhiLhoSoft Thanks for the issue! If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead

Requesting a new rule? Please see Proposing a New Rule for instructions.:∂
2016-02-09T20:04:17Zù@PhiLhoSoft Thanks for the report. Could you provide information requested by @eslintbot please? Especially a few short code examples and output from ESLint.:ø
2016-02-09T22:21:06Z¶Yes, I was thinking about this while coming here for updates...
A test case should be easy to set up.
I will come back with one soon...
Thanks for the quick response.:À
2016-02-10T14:11:09Z≤OK, I made a fairly complete testbench... üòÑ
TestESLint.zip
> eslint -v
v1.10.3

I wrote the config files both in Json and in Yaml format, because I was unsure of the Yaml format, so I wanted to check if results with both formats are the same. That's the case.
These tests shown the real issue with the Allman style check: if allowSingleLine is true, it almost accepts anything!
It only complains on a } else { construct...
I think that if aLS is true in Allman style, it should do an additional check: if the opening brace is on the same line than the controlling statement, then the closing brace must be on the same line too. Otherwise, complain!
Also, I was expecting these rules to be applies to objects and array literals, but that's not the case.
I will check if there are separate rules for them, otherwise I will open a new issue...
At least; I suggest to add to the documentation of brace-style that it is not used on object literals.:¶
2016-02-10T20:41:09Zç@PhiLhoSoft can you paste a simple repro-case directly into the issue? A lot of us respond to issues from phone or tablet, so downloading a file means we can't respond until at a computer. If you can put the information directly into a comment, then we can move faster.:€
2016-02-11T12:58:40Z¬The essence of my tests is: the setting works in all cases, except on Allman with allowSingleLine, because it doesn't check that braces are aligned (on the same line) in a single line case.
Rule:
rules:
  brace-style:
    - 1
    - allman
    - allowSingleLine: true

(or "brace-style": [ 1, "allman", { "allowSingleLine": true } ])
Test file:
function foo(param)
{
    var result;
    if (param)
    {
        result = { x: 1, y: 2, for: bar() };
    }
    else
    {
        result =
        {
            horizontal: true,
            vertical: 'maybe',
            for: bar()
        };
    }
    return {
        type: 'foo',
        payload: result
    };
}

// Single line, on line 25

function bar() { return 'bar'; }

// Bad styles, OK / expected after line 25...

function bad(b) { // Should complain
    var result;
    if (b){ // Should complain
        result = {};
    }
    else { // Should complain
        result = [];
    }
    return result;
}:Ë
2016-02-11T19:12:08ZœProposed fix: in checkBlock(), replace
                if (style !== "allman" && previousToken.loc.start.line !== curlyToken.loc.start.line) {
                    context.report(node, OPEN_MESSAGE);
                } else if (style === "allman" && previousToken.loc.start.line === curlyToken.loc.start.line && !params.allowSingleLine) {
                    context.report(node, OPEN_MESSAGE_ALLMAN);
                }

with
                if (style !== "allman" && previousToken.loc.start.line !== curlyToken.loc.start.line) {
                    context.report(node, OPEN_MESSAGE);
                } else if (style === "allman" && previousToken.loc.start.line === curlyToken.loc.start.line) {
                    if (params.allowSingleLine) {
                        if (curlyTokenEnd.loc.start.line !== curlyToken.loc.start.line) {
                            context.report(node, OPEN_MESSAGE_ALLMAN);
                        }
                    } else {
                        context.report(node, OPEN_MESSAGE_ALLMAN);
                    }
                }

I will try and make a proper PR...:˛
2016-03-06T21:05:24ZÂI can confirm this fix works. Here is a complete set of tests. All but the first should generate an error:
/* eslint brace-style: [2, "allman", { "allowSingleLine": true }] */

function foo() { console.log("foo"); }

function bar() {
    doSomething();
}

if (foo) {
    console.log("bar");
}

if (foo)
{
    doSomething();
}
else {
    doSomethingElse();
}:R
2016-03-07T16:45:36Z:@PhiLhoSoft @aparajita can one of you open a pull request?:˛
2016-03-07T17:40:47ZÂYes, I try to work on it, on my scarce free time... üòÑ But if @aparajita is faster than me, I won't mind at all! üòâ
Note: the test cases should be a bit more comprehensive. That's the necessary, time-consuming point, I think.:Ü
2016-03-12T11:22:04Zn@PhiLhoSoft, @aparajita - I took this on since there wasn't much activity. Sorry if I stepped on your toes! :):)
2016-03-12T17:18:54Z@BYK Be my guest!:c
2016-03-13T19:03:44ZKNo problem, I appreciate the push! Hadn't time to do it anyway.
And thanks!î
◊»:2016-10-31T20:23:12Z"2016-11-03T20:12:39Z*äWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (template)
See #7493


What changes did you make? (Give an overview)
brace-style currently checks whether the closing } in a BlockStatement is on the same line as the rest of the block. However, it was checking the position of the } against the start position of the last statement in the block, which caused false negatives like #7493. It should check against the end position of the last statement of the block instead.
Is there anything you'd like reviewers to focus on?
This is a semver-minor change according to our semver policy, because it fixes a false negative.2J
(af1fde1867384e71c641592552f3967761836a452016-11-03T20:12:39Z11638619:»
2016-10-31T20:23:14ZØ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @gyandeeps and @iancmyers to be potential reviewers.:
2016-10-31T20:23:14ZLGTM:ù
2016-10-31T21:18:44ZÑJust a heads up: we have moved to a new CLA checker on pull requests. Even if you've previously signed our CLA, we will need to you sign the new one. To do so, look at the status checks for licence/cla and click the "Details" link. Sorry for the inconvenience.ﬁo‡72016-09-13T07:10:27Z"2016-09-18T02:06:51Z*∑Currently, eol-last always reports linting issues in column 1.
Earlier today, @kaicataldo and I had a discussion about this and thought that semantically, it would make more sense to report issues at: last line, last column (as opposed to: last line, first column), since the last EOL in a file is also the last character of a line.
One might argue that the last EOL is a newline, so we could theoretically also report the issue in column 0, but in line lines + 1. For users, the latter approach might be unexpected and have bad editor integration.
What do you think?2I
(6148d850784db90988a0bdf8a2fcbdcb21b3eef32016-09-18T02:06:46Z4442505:◊
2016-09-13T10:49:55ZæI think lines + 1 could create unexpected behavior as you mentioned, so "last line, last column" sounds good to me.
Not sure if this should be considered an enhancement or a bug fix, though.:è
2016-09-13T14:35:16Zwüëç for last line, last column. My vote is bug fix, because report count won't change and reports are currently wrong.::
2016-09-13T16:24:48Z"@platinumazure good point, agreed!ö±‹I2017-10-14T05:16:38Z"2017-10-17T21:59:11Z*¶What is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix (template)
What did you do? Please include the actual source code causing the issue.
To update the node in the report so that the error underlines in code editor linter is more accurate.
The node type in the report had to be updated as well.
What did you expect to happen?
For example, from the issue - with this fix, the linter looks like so2I
(eb8cfb1cc738753a1e8175926f5ea240fcf51b072017-10-17T21:59:10Z3211873:;
2017-10-14T05:16:39Z#All committers have signed the CLA.:
2017-10-14T05:16:40ZLGTM:
2017-10-14T05:24:44ZLGTM:
2017-10-14T05:24:59ZLGTM:
2017-10-14T05:45:46ZLGTM:∑
2017-10-14T17:46:26ZûBy the way, if you need to restart the PR checks, you can also close and reopen the pull request rather than pushing commits. Also, team members should be able to access Travis and AppVeyor and restart the builds there (well, I'm not sure about AppVeyor). Hope this helps in future üòÑ:¶
2017-10-14T22:38:52ZçThanks for the labels. I'll try to remember that for next time.
I'm going to keep this open for a few days and address comments in that time.:„
2017-10-16T07:18:46Z Thanks for the PR!

I'm going to keep this open for a few days and address comments in that time

To clarify, should we wait on merging this until you address some comments?
(Generally, if you want to indicate that something shouldn't be merged, it's good to add the "do not merge" label so that it doesn't get merged by mistake.):t
2017-10-17T19:35:40Z\Ah all I meant was to keep it open and see if anyone had thoughts on it. I'll merge it today˘–ïB2017-04-17T11:19:03Z"2017-04-20T23:35:00Z*µ
Tell us about your environment

ESLint Version:
v3.19.0
Node Version:
v6.10.1
npm Version:
3.10.10
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:


{
    "env": {
        "browser": true,
        "es6": true
    },
    "extends": "eslint:recommended",
    "rules": {
        "indent": [
            "error",
            "tab"
        ],
        "linebreak-style": [
            "error",
            "unix"
        ],
        "quotes": [
            "error",
            "double"
        ],
        "semi": [
            "error",
            "never"
        ],
        "no-console": [
            "off"
        ]
    }
}

What did you do? Please include the actual source code causing the issue.

var g = 1

[g].forEach(_ => _)

g = 2

`g`

var i = 3

/g/i.test("G") && console.log(g)
What did you expect to happen?
Three errors are detected as no-unexpected-multiline

Before g = 2
Before `g`
Before /g/i.test("G") && console.log(g)

What actually happened? Please include the actual, raw output from ESLint.
Only two errors were detected.
  3:1  error  Unexpected newline between object and [ of property access    no-unexpected-multiline
  5:5  error  Unexpected newline between template tag and template literal  no-unexpected-multiline

‚úñ 2 problems (2 errors, 0 warnings)2J
(ac39e3b034c3ac82530bde9a4175b71f1359f0f62017-04-20T23:34:59Z11638619:J
2017-04-18T21:04:36Z2This looks like a bug to me. Thanks for reporting.:Ù
2017-04-18T21:25:31Z€I'm not sure about the best way to detect this pattern. For the most part, I think this is only a problem when the code that looks like a regular expression has flags (since a syntax error will occur if it doesn't have flags). There are a few esoteric cases where that's not true:
// This is a division operation
var x = a
/maybeRegex/
c;

// Maybe the user intended the middle line to be a bare regex literal?
// Seems like this expectation would be very uncommon
There are a few options that I can think of:


Disallow all division where the division operator is on a new line
This could cause some false positives:
// this should probably be valid
var fraction = numerator
  / denominator;


Disallow division where the division operator is on a new line, and the parent is also a division operator on the same line. This could also cause a few false positives:
var fractionOver2 = numerator
  / denominator / 2;


Disallow division where the division operator is on a new line, and the parent is also a division operator on the same line, and the right-hand side of the parent only contains valid flags, and there is no space between the second division operator and the "flags". In theory this could cause false negatives if the user was trying to create a regex and made a typo in the flags, but this is probably a very rare case. It could also cause false negatives if the user was trying to create a regex but accidentally put space before the flags, but this is also probably quite rare.


Right now I'm leaning toward option 3, since it seems like it would catch a majority of errors without a lot of false positives.ª?ãC2017-05-13T21:14:07Z"2017-05-17T07:20:10Z*ÓWhat is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix (template)
Fixes #8481.
What changes did you make? (Give an overview)
This PR improves indentation when {flatTernaryExpressions: true}. See also #8481.
Is there anything you'd like reviewers to focus on?
Please check whether the usage of offsets.increaseOffset method is correct or not.2I
(3418479a910237b37ddd8b59ac6812e2af0237592017-05-17T07:20:09Z1937871:
2017-05-13T21:14:07ZLGTM:
2017-05-13T22:06:17ZLGTM:
2017-05-14T03:36:33ZLGTM:ü
2017-05-14T03:53:18ZÜThis is possibly a breaking change.
Now flatTernaryExpressions option makes ternary expressions flat only if node.test and node.consequent are on the same line. Because I think the purpose of this style is that I write the pair of a condition and the condition's value on the same line then align several such pairs on the same indent level.
As the result the following cases are correct:
var foo =
    d >= 10 ? 10 :
    d >= 5 ? 5 :
    d >= 2 ? 2 :
    d >= 1 ? 1 : 0;

var foo =
    bar
        ? baz
        : qiz;

foo(
    d >= 10 ? 10 :
    d >= 5 ? 5 :
    d >= 2 ? 2 :
    d >= 1 ? 1 : 0
);

foo(
    bar
        ? baz
        : qiz;
);:ó
2017-05-15T15:52:35Z@mysticatea If this is a breaking change now, should we retitle the PR to say "Breaking:" and should we add a "breaking" label?:µ
2017-05-16T09:59:30ZúI'm changing the message label to Update: because I thought this is "A bug fix in a rule that results in ESLint reporting more errors" of our semver policy.©
ÜíB2017-04-15T22:08:01Z"2017-05-05T05:18:58Z*πWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (see #8438)
What changes did you make? (Give an overview)
This updates the indent rule to ensure that from tokens are indented in import a from 'b' statements.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(cf940c6c8f51c0ab8da326633420901df81580072017-05-05T05:18:57Z11638619:
2017-04-15T22:08:02ZLGTM:¥
2017-04-15T22:36:28ZõThanks this fixes the issue.
I noticed an inconsistency between how import and export statements are supposed to be indented.
For example
Valid import indentation:
import {                                                                        
  Foo                                                                         
} from 'foo'; 
Invalid export indentation:
export {
  Foo
} from 'foo';
We should allow the same pattern for both statements. Should I open a new issue? I have tested other patterns and they seem to behave the same.:;
2017-04-15T22:39:17Z#Good catch. I'll fix it on this PR.:
2017-04-24T03:17:03ZLGTM:
2017-04-24T03:17:49ZLGTM:
2017-04-24T19:00:36ZLGTM:`
2017-05-05T05:16:11ZHping @platinumazure -- have your comments been addressed satisfactorily?:
2017-05-05T05:24:36ZThanks!ì†⁄82016-09-27T12:54:36Z"2016-09-30T20:08:08Z*ïWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7250 for template.
Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
I had changed the after-used option's behavior in #7143 in order to fix the false negative that the rule overlooks unused variables if the last parameter is ignored by argsIgnorePattern.
Now, the rule has false positive that it warns the last non-ignored parameter even if the last (ignored) parameter is used.
This PR fixes the false positive.
semver-patch: A bug fix in a rule that results in ESLint reporting fewer errors.
Is there anything you'd like reviewers to focus on?

Is this fix needed?2I
(dffb4fa11082aaefe403e56dfa2e47c7500ed3842016-09-30T20:08:07Z1937871:
2016-09-27T12:54:38ZLGTM:¿
2016-09-27T12:54:38Zß@mysticatea, thanks for your PR! By analyzing the annotation information on this pull request, we identified @vitorbal, @wavebeem and @nzakas to be potential reviewers:ö
2016-09-27T15:24:16ZÅI'm üëç for this fix- the intent of argsIgnorePattern (as I see it) is to suppress warnings for commonly ignored variables when they are unused. But if the variable is used, it should still get credit as being used.
Thanks for writing this up, @mysticatea!¯[øL2017-12-29T16:57:18Z"2017-12-30T09:49:03Z*äWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:



What changes did you make? (Give an overview)
fixes #9774.
It showed Allowed unused vars must match {varsIgnorePattern}. for an unused argument without argsIgnorePattern specified.
Is there anything you'd like reviewers to focus on?2I
(4c87f428bc501e087ab4882dae9b4fd2bc22041d2017-12-30T09:49:01Z2476461:Ô
2017-12-29T17:26:14Z÷One of the former is https://github.com/eslint/eslint/blob/master/tests/lib/rules/no-unused-vars.js#L160 and one of the latter is https://github.com/eslint/eslint/blob/master/tests/lib/rules/no-unused-vars.js#L342.:=
2017-12-29T17:30:49Z%Thank you! I'll go ahead and approve.:<
2017-12-30T09:49:19Z$thanks for contributing! O(‚à©_‚à©)Oì
◊≈:2016-10-31T10:01:42Z"2016-11-03T20:12:42Z*æTell us about your environment

ESLint Version: 3.9.0 (also tested on 3.8.0 with same results)
Node Version: 7.0.0
npm Version: 3.10.9

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:
'use strict'

module.exports = {
  rules: {
    curly: 1,
    'brace-style': [1, '1tbs'],
  }
}
What did you do? Please include the actual source code causing the issue.

if (setTimeout) {
  setTimeout(() => true, 1)
  .unref() }
What did you expect to happen?
I would have expected the closing brace to cause a violation of the brace-style rule - closing brace should be placed on the next line after the block body. This is the actual behaviour if I place the .unref() together with the setTimeout() onto the same line:
if (setTimeout) {
  // Warning: Closing curly brace should be on the same line as opening curly brace
  // or on the line after the previous block
  setTimeout(() => true, 1).unref() }
I believe this to be a bug.
What actually happened? Please include the actual, raw output from ESLint.
No warning emitted for malformed code.2J
(af1fde1867384e71c641592552f3967761836a452016-11-03T20:12:39Z11638619:R
2016-10-31T19:45:25Z:Thanks for the report. I was able to reproduce this issue.¶«ë02016-05-14T04:34:15Z"2016-05-14T17:06:05Z*¶What version of ESLint are you using?
2.10.0
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
``` yml`
rules:
no-extra-parens:
- error
- all
- returnAssign: false

**What did you do? Please include the actual source code causing the issue.**

Ran `eslint` on this test file:

``` js
function ohno () {
  return;
}

What did you expect to happen?
For eslint to exit without error.
What actually happened? Please include the actual, raw output from ESLint.
An error was thrown.

Cannot read property 'type' of null
TypeError: Cannot read property 'type' of null
at containsAssignment (/opt/code/eslint-test2/node_modules/eslint/lib/rules/no-extra-parens.js:146:21)
at isReturnAssignException (/opt/code/eslint-test2/node_modules/eslint/lib/rules/no-extra-parens.js:171:24)
at EventEmitter.ReturnStatement (/opt/code/eslint-test2/node_modules/eslint/lib/rules/no-extra-parens.js:589:21)
at emitOne (events.js:96:13)
at EventEmitter.emit (events.js:188:7)
at NodeEventGenerator.enterNode (/opt/code/eslint-test2/node_modules/eslint/lib/util/node-event-generator.js:40:22)
at CodePathAnalyzer.enterNode (/opt/code/eslint-test2/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:607:23)
at CommentEventGenerator.enterNode (/opt/code/eslint-test2/node_modules/eslint/lib/util/comment-event-generator.js:97:23)
at Controller.traverser.traverse.enter (/opt/code/eslint-test2/node_modules/eslint/lib/eslint.js:886:36)
at Controller.__execute (/opt/code/eslint-test2/node_modules/estraverse/estraverse.js:397:31)
npm ERR! Test failed.  See above for more details.

Note:
It no longer throws an error after setting the returnAssign option to true.2I
(f9ca0d684a8dbebf43d9bc65219188fd26a7f09b2016-05-14T17:06:02Z5554486˜†“82016-09-26T19:02:55Z"2016-09-30T20:08:11Z*‡Tell us about your environment

ESLint Version: v3.6.0
Node Version: v6.6.0
npm Version: 3.10.7

What parser (default, Babel-ESLint, etc.) are you using? deafult
Please show your full configuration: https://github.com/moodle/moodle/blob/master/.eslintrc
What did you do? Please include the actual source code causing the issue.
When attempting to upgrade to eslint 3.6.0, we got some new errors reported by no-unused-vars which should have been ignored by args: 'after-used'. It turned out that argsIgnorePattern is now affecting the result of things which should be ignored by "args": "after-used"
I attempted to isolate the code down to the smallest test case:
Problem file:
/* eslint 'no-unused-vars': ['error', {"args": "after-used", "argsIgnorePattern": "^baz$"}] */

(function(foo, bar, baz) {
        return baz;
})();
Output:
$ eslint problem.js 

/Users/danp/www/eslintest/problem.js
  3:16  error  'bar' is defined but never used  no-unused-vars

‚úñ 1 problem (1 error, 0 warnings)
Ok file:
/* eslint 'no-unused-vars': ['error', {"args": "after-used"}] */

(function(foo, bar, baz) {
        return baz;
})();2I
(dffb4fa11082aaefe403e56dfa2e47c7500ed3842016-09-30T20:08:07Z1937871:y
2016-09-26T19:19:44Za(Note: this was detected because we have our argsIgnorePattern too liberally matching by mistake):é
2016-09-26T23:13:57ZıThis was probably caused by #7143.
I think the issue is that we now check for the last non-ignored parameter (in your case, bar) rather than the last parameter itself (baz). However, we don't account for cases where an ignored parameter is used.:Ñ
2016-09-26T23:28:37ZlConfirmed in the online demo. I think this is something we should consider for a patch release, if possible.:ç
2016-09-27T02:12:35ZÙThank you for this issue.
Though I'd like to say this is intentional since baz is ignored, we should fix this issue to prevent a breaking change without major version up.
I will work on this within today (JST).
By the way, I'm interested in the option which warns such access to ignored variables. Maybe disallowUseIgnored. Or a separated rule such as no-use-ignored-vars.:Ò
2016-09-27T10:12:41ZÿThanks! As mentioned above - in our case it was caused by a misconfiguration of argsIgnorePattern which matched a lot of args, so I am not sure how much you should be concerned about this being a problem in practice.ë
<—82016-09-26T14:28:07Z"2016-09-30T20:05:49Z*˚Tell us about your environment

ESLint Version: 3.6.0
Node Version: 6.3.0
npm Version: 3.10.6

What parser (default, Babel-ESLint, etc.) are you using?
gulp-eslint@3.0.1 and default
Please show your full configuration:
Affected rule:
...
"indent": [2, 2, {
  "FunctionDeclaration": {"body": 1, "parameters": 2}
}],
...

What did you do? Please include the actual source code causing the issue.
Cannot publish the original source, but some file having nested functions like:
function a(param1, param2,
    param3) {
  var var1, var2, var3;

  function internal(paramA, paramB,
      paramC) {
    var varA, varB, varC;

    ...
  }
}

Run ./node_modules/.bin/eslint app/ -c .eslintrc
What did you expect to happen?
No errors in the console.
What actually happened? Please include the actual, raw output from ESLint.
error Expected indentation of 4 spaces but found 6 indent at line of paramC.2J
(332d21383d58fa75bd8d192fe03453f9bcbfe0952016-09-30T20:05:45Z11638619:É
2016-09-27T08:18:31ZkI can reproduce this issue. I'll investigate it sometime tomorrow if no one else gets around to it by then.:ç
2016-09-27T12:20:42ZuThank you for this issue.
I confirmed it on our online demo.
It seems to expect always 4 indentation for some reason.õΩãB2017-04-13T23:52:24Z"2017-04-15T16:21:04Z*¥What is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix (template)
Fixes #8442.
What changes did you make? (Give an overview)
The rule should warn the variables which are in destructuring even if those exist in non-last parameters because those can always be removed.
This is semver-minor matter since a bug fix which increases warnings.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2I
(9f540fd284dc45c48e5bc0792be34c08b7a418852017-04-15T16:21:03Z1937871:
2017-04-13T23:52:26ZLGTM:∆
2017-04-13T23:52:27Z≠@mysticatea, thanks for your PR! By analyzing the history of the files in this pull request, we identified @not-an-aardvark, @vitorbal and @nzakas to be potential reviewers.˚âíA2017-03-26T22:55:30Z"2017-03-27T19:08:35Z*í	What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 7.7.4
npm Version: 4.1.2

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  no-else-return: error
What did you do? Please include the actual source code causing the issue.
while (foo)
  if (bar)
    return;
  else
    baz();
What did you expect to happen?
I expected no error to be reported.
What actually happened? Please include the actual, raw output from ESLint.
The rule reported an error and recommended fixing the code to
while (foo)
  if (bar)
    return;
  baz();
However, this code doesn't work the same way, because baz() is no longer in the while loop.



What changes did you make? (Give an overview)
Fixing errors from no-else-return requires splitting a single statement into two statements. This means that there is no reasonable fix for the errors when the if statement is in a position where only a single statement is allowed, so the rule should not report this case.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(d064ba2ebd51365a18b9336f86b77a3c1c5caff12017-03-27T19:08:34Z11638619:«
2017-03-26T22:55:31ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @xdumaine and @iancmyers to be potential reviewers.:
2017-03-26T22:55:32ZLGTM∫RìA2017-03-26T23:18:52Z"2017-03-28T16:01:52Z*±	What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 7.7.4
npm Version: 4.1.2

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
parserOptions:
  ecmaVersion: 6
rules:
  no-extra-parens: error
What did you do? Please include the actual source code causing the issue.
() => ({ foo: 1 }).foo;
What did you expect to happen?
I expected no error to be reported.
What actually happened? Please include the actual, raw output from ESLint.
An error was reported. The rule suggested fixing the code to
() => { foo: 1 }.foo
which is invalid syntax.
What changes did you make? (Give an overview)
Previously, the no-extra-parens rule correctly did not report an error when an arrow function returned a parenthesized object expression. However, it would still report an error if an arrow function had a parenthesized object curly as its first token. This commit updates the rule to not report a paren between an arrow token and an opening curly token.
Is there anything you'd like reviewers to focus on?
I'm wondering if there's a better way to check for this case.2J
(41b97862f7d4ac3f23f6738417a643e103d874522017-03-28T16:01:51Z11638619: 
2017-03-26T23:18:52Z±@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @kaicataldo and @mysticatea to be potential reviewers.:
2017-03-26T23:18:53ZLGTM:
2017-03-27T21:56:23ZLGTMÖ6©@2017-03-12T01:45:36Z"2017-04-03T23:11:39Z*úWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#6362)
What changes did you make? (Give an overview)
This fixes the bug described in #6362. A reference to a scoped plugin in a config file now needs to include the scope in order to find the plugin.
Is there anything you'd like reviewers to focus on?
Not really -- the existing comment in the code described the fix very well üòÑ2J
(2fa75021d878070044734b5910ea67458e1fa8dd2017-04-03T23:11:39Z11638619:»
2017-03-12T01:45:37ZØ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @nzakas, @mysticatea and @kaicataldo to be potential reviewers.:
2017-03-12T01:45:37ZLGTMÏ–õB2017-04-18T22:06:20Z"2017-04-20T23:35:00Z*ÊWhat is the purpose of this pull request?
Bug fix (#8469)



What changes did you make? (Give an overview)
Previously, the no-unexpected-multiline docs mentioned that the division operator could prevent semicolon insertion, but it did not report an error for cases where this happens. This commit updates the rule to report an error when a multiline division operation looks like it was intended to be a regular expression with flags.
Fixes #8469
Is there anything you'd like reviewers to focus on?
Do you have any suggestions for improving the method used to detect "confusing" division?
Also see: #8469 (comment)2J
(ac39e3b034c3ac82530bde9a4175b71f1359f0f62017-04-20T23:34:59Z11638619:∆
2017-04-18T22:06:22Z≠@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @glenjamin, @vitorbal and @alberto to be potential reviewers.:
2017-04-18T22:06:22ZLGTM:
2017-04-18T22:24:13ZLGTMÚÜÿ92016-10-17T07:56:36Z"2016-10-17T21:18:20Z*ÑWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7383


What changes did you make? (Give an overview)
This updates no-useless-escape to not report escaped characters in tagged template literals, because the backslash is visible to the tag function.
Useless escapes in non-tagged template literals are still reported as errors.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(75250423ebd7dc0d263c1deb20333f88a35b6ddb2016-10-17T21:18:20Z11638619:Ã
2016-10-17T07:56:37Z≥@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @kaicataldo, @onurtemizkan and @vitorbal to be potential reviewers.:
2016-10-17T07:56:37ZLGTMÌ∫ˇÚG2017-09-02T03:12:48Z"2017-09-03T22:55:38Z*πîTell us about your environment

ESLint Version: 4.6.0
Node Version: 8.3.0
npm Version: 5.3.0

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:

Configuration

{
  "root": true,
  "env": {
    "browser": true,
    "node": true,
    "commonjs": true,
    "shared-node-browser": true,
    "es6": true,
    "worker": true,
    "amd": false,
    "mocha": false,
    "jasmine": false,
    "jest": false,
    "phantomjs": false,
    "protractor": false,
    "qunit": false,
    "jquery": false,
    "prototypejs": false,
    "shelljs": false,
    "meteor": false,
    "mongo": false,
    "applescript": false,
    "nashorn": false,
    "serviceworker": false,
    "atomtest": false,
    "embertest": false,
    "webextensions": false,
    "greasemonkey": false
  },
  "rules": {
    "for-direction": "error",
    "no-await-in-loop": "warn",
    "no-compare-neg-zero": "error",
    "no-cond-assign": [
      "error",
      "always"
    ],
    "no-console": "warn",
    "no-constant-condition": [
      "error",
      {
        "checkLoops": false
      }
    ],
    "no-control-regex": "error",
    "no-debugger": "error",
    "no-dupe-args": "error",
    "no-dupe-keys": "error",
    "no-duplicate-case": "error",
    "no-empty-character-class": "error",
    "no-empty": "error",
    "no-ex-assign": "error",
    "no-extra-boolean-cast": "error",
    "no-extra-parens": [
      "error",
      "functions"
    ],
    "no-extra-semi": "error",
    "no-func-assign": "error",
    "no-inner-declarations": [
      "error",
      "both"
    ],
    "no-invalid-regexp": "error",
    "no-irregular-whitespace": "error",
    "no-obj-calls": "error",
    "no-prototype-builtins": "error",
    "no-regex-spaces": "error",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "off",
    "no-unexpected-multiline": "error",
    "no-unreachable": "error",
    "no-unsafe-finally": "error",
    "no-unsafe-negation": "error",
    "use-isnan": "error",
    "valid-jsdoc": [
      "error",
      {
        "prefer": {
          "arg": "param",
          "argument": "param",
          "class": "constructor",
          "return": "returns"
        },
        "requireReturn": false,
        "requireReturnType": true,
        "matchDescription": ".+",
        "requireParamDescription": true,
        "requireReturnDescription": true
      }
    ],
    "valid-typeof": [
      "error",
      {
        "requireStringLiterals": true
      }
    ],
    "accessor-pairs": [
      "error",
      {
        "setWithoutGet": true,
        "getWithoutSet": false
      }
    ],
    "array-callback-return": "error",
    "block-scoped-var": "error",
    "class-methods-use-this": "error",
    "complexity": "off",
    "consistent-return": "off",
    "curly": "error",
    "default-case": "error",
    "dot-location": [
      "error",
      "property"
    ],
    "dot-notation": "off",
    "eqeqeq": [
      "error",
      "always"
    ],
    "guard-for-in": "error",
    "no-alert": "error",
    "no-caller": "error",
    "no-case-declarations": "error",
    "no-div-regex": "error",
    "no-else-return": "error",
    "no-empty-function": "error",
    "no-empty-pattern": "error",
    "no-eq-null": "error",
    "no-eval": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-label": "error",
    "no-fallthrough": "error",
    "no-floating-decimal": "error",
    "no-global-assign": "error",
    "no-implicit-coercion": "off",
    "no-implicit-globals": "off",
    "no-implied-eval": "error",
    "no-invalid-this": "error",
    "no-iterator": "error",
    "no-labels": [
      "error",
      {
        "allowLoop": false,
        "allowSwitch": false
      }
    ],
    "no-lone-blocks": "error",
    "no-loop-func": "error",
    "no-magic-numbers": [
      "off",
      {
        "ignoreArrayIndexes": true,
        "enforceConst": false,
        "detectObjects": false
      }
    ],
    "no-multi-spaces": [
      "error",
      {
        "ignoreEOLComments": true
      }
    ],
    "no-multi-str": "error",
    "no-new-func": "error",
    "no-new-wrappers": "error",
    "no-new": "error",
    "no-octal-escape": "error",
    "no-octal": "error",
    "no-param-reassign": "off",
    "no-proto": "error",
    "no-redeclare": [
      "error",
      {
        "builtinGlobals": true
      }
    ],
    "no-restricted-properties": "off",
    "no-return-assign": [
      "error",
      "always"
    ],
    "no-return-await": "error",
    "no-script-url": "error",
    "no-self-assign": [
      "error",
      {
        "props": true
      }
    ],
    "no-self-compare": "off",
    "no-sequences": "error",
    "no-throw-literal": "error",
    "no-unmodified-loop-condition": "off",
    "no-unused-expressions": [
      "error",
      {
        "allowShortCircuit": false,
        "allowTernary": false
      }
    ],
    "no-unused-labels": "error",
    "no-useless-call": "error",
    "no-useless-concat": "error",
    "no-useless-escape": "error",
    "no-useless-return": "error",
    "no-void": "off",
    "no-warning-comments": [
      "warn",
      {
        "terms": [
          "todo",
          "warning",
          "fixme",
          "hack",
          "optimize",
          "xxx"
        ],
        "location": "start"
      }
    ],
    "no-with": "error",
    "radix": [
      "error",
      "always"
    ],
    "require-await": "error",
    "vars-on-top": "error",
    "wrap-iife": [
      "error",
      "inside"
    ],
    "yoda": [
      "error",
      "never",
      {
        "exceptRange": true
      }
    ],
    "strict": [
      "error",
      "global"
    ],
    "init-declarations": "off",
    "no-catch-shadow": "error",
    "no-delete-var": "error",
    "no-label-var": "error",
    "no-restricted-globals": [
      "error",
      "event",
      "fdescribe"
    ],
    "no-shadow-restricted-names": "error",
    "no-shadow": "off",
    "no-undef-init": "error",
    "no-undef": "error",
    "no-undefined": "error",
    "no-unused-vars": [
      "error",
      {
        "vars": "all",
        "args": "after-used",
        "caughtErrors": "all"
      }
    ],
    "no-use-before-define": [
      "error",
      {
        "functions": false,
        "classes": true
      }
    ],
    "callback-return": [
      "warn",
      [
        "callback",
        "clbk",
        "cb",
        "done",
        "next"
      ]
    ],
    "global-require": "off",
    "handle-callback-err": [
      "error",
      "^(err|error)$"
    ],
    "no-buffer-constructor": "warn",
    "no-mixed-requires": [
      "error",
      {
        "grouping": false,
        "allowCall": true
      }
    ],
    "no-new-require": "error",
    "no-path-concat": "error",
    "no-process-env": "error",
    "no-process-exit": "warn",
    "no-restricted-modules": [
      "error",
      {
        "paths": [
          "underscore",
          "lodash",
          "async"
        ],
        "patterns": [
          "lodash*",
          "async/*"
        ]
      }
    ],
    "no-sync": "warn",
    "array-bracket-newline": [
      "off",
      {
        "multiline": true,
        "minItems": null
      }
    ],
    "array-bracket-spacing": [
      "off",
      "always",
      {
        "singleValue": true,
        "objectsInArrays": false,
        "arraysInArrays": false
      }
    ],
    "array-element-newline": [
      "off",
      {
        "multiline": true,
        "minItems": null
      }
    ],
    "block-spacing": [
      "error",
      "always"
    ],
    "brace-style": [
      "off",
      "1tbs",
      {
        "allowSingleLine": false
      }
    ],
    "camelcase": [
      "error",
      {
        "properties": "never"
      }
    ],
    "capitalized-comments": [
      "warn",
      "always",
      {
        "ignoreInlineComments": true
      }
    ],
    "comma-dangle": [
      "error",
      "never"
    ],
    "comma-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "comma-style": [
      "error",
      "last"
    ],
    "computed-property-spacing": [
      "off",
      "always"
    ],
    "consistent-this": [
      "error",
      "self"
    ],
    "eol-last": [
      "error",
      "always"
    ],
    "func-call-spacing": [
      "error",
      "never"
    ],
    "func-name-matching": "off",
    "func-names": [
      "error",
      "always"
    ],
    "func-style": [
      "error",
      "declaration",
      {
        "allowArrowFunctions": false
      }
    ],
    "id-blacklist": "off",
    "id-length": [
      "warn",
      {
        "min": 1,
        "max": 25,
        "properties": "never"
      }
    ],
    "id-match": "off",
    "indent": [
      "error",
      "tab",
      {
        "SwitchCase": 0,
        "VariableDeclarator": 1,
        "outerIIFEBody": 1,
        "MemberExpression": 1,
        "FunctionDeclaration": {
          "body": 1,
          "parameters": "off"
        },
        "FunctionExpression": {
          "body": 1,
          "parameters": "off"
        },
        "CallExpression": {
          "arguments": "off"
        },
        "ArrayExpression": 1,
        "ObjectExpression": 1,
        "flatTernaryExpressions": true
      }
    ],
    "jsx-quotes": "off",
    "key-spacing": [
      "error",
      {
        "beforeColon": false,
        "afterColon": true,
        "mode": "strict"
      }
    ],
    "keyword-spacing": [
      "error",
      {
        "before": true,
        "after": true
      }
    ],
    "line-comment-position": "off",
    "linebreak-style": [
      "error",
      "unix"
    ],
    "lines-around-comment": [
      "off",
      {
        "beforeBlockComment": true,
        "afterBlockComment": false,
        "beforeLineComment": true,
        "afterLineComment": false,
        "allowBlockStart": true,
        "allowBlockEnd": true,
        "allowObjectStart": true,
        "allowObjectEnd": true,
        "allowArrayStart": true,
        "allowArrayEnd": true
      }
    ],
    "max-depth": [
      "error",
      {
        "max": 5
      }
    ],
    "max-len": [
      "error",
      {
        "code": 80,
        "tabWidth": 4,
        "ignoreComments": true,
        "ignoreUrls": true,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true,
        "ignoreRegExpLiterals": true
      }
    ],
    "max-lines": [
      "warn",
      {
        "max": 300,
        "skipBlankLines": true,
        "skipComments": true
      }
    ],
    "max-nested-callbacks": [
      "error",
      {
        "max": 3
      }
    ],
    "max-params": [
      "error",
      {
        "max": 10
      }
    ],
    "max-statements-per-line": [
      "error",
      {
        "max": 1
      }
    ],
    "max-statements": [
      "warn",
      {
        "max": 100
      }
    ],
    "multiline-ternary": "off",
    "new-cap": [
      "error",
      {
        "newIsCap": false,
        "capIsNew": true,
        "properties": true
      }
    ],
    "new-parens": "error",
    "newline-per-chained-call": "off",
    "no-array-constructor": "error",
    "no-bitwise": "off",
    "no-continue": "off",
    "no-inline-comments": "off",
    "no-lonely-if": "error",
    "no-mixed-operators": [
      "error",
      {
        "allowSamePrecedence": true
      }
    ],
    "no-mixed-spaces-and-tabs": "error",
    "no-multiple-empty-lines": [
      "error",
      {
        "max": 2,
        "maxEOF": 1,
        "maxBOF": 1
      }
    ],
    "no-negated-condition": "error",
    "no-nested-ternary": "error",
    "no-new-object": "error",
    "no-plusplus": [
      "error",
      {
        "allowForLoopAfterthoughts": true
      }
    ],
    "no-restricted-syntax": [
      "error",
      "ArrowFunctionExpression",
      "ClassBody",
      "ClassDeclaration",
      "ClassExpression",
      "DebuggerStatement",
      "ExperimentalRestProperty",
      "ExperimentalSpreadProperty",
      "FunctionExpression",
      "LabeledStatement",
      "RestElement",
      "SpreadElement",
      "TaggedTemplateExpression",
      "TemplateElement",
      "TemplateLiteral",
      "WithStatement",
      "YieldExpression",
      "JSXIdentifier",
      "JSXNamespacedName",
      "JSXMemberExpression",
      "JSXEmptyExpression",
      "JSXExpressionContainer",
      "JSXElement",
      "JSXClosingElement",
      "JSXOpeningElement",
      "JSXAttribute",
      "JSXSpreadAttribute",
      "JSXText",
      "ExportDefaultDeclaration",
      "ExportNamedDeclaration",
      "ExportAllDeclaration",
      "ExportSpecifier",
      "ImportDeclaration",
      "ImportSpecifier",
      "ImportDefaultSpecifier",
      "ImportNamespaceSpecifier"
    ],
    "no-tabs": "off",
    "no-ternary": "off",
    "no-trailing-spaces": [
      "error",
      {
        "skipBlankLines": false
      }
    ],
    "no-underscore-dangle": [
      "error",
      {
        "allowAfterThis": true,
        "allowAfterSuper": true
      }
    ],
    "no-unneeded-ternary": [
      "error",
      {
        "defaultAssignment": false
      }
    ],
    "no-whitespace-before-property": "error",
    "nonblock-statement-body-position": [
      "error",
      "beside"
    ],
    "object-curly-newline": [
      "error",
      {
        "ObjectExpression": {
          "minProperties": 1,
          "consistent": true
        },
        "ObjectPattern": "never"
      }
    ],
    "object-curly-spacing": [
      "warn",
      "always",
      {
        "objectsInObjects": false,
        "arraysInObjects": false
      }
    ],
    "object-property-newline": [
      "error",
      {
        "allowMultiplePropertiesPerLine": false
      }
    ],
    "one-var-declaration-per-line": "off",
    "one-var": [
      "error",
      {
        "var": "never",
        "let": "never",
        "const": "never"
      }
    ],
    "operator-assignment": [
      "warn",
      "always"
    ],
    "operator-linebreak": [
      "error",
      "after"
    ],
    "padded-blocks": [
      "error",
      "never"
    ],
    "padding-line-between-statements": [
      "error",
      {
        "blankLine": "never",
        "prev": "*",
        "next": "directive"
      },
      {
        "blankLine": "always",
        "prev": "directive",
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": "directive",
        "next": "directive"
      },
      {
        "blankLine": "any",
        "prev": "var",
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": "*",
        "next": "return"
      }
    ],
    "quote-props": [
      "error",
      "always"
    ],
    "quotes": [
      "error",
      "single",
      {
        "avoidEscape": true
      }
    ],
    "require-jsdoc": [
      "error",
      {
        "require": {
          "FunctionDeclaration": true,
          "ClassDeclaration": true,
          "MethodDefinition": true,
          "ArrowFunctionExpression": true
        }
      }
    ],
    "semi": [
      "error",
      "always"
    ],
    "semi-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "semi-style": [
      "error",
      "last"
    ],
    "sort-keys": "off",
    "sort-vars": "off",
    "space-before-blocks": [
      "error",
      {
        "functions": "always",
        "keywords": "always",
        "classes": "always"
      }
    ],
    "space-before-function-paren": [
      "error",
      {
        "anonymous": "always",
        "named": "never",
        "asyncArrow": "always"
      }
    ],
    "space-in-parens": "off",
    "space-infix-ops": "off",
    "space-unary-ops": [
      "error",
      {
        "words": true,
        "nonwords": false
      }
    ],
    "spaced-comment": [
      "error",
      "always",
      {
        "block": {
          "balanced": true
        }
      }
    ],
    "switch-colon-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "template-tag-spacing": [
      "error",
      "never"
    ],
    "unicode-bom": "off",
    "wrap-regex": "off",
    "arrow-body-style": [
      "error",
      "always"
    ],
    "arrow-parens": [
      "error",
      "always"
    ],
    "arrow-spacing": [
      "error",
      {
        "before": true,
        "after": true
      }
    ],
    "constructor-super": "error",
    "generator-star-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "no-class-assign": "error",
    "no-confusing-arrow": [
      "error",
      {
        "allowParens": false
      }
    ],
    "no-const-assign": "error",
    "no-dupe-class-members": "error",
    "no-duplicate-imports": [
      "error",
      {
        "includeExports": true
      }
    ],
    "no-new-symbol": "error",
    "no-restricted-imports": [
      "error",
      {
        "paths": [
          "lodash",
          "underscore",
          "async"
        ],
        "patterns": [
          "lodash*",
          "async*"
        ]
      }
    ],
    "no-this-before-super": "error",
    "no-useless-computed-key": "error",
    "no-useless-constructor": "error",
    "no-useless-rename": "error",
    "no-var": "off",
    "object-shorthand": [
      "error",
      "never"
    ],
    "prefer-arrow-callback": "off",
    "prefer-const": [
      "warn",
      {
        "destructuring": "any",
        "ignoreReadBeforeAssign": false
      }
    ],
    "prefer-destructuring": "off",
    "prefer-numeric-literals": "off",
    "prefer-rest-params": "off",
    "prefer-spread": "off",
    "prefer-template": "off",
    "require-yield": "error",
    "rest-spread-spacing": [
      "error",
      "never"
    ],
    "sort-imports": "off",
    "symbol-description": "error",
    "template-curly-spacing": [
      "error",
      "never"
    ],
    "yield-star-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ]
  },
  "parserOptions": {
    "version": 6,
    "sourceType": "script",
    "ecmaFeatures": {
      "globalReturn": false,
      "impliedStrict": false,
      "jsx": false,
      "experimentalObjectRestSpread": false
    }
  }
}

What did you do? Please include the actual source code causing the issue.

'use strict';

var resolve = require( 'path' ).resolve;
var join = require( 'path' ).join;

var config = join( __dirname, 'eslint', '.eslintrc.markdown.js' );
var eslint = resolve( __dirname, '..', 'tools', 'remark', 'plugins', 'remark-lint-eslint' );
var opts = {
	'config': config,
	'ignore': false,
	'useEslintrc': false
};

var plugin = [ [ require( eslint ).factory( opts ), [ 'error' ] ] ];

module.exports = plugin;
What did you expect to happen?
I expected this to pass linting.
What actually happened? Please include the actual, raw output from ESLint.
/Users/beep/boop/etc/remark/plugins/eslint/index.js
  6:5  error  'config' is already defined  no-redeclare

‚úñ 1 problem (1 error, 0 warnings)

This file was passing linting until the most recent ESLint release (released today).2J
(cb74b8774db269ad75acf5f2a035a2cf6016b4a42017-09-03T22:55:31Z11638619:ô
2017-09-02T03:17:44ZÄThanks for the report. However, I can't reproduce this in the demo (link). Are you sure you included your code/config correctly?:Ô
2017-09-02T03:20:43Z÷Ah, sorry, wrong config, but same result. I pasted the config I use for linting Markdown code blocks. I updated the OP to include the config I use for linting JavaScript files. The no-redeclare setting is the same.:ì
2017-09-02T03:23:15Z{I am seeing this issue across multiple files and lint contexts. The only thing which changed was the recent ESLint release.:Ñ
2017-09-02T03:28:51ZÎHere is another file which is failing lint:
'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var rule = require( 'unified-lint-rule' );
var visit = require( 'unist-util-visit' );
var Engine = require( 'eslint' ).CLIEngine;
var cwd = require( '@stdlib/utils/cwd' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var transformHTML = require( './transform_html.js' );


// MAIN //

/**
* Returns a plugin for linting Markdown code blocks using ESLint.
*
* @param {Object} [options] - options
* @param {string} [options.config] - path to an ESLint configuration file
* @throws {TypeError} options arguments must be an object
* @returns {Function} plugin
*
* @example
* var remark = require( 'remark' );
*
* var plugin = factory();
* var linter = remark().use( plugin ).processSync;
*
* var vfile = linter( '``` javascript\nvar beep = \'boop\';\n```' );
*/
function factory( options ) {
	var opts;
	var cli;

	opts = {};
	if ( arguments.length ) {
		if ( !isObject( options ) ) {
			throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `'+options+'`.' );
		}
		if ( hasOwnProp( options, 'config' ) ) {
			opts.configFile = resolve( cwd(), options.config );
		}
		if ( hasOwnProp( options, 'ignore' ) ) {
			opts.ignore = options.ignore;
		}
		if ( hasOwnProp( options, 'useEslintrc' ) ) {
			opts.useEslintrc = options.useEslintrc;
		}
		// TODO: add support for other ESLint options
	}
	cli = new Engine( opts );
	return rule( 'remark-lint:eslint', lint );

	/**
	* Lints Markdown code blocks using ESLint.
	*
	* @private
	* @param {Node} tree - abstract syntax tree (AST)
	* @param {File} file - file being linted
	* @param {Object} options - options
	* @param {Callback} clbk - callback
	*/
	function lint( tree, file ) {
		visit( tree, 'code', onNode );

		/**
		* Callback invoked upon encountering a code block.
		*
		* @private
		* @param {Node} node - AST node
		* @param {number} idx - position of node in parent
		* @param {Node} parent - parent AST node
		* @returns {void}
		*/
		function onNode( node, idx, parent ) {
			var comments;
			var comment;
			var report;
			var result;
			var offset;
			var prev;
			var code;
			var msg;
			var str;
			var i;
			var j;

			if ( node.lang === 'javascript' || node.lang === 'js' ) {
				// Look for HTML comments immediately preceding a code block which may contain ESLint configuration...
				idx -= 1;
				prev = parent.children[ idx ];
				comments = [];
				while ( prev && prev.type === 'html' ) {
					comment = transformHTML( prev.value );
					if ( !comment ) {
						break;
					}
					if ( comment === '/* eslint-skip */' ) {
						return;
					}
					comments.unshift( comment );
					idx -= 1;
					prev = parent.children[ idx ];
				}
				offset = comments.length;
				comments.push( node.value );
				code = comments.join( '\n' );

				// Lint the code block...
				report = cli.executeOnText( code );
				for ( i = 0; i < report.results.length; i++ ) {
					result = report.results[ i ];
					result.filePath = file.path || result.filePath;
					for ( j = 0; j < result.messages.length; j++ ) {
						msg = result.messages[ j ];
						str = '';
						str += (msg.line-offset) + ':' + msg.column;
						str += '   ';
						if ( msg.severity === 2 ) {
							str += 'error';
						} else {
							str += 'warning';
						}
						str += '   ';
						str += msg.message;
						str += '   ';
						str += msg.ruleId;
						file.message( str, node );
					}
				}
			}
		}
	}
}


// EXPORTS //

module.exports = factory;
ESLint subsequently emits the following:
/Users/beep/boop/tools/remark/plugins/remark-lint-eslint/lib/factory.js
    7:5  error    'visit' is already defined                            no-redeclare
   51:3  warning  Unexpected 'todo' comment                             no-warning-comments

‚úñ 2 problems (1 error, 1 warning)
``:T
2017-09-02T03:29:11Z<I think I can reproduce this issue. I'm looking into it now.:0
2017-09-02T03:29:30Z@not-an-aardvark Thanks!:_
2017-10-15T20:57:43ZG@ilyavolodin @not-an-aardvark
Is this issue resolved in latest version?:
2017-10-15T20:59:30ZYes.¨'¥†02016-05-14T22:14:40Z"2016-05-23T21:22:00Z*âESLint Version: 2.10.1
Problem:
Using newline-before-return with padded-blocks causes a conflict, as padded-blocks insists on padded spacing for functions, and newline-before-return complains if there is a newline before a return statement by itself in a function.
Recommended Solution:
Add an option to newline-before-return to ignore scenarios where the only statement in a function block is the return statement.
For example:
"newline-before-return": ["error", {
    "pad-getters": true  // (New) Ensure getter returns are padded on either side by a newline
}]
This will allow ESLint to properly support it's built-in plugins without changing the default functionality of the newline-before-return rule.  With the above configuration:
This code would result in an error:
function getVar() {
    return this.var;
}
This code would be valid with both plugins:
function getVar() {

    return this.var;

}2G
(ee0cd5871b69c15e023d3f8b893761b5cc246d342016-05-23T21:21:58Z72561:„
2016-05-14T23:23:01Z I think newline-before-return should not error when it is the first statement in a block, regardless of the newlines and that should be left to padded-blocks.
The doc says (emphasis mine):

This rule requires an empty line before return statements to increase code clarity, except when the return is alone inside a statement group (such as an if statement). In the latter case, the return statement does not need to be delineated by virtue of it being alone.:≈
2016-05-14T23:30:34Z¨I support @alberto's suggested change üëç, though this would be a breaking change to the rule. I wonder if we should make it an option that relaxes the rule for that case?:V
2016-05-17T14:54:33Z>I added accepted label since there are 4 üëçs from core team.:Ó
2016-05-17T15:32:07Z’There is still the question of whether this is a breaking change and it should instead be treated as an enhancement go behind an option @eslint/eslint-team
There are a good number of tests asserting this behaviour:û
2016-05-17T15:53:08ZÖI think we can modify the default behavior because this change is relaxing, so it probably will not break existing CI tests of users.:U
2016-05-17T16:47:05Z=In JSCS, relaxing rules was not considered a breaking change.:”
2016-05-17T17:17:38Z∫Can we document what should be considered as breaking change? See JSCS example https://github.com/jscs-dev/node-jscs/blob/master/OVERVIEW.md#user-content-versioning--semver for reference:¿
2016-05-23T21:18:37ZßI concur that this is a bug as the documentation seems to indicate that the desired behavior.
I've opened an issue so we can discuss formalizing a semver policy: #6244:ï
2016-06-08T20:18:16Z}I like this as an option. When should this be available? It looks like it is already included but I am not seeing it working.:É
2016-06-09T04:24:34ZkHey there, this should be in as of >2.11.0 http://eslint.org/blog/2016/05/eslint-v2.11.0-released#bug-fixes:Ó
2016-06-09T13:45:41Z’@kaicataldo That's what I was thinking but I am not able to get this option to work; I still get:
error  Block must not be padded by blank lines  padded-blocks

... in my lint results output.
My .eslintrc.json looks like this:
{
  "env": {
    "browser": true,
    "node": true
  },
  "extends": "airbnb",
  "rules": {
    "comma-dangle": ["warn", "never"],
    "consistent-return": "error",
    "eqeqeq": ["error", "smart"],
    "newline-before-return": "off",
    "no-use-before-define": ["error", {
      "functions": false
    }],
    "space-before-function-paren": ["warn", "always"]
  }
}

I've tried all permutation of newline-before-return and padded-blocks. The only thing that seems to be working is padded-blocks which affects everything and I only want to allow an additional line before return statements. Am I understanding this correctly?:∂
2016-06-09T16:41:36ZùAh yeah, that's the padded-blocks rule warning, not the newline-before-return rule. I recommend making a new issue for this, since this issue is unrelated and closed. Please make sure you include the info asked for in the template, including the code that's throwing the error. Thanks!:¡
2016-06-09T17:18:38Z®@kaicataldo Correct, it is the padded-blocks error message but shouldn't the option proposed by this feature relax that? Am I misunderstanding the purpose of this additional option?
update: Here is a repo I put together to illustrate the issue - https://github.com/kalisjoshua/eslint-bug-example.:é
2016-06-10T04:41:57ZıLooks like this fix was just for newlines before return statements. The padded-blocks warning is for the missing newline after the return statement (on line 4 in your example). The change in this issue makes the rules compatible by relaxing the newline-before-return rule to allow a newline before the return statement even when it's the only statement in the block. It sounds like you might not want to be using the padded-blocks rule, if you don't want a padding newline before the end of the block.“,\Ø?2017-02-20T07:53:06Z"2017-02-24T07:58:42Z*§What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X ] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ X] Other, please explain:
#8110



What changes did you make? (Give an overview)
Allow keyword-spacing rule to find the first token better by skipping over decorators, generated by typescript, and not including symbol keyword when parsing arrow functions.
Is there anything you'd like reviewers to focus on?
Is this the best solution to allow the typescript parser to work correctly with the keyword-spacing rule?2I
(4e52cfcf5314cac46e8d3688141a573016e7efb12017-02-24T07:58:41Z2373964:¬
2017-02-20T07:53:07Z©@soda0289, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @vitorbal and @gyandeeps to be potential reviewers.:
2017-02-20T07:53:07ZLGTM:"
2017-02-21T19:44:19Z
Sure thing:
2017-02-22T02:37:39ZLGTM:
2017-02-22T02:41:20ZLGTM:
2017-02-22T02:48:16ZLGTM:
2017-02-22T02:54:35ZLGTM:∆
2017-02-22T02:59:35Z≠@not-an-aardvark
I have added some tests that ensure no exceptions are thrown when using a decorator with class or method and using some keywords as a parameter in arrow functions.
I also added back the check for firstToken.type === "Keyword" but included the check for firstToken.value === "function":ﬂ
2017-02-22T08:00:06Z∆@eslint/eslint-team What do you think if we have typescript in devDependencies? As my understanding, we have been avoiding that we have custom parsers in devDependencies. Though I'm not oppose it...:
2017-02-22T14:08:42ZLGTM:∫
2017-02-22T14:11:21Z°@mysticatea
I have added more tests for decorators with normal parameters, and with keyword parameters. I also added a test for abstract classes with decorators.:ù	
2017-02-22T14:29:03ZÑ	The part of me that wants to see a resolution to a long-standing issue thinks "hellz yes!" üòÑ
Other immediate thoughts:


Keeping the peerDependency version of TypeScript within the typescript-eslint-parser, and this new devDependency of ESLint in sync would be a bit of a pain... Not sure if there is anything super simple we can do about it, though.

Crazy idea - ESLint Bot could open a PR to ESLint every time a new version of the typescript-eslint-parser is published, which updates the devDependencies:

typescript-eslint-parser: {{ whatever that new version was }}
typescript: {{ whatever the peerDependency of typescript-eslint-parser is }}





I'm excited about this PR because how ever we do manage this kind of change in ESLint can hopefully serve as a template for similar things in future


@nzakas has definitely given some thought to how changes like this would first start getting introduced into ESLint, so this is one rare occasion that I would like to make sure we get his input. He has very limited availability at the moment but kindly offered that I email him with stuff it is important that he sees. I will follow-up with him now.:ú
2017-02-22T15:29:18ZÉI can understand the concern of increasing the number of devDependencies and including parsers in the test suite. One way I can see to avoid this is to create another package or repository that handled eslint parser integration tests. That way if you change how eslint works you would not need to run all the parser integration tests unless it modified how parsing or rules were handled. New rules and rule modifications could run the integration tests and we could learn more about how these changes would effect users of those parser. A failing test in the integration test suite might indicate a problem with the parser itself and not eslint.
Another idea would be to hardcode the AST that typescript-eslint-parser generates and use that as test input instead of code.:∫
2017-02-22T18:49:27Z°I'm inclined to think that we shouldn't bundle the TypeScript parser and run a lot of TypeScript tests in this repo. Instead, I'd suggest creating a stub custom parser for testing purposes where you can return whatever AST you want (I did that for type annotations already). I'd just cover a couple basic cases rather than the large number of tests this PR adds.
Then, I like the idea of having some kind of separate integration test. It seems like that could live in the TypeScript parser repo? I'm also not opposed to a separate repo for that.:
2017-02-22T18:57:31Zg@nzakas I see something similar was done in this PR #7820. Will follow the pattern found there. Thanks!:È
2017-02-22T20:36:40Z–@soda0289 I'm sorry for my unclear request. My concern was a code like class Foo { @desc({set a(value) {}, get a() {}, async c() {}}) async[foo]() {} }. In this case, I guessed the 2nd async would be ignored.:
2017-02-23T03:54:28ZLGTM:†
2017-02-23T04:04:38Zá@mysticatea
Thanks for that test case it was very valuable. The old logic, of finding the keyword token by starting from the beginning of the method declaration, fails when keywords are used in decorators. I had not considered this case before. I have changed it so that we search backwards from the node.key, the method name node, until the first keyword token is found. Can you think of cases where this would fail?
@not-an-aardvark
I misunderstand what you meant by custom parser and have since rewrote the tests using a parser that has the typescript produced AST results hard coded. This is a much cleaner solution as @nzakas helped me realize.
These test no longer depend on typescript or typescript-eslint-parser. Thanks for your patience and feedback I appreciate it.Ã<·82016-09-27T17:21:59Z"2016-09-30T20:05:45Z*èWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7249

Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
(n/a) I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
This ensures that indent handles the parameters of nested function declarations and function expressions correctly. Previously, it was not accounting for the initial offset of a function, so it would always require the same parameter indent regardless of whether the function itself was indented.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(332d21383d58fa75bd8d192fe03453f9bcbfe0952016-09-30T20:05:45Z11638619:
2016-09-27T17:22:00ZLGTM:
2016-09-28T11:17:42Z:u
2016-09-30T13:27:40Z]@not-an-aardvark looks like there are some conflicts in the test file. Could you do a rebase?:Ô
2016-09-30T18:04:58Z÷I won't have a chance to rebase this until later today. If it's important that we get this change into today's release, feel free to rebase and push to my branch.
edit: Never mind, I ended up having time to rebase.:
2016-09-30T19:52:29ZLGTMùÕ¥?2017-02-21T06:29:05Z"2017-02-22T23:02:25Z*•Tell us about your environment

ESLint Version: 3.16.0
Node Version: 6.9.1
npm Version: 3.10.8

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
module.exports = {
  rules: {
    "padded-blocks": ['error', 'never'],
  }
};

(This is the value specified by eslint-config-airbnb.)
What did you do? Please include the actual source code causing the issue.
I ran eslint --fix on this source code:
function f() { // a

  b;
}
What did you expect to happen?
I expected it to fix the formatting and generate correct code.
What actually happened? Please include the actual, raw output from ESLint.
eslint generated this output:
‚ûú  eslint_test_3 git:(master) ./node_modules/.bin/eslint --fix test.js

/Users/alanpierce/code/eslint_test_3/test.js
  6:1  error  Parsing error: Unexpected token

‚úñ 1 problem (1 error, 0 warnings)

And the JS file was changed to have these contents:
function f() {
function f() { // a

  b;
}

This is a syntax error, so the file fails to parse after this change.
When I try this on eslint 3.15.0, it doesn't have any problems.
This is breaking the coffeelint example build for the decaffeinate project. The lexical_linter.js file has two static initClass lines near the start, which causes a syntax error. (The example builds are a bit like eslint-canary for the decaffeinate project, and one of the conversion steps is to run eslint --fix on the resulting JS code.)2J
(ff8a80c8fcbad81151a3d2d247f363c9bfd881362017-02-22T23:02:20Z11638619:u
2017-02-21T07:45:38Z]I can reproduce this, thanks for reporting.
Based on git bisect it was introduced in fcc38db.¡à£02016-05-15T00:22:03Z"2016-05-17T18:34:45Z*õWhat version of ESLint are you using?
2.10.0 , sha: 8b78697
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
$ node --version
v5.5.0

What did you do? Please include the actual source code causing the issue.
The no-multiple-empty-lines rule flagged code as invalid even though it should work according to the doc. The following test case fails:
file tests/lib/rules/no-multiple-empty-lines.js: 140
{
  code: "\n\n\n\n// invalid 16\nvar a = 5;\n",
  options: [ { max: 0, maxBOF: 4 } ]
}

Note that this is a modified version of the invalid test case already present in the code. I'm writing a fixer for this rule and it seems no fix of invalid test case 16 is ever accepted.
What did you expect to happen?
I expect that the test case code provided above is seen as valid by the test runner. This should be the solution to the invalid test case 16. However it is not accepted. Moreover there doesn't seem to be a permutation which valid. It seems the rule cannot handle a maxBOF > max. Given these options the rule is simply never valid.
What actually happened? Please include the actual, raw output from ESLint.
The test case returns an error:
$ npm test
...
  1) no-multiple-empty-lines valid



// invalid 16
var a = 5;
:

      AssertionError: Should have no errors but had 1: [ { ruleId: 'no-multiple-empty-lines',
    severity: 1,
    message: 'More than 0 blank lines not allowed.',
    line: 4,
    column: 2,
    nodeType: 'Program',
    source: '' } ]
      + expected - actual

      -1
      +0

      at testValidTemplate (lib/testers/rule-tester.js:9:9813)
      at Context.<anonymous> (lib/testers/rule-tester.js:9:14513)
...2H
(76449084e1ae48d364e3e8c41bd760a5d80f82a62016-05-17T18:34:43Z205326:7
2016-05-15T00:35:06ZConfirmed.
I'm working on this.:O
2016-05-15T01:00:13Z7Ah, so am I. Please see if the #6180 matches your work.:ö
2016-05-15T01:02:45ZÅActually the problem seems to be both at the beginning and ending of a file, the following test will also fail:
{
  code: "\n\n\n\n// valid 17\nvar a = 5;\n\n",
  options: [ { max: 0, maxBOF: 4, maxEOF: 2 } ]
}

PR fixes it, but test is missing. I'll add it»	=¶A2017-03-29T22:02:33Z"2017-03-31T20:29:51Z*åWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 7.8.0
npm Version: 4.2.0

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  operator-assignment: [error, never]
What did you do? Please include the actual source code causing the issue.
foo *= bar + baz
What did you expect to happen?
I expected the code to be autofixed to
foo = foo * (bar + baz)
What actually happened? Please include the actual, raw output from ESLint.
The code was autofixed to
foo = foo * bar + baz



What changes did you make? (Give an overview)
Previously, the operator-assignment autofixer could sometimes modify semantics or produce a syntax error due to different operator precedence. This commit updates the fixer to surround the right side of an assignment with parentheses if it has lower precedence than its new neighbor.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(3342e9f89848205f9d59ca2dde1d8d2f30753d942017-03-31T20:29:50Z11638619:
2017-03-29T22:02:34ZLGTM:
2017-03-30T01:04:00ZLGTM„	Õµ?2017-02-21T08:16:10Z"2017-02-22T23:02:21Z*ıWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8116)
What changes did you make? (Give an overview)
The padded-blocks rule sometimes produces a fix range where the start index of the range is larger than the end index. Due to the changes in fcc38db, when source-code-fixer encountered such a range, it would output the text between the end index and the start index twice. This commit ensures that source-code-fixer behaves the same way as it previously did when it encounters an inverted fix range (it should act as if the start and end indices were equal). In the future, we should also update padded-blocks to avoid producing inverted fix ranges.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(ff8a80c8fcbad81151a3d2d247f363c9bfd881362017-02-22T23:02:20Z11638619:
2017-02-21T08:16:11ZLGTM:≈
2017-02-21T08:16:12Z¨@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @nzakas and @alberto to be potential reviewers.:Ñ
2017-02-21T14:42:12ZlThanks! I just re-ran my failing test suite with this patch applied to eslint and the test suite passes now.ÑîÆ@2017-03-12T05:07:56Z"2017-03-16T17:15:04Z*ñ	What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 7.7.2
npm Version: 4.1.2

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  no-useless-escape: error
parserOptions:
  ecmaVersion: 2015
What did you do? Please include the actual source code causing the issue.
`\a```
What did you expect to happen?
I expected the \a to be reported as a useless escape.
What actually happened? Please include the actual, raw output from ESLint.
No errors were reported.
What changes did you make? (Give an overview)
This fixes a check in no-useless-escape for tagged template literals. Previously, the rule would exclude any TemplateLiteral whose parent was a TaggedTemplateExpression. This is because backslashes in the "literal" part of a tagged template can be observed by the tag function. However, this doesn't apply to the tag itself, so if a template literal is a tag for another template literal, the rule should check for useless escapes in the tag.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(7d1af86851bb4af03ed05515ffc5e59e5c0cda522017-03-16T17:15:03Z11638619:Ã
2017-03-12T05:07:57Z≥@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @kaicataldo, @onurtemizkan and @vitorbal to be potential reviewers.:
2017-03-12T05:07:57ZLGTMÄ%‹92016-10-18T07:57:43Z"2017-01-02T16:30:41Z*ëWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:



What changes did you make? (Give an overview)
This is continued from #7160. I'm making a new PR because the original repo from that PR appears to have been deleted.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(2322733c9071a64b6b064daca76c981c0cba09d12017-01-02T16:30:40Z11638619:À
2016-10-18T07:57:44Z≤@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @nzakas, @mysticatea and @platinumazure to be potential reviewers.:
2016-10-18T07:57:44ZLGTM:‚
2016-10-18T07:58:17Z…Thank you for your pull request. It looks like this may be your first contribution to a jQuery Foundation project, if so we need you to sign our Contributor License Agreement (CLA).
üìù Please visit http://contribute.jquery.org/CLA/ to sign.
After you signed, the PR is checked again automatically after a minute. If there's still an issue, please reply here to let us know.

If you've already signed our CLA, it's possible your git author information doesn't match your CLA signature (both your name and email have to match), for more information, check the status of your CLA check.:˙
2016-10-18T08:40:54Z·@clickthisnick, would you mind signing the CLA again? I think I fixed the test issue from the previous PR here, but the CLA has changed a bit in the past few days, so I think it needs to be signed again for new contributions.:Ñ
2016-11-01T18:28:41ZlClosing and reopening to see if it fixes the CLA issue (it shouldn't be passing the CLA check at the moment):
2016-11-01T18:40:23ZLGTM:„
2016-11-03T18:12:25Z @clickthisnick Sorry for the multiple requests during our jQuery to JS Foundation transition but if you could sign the CLA once more by clicking the link above, we hopefully won't ask you to do it again on an ESLint repo for a long time. Again, sorry for the noise as we implement our new system and thanks for your contributions!:ä
2016-11-08T22:37:08Zr@clickthisnick can you please sign our new CLA?
@not-an-aardvark can you please respond to @kaicataldo's feedback?:;
2016-11-08T22:46:30Z#All committers have signed the CLA.:
2016-11-08T22:46:30ZLGTM:ì
2016-11-17T00:49:21Z{@clickthisnick Friendly ping. Would you mind signing the JS Foundation CLA? Apologies for having to do this multiple times.:i
2016-11-19T04:32:19ZQAre there any tests which ensure that valid/invalid both being present but empty?:Ñ
2016-12-23T18:59:45Zl@clickthisnick Friendly ping, can you please sign our CLA. thats the only thing this PR s waiting on. Thanks:n
2016-12-31T07:20:12ZVIt seems like the CLA might not get signed. How do we move forward in cases like this?:∆
2016-12-31T07:35:03Z≠I'm not sure if this matters, but the user signed the current version of the CLA at the time that the commit was made. The CLA changed before the commit made it into master.:8
2016-12-31T17:43:57Z Sorry about that, signed the CLA:1
2016-12-31T18:33:27Z@clickthisnick Thank you!Ç	ˇÛG2017-09-02T03:52:04Z"2017-09-03T22:55:32Z*∞What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#9202)



What changes did you make? (Give an overview)
This fixes a regression introduced in f005e24 (merged as part of 60c5148) where globals would get added to environments when the env was set to false in a config file. (The globals would not get added if the env was omitted).
I had originally assumed this was a dead code path because it wasn't covered in any tests (and I had thought environments with env: false where stripped out of the config beforehand). However, it turns out that we just didn't have tests for this case.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(cb74b8774db269ad75acf5f2a035a2cf6016b4a42017-09-03T22:55:31Z11638619:
2017-09-02T03:52:05ZLGTM:«
2017-09-02T03:52:08ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @gyandeeps and @nzakas to be potential reviewers.:I
2017-09-02T06:56:34Z1@not-an-aardvark Thanks for the quick turnaround!:
2017-09-02T19:10:00ZLGTM≥•ùB2017-04-19T00:18:14Z"2017-04-20T23:31:42Z*≤What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version:
Node Version:
npm Version:

What parser (default, Babel-ESLint, etc.) are you using?
Please show your full configuration:
rules:
  indent: error
parserOptions:
  ecmaVersion: 6
What did you do? Please include the actual source code causing the issue.
x => {}
What did you expect to happen?
I expected ESLint to not crash.
What actually happened? Please include the actual, raw output from ESLint.
ESLint crashed.
TypeError: Cannot read property 'range' of null
    at lodash.sortedIndexBy.token (path/to/lib/rules/indent.js:703:100)
    at baseSortedIndexBy (path/to/node_modules/lodash/lodash.js:4143:15)
    at Function.sortedIndexBy (path/to/node_modules/lodash/lodash.js:7991:14)
    at addFunctionParamsIndent (path/to/lib/rules/indent.js:703:46)
    at EventEmitter.ArrowFunctionExpression (path/to/lib/rules/indent.js:808:17)
    at emitOne (events.js:96:13)
    at EventEmitter.emit (events.js:191:7)
    at NodeEventGenerator.applySelector (path/to/lib/util/node-event-generator.js:265:26)
    at NodeEventGenerator.applySelectors (path/to/lib/util/node-event-generator.js:294:22)
    at NodeEventGenerator.enterNode (path/to/lib/util/node-event-generator.js:308:14)

What changes did you make? (Give an overview)
Previously, an arrow function without parentheses around the parameters at the start of a line would cause the indent rule to crash. This commit fixes the crash.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(e35107f0fc8cf813358b2e6ce3262e94b7a535ff2017-04-20T23:31:41Z11638619˙·ŸJ2017-11-01T23:17:58Z"2017-11-05T16:02:47Z*∞Stops error.data from being output as [object Object] when the data property
is an object, such as a rule‚Äôs options object.

What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

Tell us about your environment

ESLint Version:
4.10.0
Node Version:
9.0.0
npm Version:
5.5.1
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

"use strict";

const path = require("path");
const rulesDirPlugin = require("eslint-plugin-rulesdir");

rulesDirPlugin.RULES_DIR = path.join(__dirname, "tools/internal-rules");

module.exports = {
    root: true,
    plugins: [
        "eslint-plugin",
        "node",
        "rulesdir"
    ],
    extends: [
        "./packages/eslint-config-eslint/default.yml",
        "plugin:node/recommended",
        "plugin:eslint-plugin/recommended"
    ],
    rules: {
        "eslint-plugin/consistent-output": "error",
        "eslint-plugin/no-deprecated-context-methods": "error",
        "eslint-plugin/prefer-output-null": "error",
        "eslint-plugin/prefer-placeholders": "error",
        "eslint-plugin/report-message-format": ["error", "[^a-z].*\\.$"],
        "eslint-plugin/test-case-property-ordering": "error",
        "eslint-plugin/test-case-shorthand-strings": "error",
        "rulesdir/multiline-comment-style": "error"
    }
};

What did you do? Please include the actual source code causing the issue.
In a test file in test/lib/rules, in an invalidity test, set the value of options to an array of 1 option, which contained a property whose name was not specified in the schema of the rule. For example, set line 398 of test/lib/rules/object-property-newline.js to:
options: [{ XallowMultiplePropertiesPerLineX: true }],
What did you expect to happen?
I expected an intelligible error message explaining what was wrong.
What actually happened? Please include the actual, raw output from ESLint.
I received an error message that did not sufficiently explain what was wrong, namely:
Value [object Object] should NOT have additional properties.


What changes did you make? (Give an overview)

I modified config-validator to check for the type of error.data. If error.data has a type other than string and is not an array, I changed it to its JSON stringification.
I modified the expected error messages of 2 config-validator tests to match the formats of error.data that arise from their JSON stringification.

Is there anything you'd like reviewers to focus on?
Would it be better to check for other types not yet in use, or to invert the check and check only for non-array objects, or to JSON stringify everything regardless of type?2I
(b7c5b19d652b92716712e74e58e76f3a6b934d142017-11-05T16:02:47Z3364797:ö
2017-11-03T06:36:16ZÅThank you for the contribution!
Looks great to me.
Personally, I think better if it JSON-stringify everything regardless of type.:Ñ
2017-11-03T08:01:26ZlThank you for your comment, @mysticatea. I‚Äôll be happy to make that change, unless anybody else disagrees.:ï
2017-11-03T13:03:30Z}With the error.data no longer surrounded by quotation marks, I would also be okay with unconditional stringification. Thanks!:ã
2017-11-03T23:24:29ZsI have revised this PR to JSON-stringify error.data in all cases, as recommended by @mysticatea and @platinumazure.õ	Ü◊92016-10-17T07:35:05Z"2016-10-17T21:18:23Z*æNoticed with eslint 3.8.0.
The no-useless-escape rule incorrectly flags \ characters inside String.raw-modified template strings. String.raw specifically ignores any escaping and emits the backslashes as-is, so they are never escaping anything at all.
Code snippet that triggered the false positives:
this.startTokenMatch = new RegExp(String.raw`^-\*-\* ${this.token} start \{(.+)\} \*-\*-$`)
In this case, the backslashes are there specifically so they get emitted as backslashes, as they are escaping regexp metacharacters; but this false positive is unrelated to regexps.2J
(75250423ebd7dc0d263c1deb20333f88a35b6ddb2016-10-17T21:18:20Z11638619:Ÿ
2016-10-17T07:41:09Z¿Confirmed. Thanks for the report.
This is caused by #7332, which allows no-useless-escape to report uselessly-escaped characters in template literals. This is reasonable behavior in most cases, but I think we shouldn't report these characters in tagged template literals, since the tag function can access the raw text.
/* eslint no-useless-escape: 2 */

`foo \.`; // this line should be reported
myFunc`foo \.`; // this line should not be reported‚ó´?2017-02-20T01:54:56Z"2017-02-20T17:11:46Z*ÇWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 7.5.0
npm Version: 4.1.2

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  quotes: error
parserOptions:
  ecmaVersion: 6
What did you do? Please include the actual source code causing the issue.
I absentmindedly spammed ` while working on something else, and I ended up with something like this:
````
This is a tagged template literal, where the tag is the first `` and the quasi is the second ``.
What did you expect to happen?
I expected the first `` to be reported, since it can be in double quotes. Only the second `` needs to be a template literal.
What actually happened? Please include the actual, raw output from ESLint.
No errors were reported.
What changes did you make? (Give an overview)
This fixes a tagged template check in quotes. Since the "literal" of a tagged template literal can't be converted to single/double quotes (e.g. foo`bar`), the rule currently ignores template literals that have a TaggedTemplateLiteral parent. However, it should only ignore these if the template literal is actually the quasi if the parent -- an error should still be reported if the template literal is the tag of the parent.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(d89d0b459c8737331d43aeedf717069fe33758942017-02-20T17:11:45Z11638619:∆
2017-02-20T01:54:57Z≠@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @nzakas and @vitorbal to be potential reviewers.:
2017-02-20T01:54:57ZLGTM:Ä
2017-02-20T02:15:33ZÁThat's true, but I suppose it's still better for the rule to be correct here.
Now I'm imagining this as a minification strategy üòÑ:
function foo() {
  throw new TypeError('not implemented yet');
}

// ->

function foo(){
  ````
}:m
2017-02-20T16:51:17ZU@mysticatea and @not-an-aardvark are we good with this? Also this is a bug fix right?:É
2017-02-20T16:58:11ZkThis has a very slight potential in resulting in more errors, I think. That's why it's marked as an update.ßµ@2017-03-14T04:34:39Z"2017-03-16T05:50:56Z*øWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 7.7.2
npm Version: 4.1.2

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
parserOptions:
  ecmaVersion: 2015
rules:
  sort-vars: [error, { ignoreCase: true }]
What did you do? Please include the actual source code causing the issue.
var {a} = 1, b;
What did you expect to happen?
I expected ESLint to not crash.
What actually happened? Please include the actual, raw output from ESLint.
ESLint crashed.
Cannot read property 'toLowerCase' of undefined
TypeError: Cannot read property 'toLowerCase' of undefined
    at VariableDeclaration.node.declarations.reduce (/path/to/eslint/lib/rules/sort-vars.js:49:60)
    at Array.reduce (native)
    at EventEmitter.VariableDeclaration (/path/to/eslint/lib/rules/sort-vars.js:40:35)
    at emitOne (events.js:96:13)
    at EventEmitter.emit (events.js:191:7)
    at NodeEventGenerator.enterNode (/path/to/eslint/lib/util/node-event-generator.js:39:22)
    at CodePathAnalyzer.enterNode (/path/to/eslint/lib/code-path-analysis/code-path-analyzer.js:607:23)
    at CommentEventGenerator.enterNode (/path/to/eslint/lib/util/comment-event-generator.js:98:23)
    at Controller.enter (/path/to/eslint/lib/eslint.js:928:36)
    at Controller.__execute (/path/to/eslint/node_modules/estraverse/estraverse.js:397:31)


What changes did you make? (Give an overview)
By design, sort-vars ignores destructuring assignments. However, the rule previously didn't account for the case where the first declarator of a variable declaration was a destructuring assignment -- this led to a crash. This commit updates the rule to handle this case properly.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(13eead9fc9809acfecf4838536c7392c72d974e32017-03-16T05:50:55Z11638619:«
2017-03-14T04:34:40ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @nzakas, @vitorbal and @ilyavolodin to be potential reviewers.:
2017-03-14T04:34:40ZLGTMüµ§B2017-04-20T01:28:25Z"2017-07-21T16:22:30Z*õESLint Version: v3.19.0
Node Version: v7.9.0
module.exports = {
  'env': {
    'browser': true,
    'es6': true
  },
  'extends': 'eslint:recommended',
  'rules': {
    'object-curly-newline': ['error', {multiline: true}],
    'no-unused-vars': 'off',
  }
Before
var a = {
  // Nothing here yet, but comment should not be removed.
};
After invoking ESLint with the --fix flag the file is modified as follows
var a = {};
What did you expect to happen?
The comment should have been preserved.
What actually happened?
The comment was removed.2I
(96df8c9a76a60bdc134c44aa6939a1d75f5795042017-07-21T16:22:24Z2801321:k
2017-04-20T03:05:57ZSThanks for reporting this! We definitely don't want to remove comments via autofix.:•
2017-04-20T07:31:54ZåThanks for triaging quickly. Just adding a few more cases that exhibit the same problem
Before
let a = { 
  /* comment */ foo: 'hello'
};

let b = { 
  foo: 'hello' /* comment */
};
After --fix both comments are removed
let a = {foo: 'hello'};

let b = {foo: 'hello'};:Ï
2017-04-20T09:11:31Z”FYI, I have a condidate fix at freshp86@4965686. Tested
let a = {
  /* comment */ foo: 'hello'
};

let b = {
  foo: 'hello' /* comment */
};

let c = { /* comment */
  foo: 'hello'
};

let d = {
  /* comment */
}
and it becomes
let a = {/* comment */ foo: 'hello'};

let b = {foo: 'hello' /* comment */};

let c = { /* comment */
  foo: 'hello'
};

let d = {/*comment*/};
which seems correct. If that seems promising I can look on how to add proper tests and send a PR (have not contributed to ESLint before).
Having said that, when I use my complete config object (not posted in this bug), I end up with the comments removed again. I'll keep investigating that separately, since that seems to be caused by some other rule.˙¨A2017-03-30T13:52:40Z"2017-03-31T00:39:24Z*òWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:



What changes did you make? (Give an overview)
This fixes #8362 where an empty pattern would cause eslint to run on the whole filesystem. I changed glob-util to make it ignore empty patterns.
Is there anything you'd like reviewers to focus on?
No.2G
(155424c0e98abefa66218930a085085f48b2e2212017-03-31T00:39:24Z72561:ƒ
2017-03-30T13:52:41Z´@alberto, thanks for your PR! By analyzing the history of the files in this pull request, we identified @IanVS, @mysticatea and @not-an-aardvark to be potential reviewers.:
2017-03-30T13:52:41ZLGTMıß˚G2017-09-02T20:38:54Z"2017-10-06T06:23:50Z*çTell us about your environment

ESLint Version: 4.6.0
Node Version: 5.6.0
npm Version: 3.6.0

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:

{
	"rules": {
		"array-bracket-newline": ["warn", {
			"multiline": true
		}]
	}
}
What did you do? Please include the actual source code causing the issue.

var structure = {
	marriages: [/*
		{
			husband: { id: 1, name: "Hubby" },
			wife: { id: 2, name: "Wifey" }
		},
		...
	*/],
	// more stuff here
}
What did you expect to happen?
no warnings
What actually happened? Please include the actual, raw output from ESLint.
  2:13  warning  There should be no linebreak after '['   array-bracket-newline
  8:4   warning  There should be no linebreak before ']'  array-bracket-newline2J
(8da525f052efa72499e45af3892453ef98a348c52017-10-06T06:23:50Z17152391:J
2017-09-03T00:27:36Z2Thanks for the report. I can reproduce this issue.:Ò
2017-09-05T08:18:29ZÿWhat is the intended behaviour here?
Should the original example be considered practically the same as ...
var structure = {
    marriages: [/* */],
    // more stuff here
}

... ? (i.e. The array in the original example technically doesn't have elements on a new line because all the new lines are part of the comment, which isn't an element.):Ï
2017-09-09T07:46:51Z”Based on the documentation, it seems like newlines should only be required in the brackets "if there are line breaks inside elements or between elements". Since the array in the example doesn't have any elements, there aren't any line breaks inside elements or between elements. So I think linkebreaks should be disallowed in this example, which means that the original code should be considered correct because it doesn't have linebreaks after the [ or before the ].:ó
2017-09-09T15:12:10ZThis might be another case where it could make sense to work based on token/comment line breaks instead of element line breaks.:M
2017-09-29T02:40:38Z5I have a PR to address this. Any reviews are welcome.:M
2017-10-06T21:40:09Z5Awesome, thank you! Confirmed working on my codebase.µü∏@2017-03-14T07:41:33Z"2017-03-17T22:36:15Z*ÏTell us about your environment

ESLint Version: master
Node Version: 7.7.2
npm Version: 4.1.2

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
    constructor-super: error
parserOptions:
    ecmaVersion: 2015
What did you do? Please include the actual source code causing the issue.

class Foo extends Bar {
    constructor() {
        for (a in b) for (c in d);
    }
}
What did you expect to happen?
I expected ESLint to not crash.
What actually happened? Please include the actual, raw output from ESLint.
ESLint crashed.
TypeError: Cannot read property 'calledInSomePaths' of undefined
    at isCalledInSomePath (/path/to/eslint/lib/rules/constructor-super.js:132:63)
    at Array.some (native)
    at CodePath.funcInfo.codePath.traverseSegments.segment (/path/to/eslint/lib/rules/constructor-super.js:270:63)
    at CodePath.traverseSegments (/path/to/eslint/lib/code-path-analysis/code-path.js:208:30)
    at EventEmitter.onCodePathSegmentLoop (/path/to/eslint/lib/rules/constructor-super.js:263:35)
    at emitThree (events.js:116:13)
    at EventEmitter.emit (events.js:197:7)
    at CodePathAnalyzer.onLooped (/path/to/eslint/lib/code-path-analysis/code-path-analyzer.js:646:26)
    at makeLooped (/path/to/eslint/lib/code-path-analysis/code-path-state.js:191:15)
    at CodePathState.popLoopContext (/path/to/eslint/lib/code-path-analysis/code-path-state.js:1024:17)

It looks like when CodePath#traverseSegments is called, there is a segment where one of segment.prevSegments never triggered onCodePathSegmentStart. I'm not familiar with code path analysis, so I don't know whether this is a rule bug or a code path analysis bug in core.
@mysticatea, do you know where the issue might be coming from?2I
(85f74ca3f21ca2cccc52979d60856fe5d8b71e042017-03-17T22:36:15Z1937871:J
2017-03-14T10:58:55Z2Oh, thank you for the report.
I'll investigate it.:{
2017-03-14T12:43:26ZcI found the code path is broken if the body of a loop is the same kind loop.
I will fix this later.‚©ÚI2017-10-16T13:43:16Z"2017-11-06T19:06:52Z*∂What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

The object-curly-newline rule made the assumption that the last token
is always }. However, when an object is typed with flow this is not
the case. This causes false positives, as described in babel/babel-eslint#513.


What changes did you make? (Give an overview)
By adding a filter to the getLastToken function we skip over the flow
types, and get the actual closing brace. For symmetry the same filter is
added for the open brace, though I'm not aware of any issues it would
fix.
Is there anything you'd like reviewers to focus on?2I
(e5a37ce3b6cf8a2838fb71c5b2f1db0e4a9786032017-11-06T19:06:51Z1759192:;
2017-10-16T13:43:18Z#All committers have signed the CLA.:
2017-10-16T13:43:18ZLGTM:
2017-10-17T08:21:28ZLGTM:Â
2017-10-17T08:23:45ZÃ@platinumazure I added tests similar to those found for object-curly-spacing. In the process I also discovered that my original fix wasn't sufficient, it would cause incorrect behaviour for objects with literal object types (e.g. { a : 3 } : { a : number }). I fixed this now, but as a result most of the original patch has changed.:í
2017-10-26T08:17:34ZzI know you guys are busy so I don't want to pressure you, but does someone perhaps have time to take another look at this?:4
2017-10-26T19:29:32Zcc @eslint/eslint-team  üòÑ¨∑@2017-03-14T06:22:08Z"2017-03-16T03:50:35Z*≥What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 7.7.2
npm Version: 4.1.2

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  func-name-matching: error
parserOptions:
  ecmaVersion: 6
What did you do? Please include the actual source code causing the issue.
[a] = function foo() {};
What did you expect to happen?
I expected ESLint to not crash.
What actually happened? Please include the actual, raw output from ESLint.
ESLint crashed.
Cannot read property 'length' of undefined
TypeError: Cannot read property 'length' of undefined
    at isIdentifierNameES5 (/path/to/eslint/node_modules/esutils/lib/keyword.js:100:15)
    at Object.isIdentifierES5 (/path/to/eslint/node_modules/esutils/lib/keyword.js:146:16)
    at isIdentifier (/path/to/eslint/lib/rules/func-name-matching.js:50:28)
    at EventEmitter.AssignmentExpression (/path/to/eslint/lib/rules/func-name-matching.js:161:38)
    at emitOne (events.js:96:13)
    at EventEmitter.emit (events.js:191:7)
    at NodeEventGenerator.enterNode (/path/to/eslint/lib/util/node-event-generator.js:39:22)
    at CodePathAnalyzer.enterNode (/path/to/eslint/lib/code-path-analysis/code-path-analyzer.js:607:23)
    at CommentEventGenerator.enterNode (/path/to/eslint/lib/util/comment-event-generator.js:98:23)
    at Controller.enter (/path/to/eslint/lib/eslint.js:928:36)

What changes did you make? (Give an overview)
The func-name-matching rule checks for assignments to function expressions so that it can determine whether names match. However, due to a missing type-check, the rule would crash when run on a destructuring assignment to a function expression. This commit updates the rule to ignore destructuring assignments to function expressions.
Note: This is unrelated to #8246.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(133f4895d833fa44987c11e818526aab03b3b3d42017-03-16T03:50:34Z11638619:∫
2017-03-14T06:22:08Z°@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @azhang496 and @ljharb to be potential reviewers.:
2017-03-14T06:22:09ZLGTM:
2017-03-16T03:33:07ZLGTMı&Ó¶02016-05-15T10:32:02Z"2016-05-16T22:07:16Z*œWhat version of ESLint are you using?
2.10.1
What parser (default, Babel-ESLint, etc.) are you using?
babel-eslint
Please show your full configuration:
module.exports = {
    "extends": "airbnb",
    "parser": "babel-eslint",
}

What did you do? Please include the actual source code causing the issue.
I have a sample demonstrating the issue at:
https://github.com/michael-wolfenden/eslint-2-10-1-issue
but running eslint via webpack with:
export class Counter {
  static initialCount = 0;
}

generates the error:
C:\Dev\eslint-issue\Counter.js
  2:23  error  Parsing error: Unexpected token =

What did you expect to happen?
No errors
What actually happened? Please include the actual, raw output from ESLint.
C:\Dev\eslint-issue\Counter.js
  2:23  error  Parsing error: Unexpected token =

Addition information
The issue first occurred with 2.10.0 so at first I assumed it was the same issue as #6158 , however upgrading to 2.10.1 didn't fix the issue. It appears as though the eslint babel parser isn't kicking in.
Another thing to note is that the issue only occurs when running eslint via webpack.2G
(bda5de56d13e5aea3857dd9c78d2edde59d3dffa2016-05-16T22:07:12Z72561:G
2016-05-15T11:05:28Z/I got the same warnings when use it witch gulp.:C
2016-05-15T11:21:55Z+Confirmed. CLIEngine gets the wrong parser.:V
2016-05-15T11:39:04Z>@michael-wolfenden @hustcer @bebraw does #6183 fix it for you?:M
2016-05-15T12:04:51Z5@alberto Can confirm that this fixes the issue for me:3
2016-05-15T14:40:58Z@alberto Works for me. üëç:E
2016-05-15T14:49:11Z-@alberto Looking forward to the PR landing :):5
2016-05-16T10:37:25ZAny ETA on the "fix" release?:÷
2016-05-16T19:47:20ZΩThanks for the comments everyone - we are investigating this issue as quickly as we can. There's some disagreement over the correct approach to fixing the problem, so we're working to resolve that. If you are stuck in the meantime, please consider downgrading to ESLint v1.9.0 until resolved.
If you want updates, please use the "Subscribe" button instead of leaving a comment (which trigger notifications that can distract us as we're working).:Œ
2016-05-16T20:05:05ZµI'm getting a different issue in the demo repo, which is making it a bit harder to debug:
$ npm start

> eslint-issue@1.0.0 start C:\Users\Nicholas\projects\personal\eslint-2-10-1-issue
> webpack

Hash: 396f0bfb9d565b6f60f0
Version: webpack 1.13.0
Time: 827ms
    + 1 hidden modules

ERROR in ./Counter.js
Module build failed: Error: Failed to load plugin jsx-a11y: Cannot find module 'eslint-plugin-jsx-a11y'
Referenced from: airbnb
Referenced from: C:\Users\Nicholas\projects\personal\eslint-2-10-1-issue\.eslintrc.js
    at Function.Module._resolveFilename (module.js:325:15)
    at Function.Module._load (module.js:276:25)
    at Module.require (module.js:353:17)
    at require (internal/module.js:12:17)
    at Object.module.exports.load (C:\Users\Nicholas\projects\personal\eslint\lib\config\plugins.js:114:26)
    at Array.forEach (native)
    at Object.module.exports.loadAll (C:\Users\Nicholas\projects\personal\eslint\lib\config\plugins.js:136:21)
    at load (C:\Users\Nicholas\projects\personal\eslint\lib\config\config-file.js:500:21)
    at C:\Users\Nicholas\projects\personal\eslint\lib\config\config-file.js:386:36
    at Array.reduceRight (native)
    at applyExtends (C:\Users\Nicholas\projects\personal\eslint\lib\config\config-file.js:363:28)
    at load (C:\Users\Nicholas\projects\personal\eslint\lib\config\config-file.js:525:22)
    at C:\Users\Nicholas\projects\personal\eslint\lib\config\config-file.js:386:36
    at Array.reduceRight (native)
    at applyExtends (C:\Users\Nicholas\projects\personal\eslint\lib\config\config-file.js:363:28)
    at Object.load (C:\Users\Nicholas\projects\personal\eslint\lib\config\config-file.js:525:22)
    at loadConfig (C:\Users\Nicholas\projects\personal\eslint\lib\config.js:64:33)
    at getLocalConfig (C:\Users\Nicholas\projects\personal\eslint\lib\config.js:126:23)
    at Config.getConfig (C:\Users\Nicholas\projects\personal\eslint\lib\config.js:227:22)
    at processText (C:\Users\Nicholas\projects\personal\eslint\lib\cli-engine.js:217:27)
    at CLIEngine.executeOnText (C:\Users\Nicholas\projects\personal\eslint\lib\cli-engine.js:755:26)
    at lint (C:\Users\Nicholas\projects\personal\eslint-2-10-1-issue\node_modules\eslint-loader\index.js:25:20)
    at Object.module.exports (C:\Users\Nicholas\projects\personal\eslint-2-10-1-issue\node_modules\eslint-loader\index.js:111:3):Õ
2016-05-16T21:08:03Z¥Okay, so narrowed down the problem and why @alberto's fix works: we have a file called cli-options.js that has the default CLI options. For the most part, the CLI options are blank, and the ones that aren't don't actually affect the config. The parser is the only one that is provided and affects the config.:D
2016-05-16T22:08:15Z,A new release with this fix is now starting.ô
¨ÍI2017-10-16T05:08:17Z"2017-10-18T18:25:22Z*˙What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix

Tell us about your environment

ESLint Version: 4.9.0
Node Version: 8.7.0
npm Version: 5.4.2

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  multiline-comment-style: [error, separate-lines]
What did you do? Please include the actual source code causing the issue.
/* foo
  bar */ baz;
What did you expect to happen?
I expected no error to be reported, because that comment can't safely be converted into line comments.
What actually happened? Please include the actual, raw output from ESLint.
ESLint autofixed the code to:
// foo
// bar baz
In other words, the baz statement was incorrectly converted into a comment.
Demo


What changes did you make? (Give an overview)
This updates the multiline-comment-style rule to ignore block comments which are followed by code on the same line when using the separate-lines option.
This bug was detected using the fuzzer with npm run fuzz, which produced 7 errors caused by this issue.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(e830aa1ab0d0c4042d16e437c66eff60ed4d63e92017-10-18T18:25:21Z11638619:
2017-10-16T05:08:18ZLGTM“¨∏?2017-02-21T14:03:34Z"2017-02-23T19:33:58Z*¥What is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix (template)
Fixes #8119 .
What changes did you make? (Give an overview)
This PR makes ignoreRestSiblings option of no-unused-vars rule covering arguments.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2I
(8f91e3296e6bcd99f53d61d108ffc79d0d02d9ff2017-02-23T19:33:57Z1937871:
2017-02-21T14:03:35ZLGTM∆™A2017-03-30T10:46:55Z"2017-03-31T00:39:24Z*˛ESLint Version: v3.18.0
Node Version: v6.4.0
npm Version: yarn v0.16.1

If you run eslint '', eslint will check for errors across your entire filesystem. I first noticed this when I made a mistake in writing a script which ran eslint, and wrote "$fix" for a variable which was either '--fix' or ''. When I didn't pass the --fix option to my own script, this then caused eslint to check the entire filesystem.
I suggest handling empty string paths, and either ignoring them completely, or throwing an exception.2G
(155424c0e98abefa66218930a085085f48b2e2212017-03-31T00:39:24Z72561:I
2017-03-30T11:01:22Z1I can reproduce this issue. Thanks for reporting. )?°B2017-04-19T12:04:03Z"2017-05-17T07:20:10Z*‹ESLint Version: 4.0.0-alpha.0
default parser

/*eslint indent: [2, 4, {"flatTernaryExpressions": true}] */

var foo =
    d >= 10 ? 10 :
    d >= 5 ? 5 :
    d >= 2 ? 2 :
    d >= 1 ? 1 : 0;
What did you expect to happen? No errors.
What actually happened?
   5:1  error  Expected indentation of 8 spaces but found 4  indent
   6:1  error  Expected indentation of 8 spaces but found 4  indent
   7:1  error  Expected indentation of 8 spaces but found 4  indent

ESLint suggest the following formatting, which doesn't make sense:
var foo =
    d >= 10 ? 10 :
        d >= 5 ? 5 :
        d >= 2 ? 2 :
        d >= 1 ? 1 : 0;
BTW, I strongly believe that flatTernaryExpressions should be true by default. I've never in my life seen this zigzag-style ternary formatting in any projects, while the flat style is pretty much everywhere.
Thanks a lot! Apart from this nitpick, the new indent rule is really awesome! Worked great on a 40k-line project I maintain.
cc @not-an-aardvark @mysticatea2I
(3418479a910237b37ddd8b59ac6812e2af0237592017-05-17T07:20:09Z1937871:m
2017-04-19T15:57:24ZUSeems like a bug to me, but I'll let @not-an-aardvark confirm. Thanks for the report!:µ
2017-04-24T05:10:56ZúThis is working as intended -- the top-level ternary expression is always offset by 1 to avoid confusion in cases like this:
foo ?
bar() :
baz()
The intent of the option is to flatten nested ternary expressions (while still indenting ternary expressions that aren't inside another ternary expression). Note that if the ternary expression isn't at the start of a line, there won't be any difference anyway.
Since this option hasn't been included in a stable release yet, we can consider changing the option to make it more useful (or changing the name so it's not misleading). That said, I don't think it's a good idea to remove all indentation for ternary expressions.:ï
2017-04-24T10:49:54Z¸@not-an-aardvark I'm really confused by your answer. Does this mean the most common ternary indentation style won't be possible to support without turning off the indent option completely? I find the "only indent the first ternary" rule very arbitrary and inconsistent. It would be much less surprising to either indent every nesting level in a multi-line ternary, or indent none.:–
2017-04-24T10:54:46Z∑I expected this is valid:
/*eslint indent: [2, 4, {"flatTernaryExpressions": true}] */

var foo =
    d >= 10 ? 10 :
    d >= 5 ? 5 :
    d >= 2 ? 2 :
    d >= 1 ? 1 :
    /*else*/ 0;:ô
2017-04-24T10:58:56ZÄHowever, yes, I expected this is valid:
let a = foo
    ? bar()
    : baz()
The common point is : does not make indent, I think.:Ã
2017-04-24T18:33:49Z≥@not-an-aardvark I'm really confused by your answer. Does this mean the most common ternary indentation style won't be possible to support without turning off the indent option completely?

@mourner I'm hoping we can avoid that situation by changing the option behavior to more accurately match user intuition.

The common point is : does not make indent, I think.

@mysticatea What should the behavior be for code like this?
/*eslint indent: [2, 4, {"flatTernaryExpressions": true}] */

var foo = bar ? baz :
qux;

let a = foo ?
    bar() :
baz()
To me, it seems like this would result in unexpected indentation in some cases. But maybe I'm not understanding the desired behavior correctly.:ª
2017-04-24T20:32:24Z¢@not-an-aardvark I'd expect all subsequent lines to have the same indented position (4), same as any other statement that you break into multiple lines.
var foo = bar ? baz :
    qux;

let a = foo ?
    bar() :
    baz();

var foo = bar 
    ? baz 
    : qux;

var foo = 5 +
    2 + 
    3;:¢
2017-04-24T21:23:27ZâYou've mentioned that both of these should be valid:
// case 1
var foo = bar ? baz :
    qux;
// case 2
var foo =
    bar ? baz :
    qux;
In case 1, qux is indented by 4 spaces from the start of the ternary. In case 2, qux is not indented at all from the start of the ternary. How does the rule determine which indentation to use?
I ask because the rule is consistent in cases like this when analyzing other expressions:
// case 3
var foo = {
    ok: true
};
// case 4
var foo =
    {
        ok: true
    };
In both case 3 and case 4, the ok: true property is offset by 4 spaces from the {, regardless of whether the object starts on its own line.:—
2017-04-25T14:39:27Z∏var foo = bar ? baz :
qux;
I think the 2nd line needs one level indentation because it's the 2nd line of the initializer expression. This looks unrelated to ternary expressions to me.
let a = foo ?
    bar() :
baz()
The 3rd line looks one level unindented. I don't think : should unindent from the previous line.:†
2017-04-25T14:55:20Zá// case 3
var foo = {
    ok: true
};

// case 4
var foo =
    {
        ok: true
    };

// case 5
var foo = {
        ok: true
    },
    bar = 3;
I think the case 3 is a special case.
The initializer expression body has own indentation level of the object literal, so people probably want to avoid over indentation. However, I think initializer expressions have one indentation basically.:ï
2017-04-25T14:59:16Z}I know indentation is very complex...
I will get time in the next week, a long vacation in Japan, so I will investigate this.óÄË82016-09-28T19:06:31Z"2016-10-03T23:58:45Z*¶Tell us about your environment

ESLint Version: 3.6.1
Node Version: 6.7.0
npm Version: 3.10.3

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  no-implicit-coercion: error
What did you do? Please include the actual source code causing the issue.
Ran eslint --fix on:
const catNoises = ["meow", "hiss", "purr"];

if (!~catNoises.indexOf("purr")) {
  console.log("no purr");
} else {
  console.log("yes purr");
}
What did you expect to happen?
Expected ESLint to autofix the code to:
const catNoises = ["meow", "hiss", "purr"];

if (catNoises.indexOf("purr") === -1) {
  console.log("no purr");
} else {
  console.log("yes purr");
}
Or just report the problem without trying to autofix it.
What actually happened? Please include the actual, raw output from ESLint.
ESLint autofixed the code to:
const catNoises = ["meow", "hiss", "purr"];

if (!catNoises.indexOf("purr") !== -1) {
  console.log("no purr");
} else {
  console.log("yes purr");
}
This autofix changes the logic of the code significantly.2H
(cb7ba6df04060172921d85ae43b03169cb1f50462016-10-03T23:58:40Z249164:ú
2016-09-28T19:43:18ZÉI agree, in this case the tree structure has changed significantly: UnaryExpression > UnaryExpression becomes BinaryExpression > (UnaryExpression, Literal). Acceptable fix would be to surround the new BinaryExpression in parentheses, but I think it would be best not to fix if the expression is preceded by a unary operator.
Marked "evaluating" for now until I or someone else can repro.:U
2016-09-28T19:59:21Z=Pinging @TheSavior: Any chance you could take a look at this?:Y
2016-09-28T20:52:30ZADoes this problem exist only when prefixed with a unary operator?:‡
2016-09-28T23:24:08Z«No, it applies in cases like this as well:
var foo = ~bar.indexOf(baz); // foo will be a number

// gets fixed to:

var foo = bar.indexOf(baz) !== -1; // foo will be a boolean
So I think the solution is to only fix the ~/indexOf case if the expression is always going to be evaluated as a boolean (e.g. in an if or while test).:à
2016-09-28T23:42:09ZÔ@not-an-aardvark makes a good point, although his example contains a concerning lack of animal noises.
On a similar note:
if (~catNoises.indexOf("purr") === 0) { ... }

// gets fixed to:

if (catNoises.indexOf("purr") !== -1 === 0) { ... }:¨
2016-09-29T01:11:16ZìSo it seems like it is only an issue of ~.
What if we always wrap the resulting indexOf check in parens if it is inserted into a larger expression?:ú
2016-09-29T02:03:07ZÉThat would still cause some issues, because the fixer changes its type to a boolean instead of a number.
var negativeFour = ~[foo, bar, baz, qux].indexOf(qux);
assert.strictEqual(negativeFour, -4); // assertion passes

// gets fixed to:

var negativeFour = ([foo, bar, baz, qux].indexOf(qux) !== -1);
assert.strictEqual(negativeFour, -4); // assertion fails, `negativeFour` is now `true`:[
2016-09-29T02:30:12ZCSo perhaps the correct approach is that we just shouldn't autofix ~:ï
2016-09-29T03:41:30Z¸I think the following two statements are by far the most common use of ~ with indexOf and can both be safely autofixed:
if (~a.indexOf(b))     // if (a.indexOf(b) !== -1)
if (!~a.indexOf(b))    // if (a.indexOf(b) === -1)
But any other variation seems risky to autofix, as the user might be doing something whacky that'll break as a result of autofixing. Is it reasonable to only autofix the above two cases, but warn on any other case? Or is the complexity and lack of consistency not worth the small value that autofixing provides? Seems like a toss-up to me. I know I wouldn't be heartbroken if it always warned instead of autofixed.:Ì
2016-10-01T18:53:56Z‘Lets just not auto fix ~.  Our policy is not to auto fix unless it can be done safely, and in this case we obviously can't. (Trying to detect methods that return numbers is a step beyond what we should be doing.)ﬁ¨∑?2017-02-21T13:12:33Z"2017-02-23T19:33:58Z*àESLint 3.15.0
Node 7.4.0
npm 4.0.5

babel-eslint parser
Full configuration:
  {
  "env": {
    "browser": true,
  },
  "globals": {
    "require": false,
    "process": false,
    "ga": false,
    "Promise": false,
    "__SSR__": false,
  },
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true,
    }
  },
  "plugins": [
    "react",
    "import",
  ],
  "settings": {
    "import/resolver": {
      "webpack": { "config": "webpack-config/dev.js" },
    },
  },
  "rules": {
    "eol-last": ["warn", "always"],
    "indent": ["warn", 2, { "SwitchCase": 1 }],
    "linebreak-style": ["warn", "unix"],
    "default-case": ["warn"],
    "no-console": ["warn"],
    "no-alert": ["warn"],
    "no-debugger": ["warn"],
    "no-dupe-args": ["warn"],
    "no-dupe-keys": ["warn"],
    "no-duplicate-case": ["warn"],
    "no-empty": ["warn"],
    "no-extra-boolean-cast": ["warn"],
    "no-extra-parens": ["warn", "functions"],
    "no-extra-semi": ["warn"],
    "no-irregular-whitespace": ["warn"],
    "no-multiple-empty-lines": ["warn", { "max": 2, "maxEOF": 1 }],
    "no-sparse-arrays": ["warn"],
    "no-undef": ["warn"],
    "no-unexpected-multiline": ["warn"],
    "no-unreachable": ["warn"],
    "no-unused-vars": ["warn", { "vars": "all", "args": "after-used", "ignoreRestSiblings": true }],
    "semi": ["warn", "always"],

    "comma-dangle": ["warn", {
      "arrays": "always-multiline",
      "objects": "always-multiline",
      "imports": "always-multiline",
      "exports": "always-multiline",
      "functions": "always-multiline",
    }],

    "react/no-unused-prop-types": "warn",
    "react/prop-types": "warn",

    "react/jsx-uses-react": "error",
    "react/jsx-uses-vars": "error",
    "react/jsx-space-before-closing": "warn",
    "react/jsx-no-target-blank": "warn",
    "react/jsx-no-undef": "warn",

    "import/no-unresolved": "warn",
    "import/named": "warn",
    "import/default": "warn",
    "import/no-commonjs": "warn",
    "import/no-nodejs-modules": "warn",

  },
}


"no-unused-vars": ["warn", { "vars": "all", "args": "after-used", "ignoreRestSiblings": true }], should disable no-unused-vars warn, but it doesn't2I
(8f91e3296e6bcd99f53d61d108ffc79d0d02d9ff2017-02-23T19:33:57Z1937871:T
2017-02-21T13:32:06Z<Thank you for this issue.
I confirmed it on our online demo.†Z˙2015-07-07T09:17:34Z"2015-07-07T20:19:06Z*îI tried to write a jsdoc comment for a field, but the comment seems to be bonded to a function in its right hand expression.
On the following code, I expected the comment "Description for this.xs" is bonded to this.xs, but actually the comment seems to be bonded to x => x != null.
/**
 * Description for A.
 */
class A {
  /**
   * Description for constructor.
   * @param {object[]} xs - xs
   */
  constructor(xs) {
    /**
     * Description for this.xs;
     * @type {object[]}
     */
    this.xs = xs.filter(x => x != null);
  }
}

> eslint -v
v0.24.0
> eslint test.js --env es6 --rule "valid-jsdoc:[2,{requireReturn:false}]" --reset --no-eslintrc

Actual
test.js
  10:4  error  Missing JSDoc for parameter 'x'  valid-jsdoc

‚úñ 1 problem (1 error, 0 warnings)

Expected
No errors.2I
(49cf3fa21bfef14b577e384ecbb4e6539b3816b12015-07-07T17:21:23Z5554486:Y
2015-07-07T16:28:34ZACould be related to either eslint/espree#155 or eslint/espree#136:≤
2015-07-07T16:46:46ZôI dont think its related since the AST getting generated is correct. I verified it on my machine.
The issue is on this line https://github.com/eslint/eslint/blob/master/lib/eslint.js#L911
The second condition evaluates to true (actually it should be false) since the object being compared are not equal.
I think this check is bad as we are trying to compare 2 objects.
I think obj1 !== obj2 would always return true because javascript object comparison is not correct/perfect.
If we fix that line then the above scenario would work fine.:Ï
2015-07-07T17:15:41Z”UPDATE:
Once I removed the second check on line 911 (as mentioned above), all the unit test for all rules are passing including the scenario discussed in this issue.
Once issue gets accepted I will work on this.:ã
2015-07-08T05:58:42ZÚThank you a lot!

I think obj1 !== obj2 would always return true because javascript object comparison is not correct/perfect.

In this case, I guess the comparison becomes false for IIFE, but becomes true for functions in the argument list :)ï∂˜I2017-10-16T19:15:57Z"2017-10-22T22:05:51Z*ÂWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (template)



What changes did you make? (Give an overview)
fixes #9461
Is there anything you'd like reviewers to focus on?
is there other edge case?2J
(97251462cd699fe5f383fbaf52e121a2e6055f692017-10-22T22:05:51Z13050025:“
2017-10-16T19:27:41ZπIs the correct fix to not report the issue? Or should we instead report the issue, but don't autofix? It seems to me like we should still report, and just avoid doing an unsafe autofix.:
2017-10-16T20:02:34ZLGTM::
2017-10-22T22:06:00Z"Thanks for contributing to ESLint!¨$~˛72016-09-16T09:21:20Z"2016-09-19T20:21:19Z*¿Tell us about your environment

ESLint Version: 3.5.0
Node Version: 6.5.0
npm Version: 3.10.3

What parser (default, Babel-ESLint, etc.) are you using? "babel-eslint": "6.1.2"
Please show your full configuration:
.eslintrc.json:
{
  "parser": "babel-eslint",
  "extends": "airbnb",
  "env": {
    "node": true
  },
  "globals": {
    "emit": true,
    "doc": true
  },
  "plugins": [
      "react"
  ],
  "rules": {
    "react/require-extension": "off",
    "linebreak-style": ["error", "windows"],
    "react/jsx-sort-props": 0,
    "react/jsx-no-bind": 0,
    "comma-dangle": 0,
    "no-use-before-define": 0,
    "consistent-return": 0,
    "semi": [2, "never"],
    "quotes": ["error", "backtick"],
    "strict": 0,
    "max-len": ["error", 120, 2, {"ignoreUrls": true}],
    "no-param-reassign": ["error", { "props": false }]
  }
}
package.json:
{
  "name": "apflora",
  "version": "1.0.1",
  "description": "Aktionsplan Flora Kt. Z√ºrich Backend",
  "main": "server.js",
  "dependencies": {
    "ampersand-app": "^2.0.0",
    "async": "2.0.1",
    "dateformat": "1.0.12",
    "hapi": "15.0.3",
    "hapi-node-postgres": "4.0.1",
    "inert": "4.0.2",
    "json2csv": "3.6.3",
    "json2xls": "0.1.2",
    "lodash": "4.15.0",
    "pg": "6.1.0",
    "pg-promise": "^5.3.3",
    "request": "2.74.0",
    "underscore": "1.8.3"
  },
  "devDependencies": {
    "babel-eslint": "6.1.2",
    "code": "3.0.2",
    "del": "2.2.2",
    "eslint": "3.5.0",
    "eslint-config-airbnb": "11.1.0",
    "eslint-plugin-import": "1.15.0",
    "eslint-plugin-jsx-a11y": "2.2.2",
    "eslint-plugin-react": "6.2.1",
    "gulp": "3.9.1",
    "gulp-sftp": "0.1.5",
    "lab": "11.0.1",
    "require-dir": "0.3.0",
    "run-sequence": "1.2.2"
  },
  "scripts": {
    "start": "npm test && node startServer.js",
    "startWithoutTests": "node startServer.js",
    "predeploy": "gulp prod_clean_dist",
    "deploy": "gulp prod_copy",
    "postdeploy": "gulp prod_sftp",
    "test": "eslint src --fix && lab",
    "yolo": "npm run deploy"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/FNSKtZH/apflora_api.git"
  },
  "keywords": [
    "apflora",
    "aktionsplan",
    "flora",
    "species",
    "conservation"
  ],
  "author": "Alexander Gabriel",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/FNSKtZH/apflora/issues"
  },
  "homepage": "https://github.com/FNSKtZH/apflora"
}

What did you do? Please include the actual source code causing the issue.
I added
"quotes": ["error", "backtick"]
to .eslintrc and
eslint src --fix to the scripts in package.json
after reading this
What did you expect to happen?
' to be replaced by backtips ONLY where applicable (as like: not in 'use strict').
OR: Other rules not to complain about where --fix sets backtips.
What actually happened? Please include the actual, raw output from ESLint.
this code:
'use strict'

module.exports = (string) => {
  if (string && typeof string === `string`) {
    // does something
  }
}

produced this error:
C:\Users\alex\apflora_api\src\removeKmlNogoStrings.js
  10:35   error  Typeof comparisons should be to string literals  valid-typeof2J
(709a7344b9a779b5a0b98217babef79489c26a442016-09-19T20:21:16Z11638619:∫
2016-09-16T17:04:42Z°It seems like the bug here is that valid-typeof doesn't allow comparisons to template literals.
typeof foo === `string`
should not cause an error to be reported.:≤
2016-09-16T18:23:45ZôConfirmed in online demo with this repro:
/* eslint valid-typeof: ["error", { "requireStringLiterals": true }] */
/* eslint-env es6 */

typeof foo === `string`;
I do think this should be fixed in valid-typeof since template literals are string literals too. We would just need to check that there are no interpolations and that the content of the template literal is equal to one of the allowed string values.:°
2016-09-16T18:35:40Zà@barbalex Can you please confirm whether or not the directive 'use strict'; was also improperly converted to backticks/template literal?:∞
2016-09-16T19:16:09ZóNo, that was correctly left as 'use strict'
Am 16.09.2016 6:35 nachm. schrieb "Kevin Partington" <
notifications@github.com>:

@barbalex https://github.com/barbalex Can you please confirm whether or
not the directive 'use strict'; was also improperly converted to
backticks/template literal?
‚Äî
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
#7166 (comment), or mute
the thread
https://github.com/notifications/unsubscribe-auth/AAo4V7kKjPkmn1WGkhYNSMkjEHOlZ6f0ks5qqsVigaJpZM4J-qKq
.:!
2016-09-16T19:40:46Z	See #7168±.«√@2017-03-16T12:36:49Z"2017-03-17T22:36:00Z* Tell us about your environment

ESLint Version: 3.12.2 / 3.4.0
Node Version: 7.7.2
npm Version: 4.1.2
MacBook Pro Mid 2015.

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:
Please see https://dxr.mozilla.org/mozilla-central/source/
What did you do? Please include the actual source code causing the issue.
Run eslint on the repository, and compared the timings. For a full run on our repository, a git cinnabar checkout runs in 2m 13. For a Mercurial checkout it runs in 3m 45.
What did you expect to happen?
The repositories should take about the same time - the repository format shouldn't matter.
This seemed to be regressed in version 3.5.0 by #6844.
What actually happened? Please include the actual, raw output from ESLint.
The Mercurial has a large .hg folder (320268 files on my checkout). Whereas a git checkout has a much smaller .git folder (3857 files).
If the repository is checked out via Mercurial, then for an eslint run, the start of the debug looks like:
$ ./tools/lint/eslint/node_modules/.bin/eslint --debug .
  eslint:cli Running on files +0ms
  eslint:glob-util Creating list of files to process. +26ms
  eslint:ignored-paths Looking for ignore file in /Users/mark/dev/mozilla-central +3ms
  eslint:ignored-paths Loaded ignore file /Users/mark/dev/mozilla-central/.eslintignore +0ms
  eslint:ignored-paths Adding /Users/mark/dev/mozilla-central/.eslintignore +0ms
  eslint:cli-engine Processing /Users/mark/dev/mozilla-central/accessible/jsat/content-script.js +52s

If the repository is checked out into a git repository (via git-cinnabar), then the eslint run looks like:
$ ./tools/lint/eslint/node_modules/.bin/eslint --debug .
  eslint:cli Running on files +0ms
  eslint:glob-util Creating list of files to process. +24ms
  eslint:ignored-paths Looking for ignore file in /Users/mark/dev/gecko +3ms
  eslint:ignored-paths Loaded ignore file /Users/mark/dev/gecko/.eslintignore +0ms
  eslint:ignored-paths Adding /Users/mark/dev/gecko/.eslintignore +0ms
  eslint:cli-engine Processing /Users/mark/dev/gecko/accessible/jsat/content-script.js +7s

The +52s -> +7s is quite a big difference. If I include all the extensions that we process via --ext then this gets even worse (2m vs 12s).
#6844 enabled parsing of dot files, and enabled searching for them via GlobSync. If, as a temporary test, I change the glob options to set dot to false, then the timings are about the same for both repositories.

  
    
      eslint/lib/util/glob-util.js
    
    
         Line 167
      in
      d6150e3
    
    
    
    

        
          
           dot: true,2I
(a61c35994ae4f37e6c71f73f592ba5ea22a9ead02017-03-17T22:35:55Z4616705:´
2017-03-16T13:03:18ZíSo, use git? ¬Ø_(„ÉÑ)_/¬Ø
Just kidding :D. While we decide what to do here, I think adding '.hg' to your .eslintignore file should fix it for you.:ô
2017-03-16T13:27:21ZÄJust kidding :D. While we decide what to do here, I think adding '.hg' to your .eslintignore file should fix it for you.

So from my limited understanding of the code, I didn't think it would, however, I can confirm it does help a lot (3m40 -> 2m).
Thanks!:5
2017-03-16T13:42:55ZThe magic is here and here ;):ê
2017-03-16T13:48:58Zx@IanVS I didn't check, but it looks like #6844 changed the behaviour for hidden folders and that would be unintentional?:¿
2017-03-16T13:59:46ZßI'll need to think about it some more, but I don't think it was unintentional.  The point of the PR was to allow linting dot files/folders.
My immediate reaction is to suggest we add .git and .hg to the list of default ignored folders, the same way we ignore node_modules and bower_components.  I can't think that users would ever want to lint the files in those folders (besides, there's still an escape hatch if they do).:2
2017-03-16T16:16:30Z@IanVS Maybe .svn as well?:≥
2017-03-17T00:14:47ZöLOL, it looks like we already had this discussion.
#4828 (comment)
My understanding from that is we didn't intend to lint hidden folders by default unless explicitly passed in as targets, just to add a way to allow it. I would argue this should be the default if it's currently not.:‚
2017-03-17T02:18:39Z…I think I've figured out what's going on here, and will have a PR shortly.
As @alberto correctly pointed out, we do already ignore dotfiles and dotfolders by default.  But we aren't correctly preventing globs from traversing through dotfolders.  We had a PR a while back to improve our performance by not returning all of the files within node_modules from the glob (#6783), and this will be similar.
@Standard8 the reason that adding .hg to your ignore file improved performance is because we are preventing glob traversal through custom ignore patterns and node_modules, but not dotfolders.  ü§¶‚Äç‚ôÇÔ∏è After my PR, I would expect you to be able to remove .hg from your ignore file without a performance hit.:◊
2017-03-17T02:21:45ZæAwesome, that was my initial thought, but I was unsure why .* didn't ignore dotfolders. I guess that's a glob vs git thing?
@eslint/eslint-team I think we should try to get this into v.4.0.0:ö
2017-03-17T02:22:50ZÅIt's not a breaking change anyway, is it? We could still merge it in a patch release even if it doesn't end up going into v4.0.0.:H
2017-03-17T02:24:57Z0It changes the logic of the files we lint, so...:˘
2017-03-17T02:26:38Z‡Based on @IanVS's comment, my understanding was that we're already ignoring .hg either way -- the issue is that we're still matching globs against it, which hurts performance even though we get rid of the matches afterwards.:ï
2017-03-17T02:28:25Z}Yes, they (dotfiles) are not linted currently.  The end result will be the same, it should just be a performance improvement.:j
2017-03-17T02:35:06ZRRemoving this from the milestone because it doesn't need to go in a major release.∂Ä˘82016-10-01T19:25:15Z"2016-10-03T23:58:40Z*πWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[ ] Bug fix (template)
[ ] New rule (template)
[x] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

#7272

Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
 I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
no-implic-coercion now only makes recommendations and will not attempt to fix anything using the ~ operator.
Is there anything you'd like reviewers to focus on?
Nope2H
(cb7ba6df04060172921d85ae43b03169cb1f50462016-10-03T23:58:40Z249164:ø
2016-10-01T19:25:16Z¶@TheSavior, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @kaicataldo and @BYK to be potential reviewers.:
2016-10-01T19:25:16ZLGTM:
2016-10-01T23:51:31ZLGTMﬁ~Ä82016-09-16T19:39:43Z"2016-09-19T20:21:16Z*€	What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

See #7166 for a description of the bug.

Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
 I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
This allows valid-typeof to detect comparisons to template literals.
/* eslint valid-typeof: 2 */

typeof foo === `bad value`           // error
typeof foo === `string`              // ok
typeof foo === `str${somethingElse}` // ok
/* eslint valid-typeof: [2, {"requireStringLiterals": true}] */

typeof foo === `bad value`           // error
typeof foo === `string`              // ok
typeof foo === `str${somethingElse}` // error
Is there anything you'd like reviewers to focus on?
This is a semver-minor change, because it will cause the rule to report more errors in this case:
/* eslint valid-typeof: 2 */
typeof foo === `bad value`           // previously ok, now an error2J
(709a7344b9a779b5a0b98217babef79489c26a442016-09-19T20:21:16Z11638619: 
2016-09-16T19:39:44Z±@not-an-aardvark, thanks for your PR! By analyzing the annotation information on this pull request, we identified @iancmyers, @vitorbal and @pmcelhaney to be potential reviewers:
2016-09-16T19:39:44ZLGTM:˜
2016-09-16T19:51:37ZﬁThe CI failures appear to be unrelated, e.g.:
no-dupe-args invalid function a([ , a], [b, , a]) {}:
      AssertionError: A fatal parsing error occurred: Parsing error: Argument name clash

I think the espree release a few minutes ago caused acorn to get updated to 4.0.0, which is causing SyntaxErrors in the tests for no-dupe-args and no-redeclare.:
2016-09-17T02:27:22ZLGTMÆ&¸I2017-10-17T20:57:53Z"2017-12-08T22:19:25Z*˘What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
What changes did you make? (Give an overview)
Fixes the bug reported in #8511 . I forked from #8529 and added a check for the right-side of the value assignment
Is there anything you'd like reviewers to focus on?
Nope!2I
(256481b04d201dd01dcac5947f9ae018fde5defc2017-12-08T22:19:24Z3421197:
2017-10-17T20:57:54ZLGTM:;
2017-10-17T20:57:54Z#All committers have signed the CLA.:
2017-10-17T21:15:56ZLGTM:
2017-10-17T21:16:46ZLGTM:Ú
2017-10-17T22:10:46ZŸI'm üëç for this change - definitely seems like something the rule should catch.
I understand why this is branched off of the other PR, since it touches the same code, but I think the squashed commits will cause some issues with merging. Do we want to just combine the two PRs like was originally suggested, since they touch the same part of the code?
Thanks for updating this!
@vitorbal @platinumazure @not-an-aardvark Are you okay with closing #8529 in favor of this PR?:
2017-10-17T23:21:42ZLGTM:R
2017-10-20T01:22:03Z:Marking as accepted since #8529 had already been accepted.:m
2017-10-22T21:42:39ZURequesting a review from @not-an-aardvark since you had concerns with the initial PR.:©
2017-10-22T23:22:54ZêI've been pretty busy lately, so I'll try to review this if I get the chance, but don't let me be a blocker if others are satisfied with the PR.:
2017-10-23T23:31:04ZLGTM:
2017-10-23T23:40:57ZLGTM:ê
2017-10-26T19:12:10Z˜TSC Summary: I'm bringing this to the TSC because of the complicated history of this PR - given the number of iterations and changes that have happened since the issue was originally accepted, I figured it would be easier to have the TSC decide.
Some history: The original PR - that this now includes - was accepted as a bug fix, and during the course of the original PR author working on it, another separate (but related) bug was discovered. It sounds like there is consensus to fix this bug, however, I'm concerned about putting it behind the properties option, since it doesn't really have anything to do with properties.
TSC Question: Should this be accepted as it currently is (behind the properties option), actually be on by default (as a semver-minor bug fix, which it technically already currently is) or put behind a destructuring configuration option to make it non-breaking?:Ω
2017-10-26T23:09:47Z§TSC Resolution: The decision is to not put these changes behind the properties option and instead for it to check for these cases by default a semver-minor bug fix.:Ã
2017-12-04T00:26:38Z≥Looks like this has been updated.
@eslint/eslint-team Can we get some other eyes on this? This is a semver-minor bug fix (it will result in more errors being reported by default).:ã
2017-12-04T17:20:20Zs@platinumazure you're right, updated the comment! and thanks @kaicataldo for holding my hand through the process :)::
2017-12-08T22:19:34Z"Thanks for contributing to ESLint!:Ó
2017-12-11T17:15:07Z’Should it mark _id as wrong too?
Example:
const { _id, msg, rid } = this.props.actionMessage;

/home/circleci/repo/app/containers/MessageActions.js
  232:11  error  Identifier '_id' is not in camel case  camelcase:
2017-12-11T17:24:33Zg@rodrigok Can you make a new issue for this? These kinds of comments don't get much visibility. Thanks!:C
2017-12-11T17:36:07Z+@kaicataldo Thanks, here is the issue #9709:r
2017-12-11T17:36:11ZZ@rodrigok See #9700 for the issue reporting this, and #9701 for the PR fixing the problem.:H
2017-12-11T17:38:05Z0@j-f1 Thanks, I'll reference and close my issue.¡∂ıI2017-10-16T18:43:28Z"2017-10-22T22:05:51Z*ÅTell us about your environment

ESLint Version: 4.9.0
Node Version: 8.6.0
npm Version: 5.5.1

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:

Configuration

{
    "parserOptions": {
        "ecmaVersion": 8,
        "sourceType": "script",
        "ecmaFeatures": {}
    },
    "rules": {
        "multiline-comment-style": 2
    },
    "env": {}
}

What did you do? Please include the actual source code causing the issue.

//blah
////blah
//blah
What did you expect to happen?
It should produce a valid comment after fixing.
What actually happened? Please include the actual, raw output from ESLint.
It produces:
/*
 *blah
 *//blah
 *blah
 */
In both eslint and a browser, this produces a parsing error: Parsing error: Unterminated regular expression (Fatal) and Exception: SyntaxError: unterminated regular expression literal respectively.2J
(97251462cd699fe5f383fbaf52e121a2e6055f692017-10-22T22:05:51Z13050025:=
2017-10-16T18:53:43Z%thanks for reporting, I can repro it!»5ˆI2017-10-16T18:49:58Z"2017-10-23T00:00:10Z*¡	Tell us about your environment

ESLint Version: 4.9.0
Node Version: 8.6.0
npm Version: 5.5.1

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:

Configuration

{
    "parserOptions": {
        "ecmaVersion": 8,
        "sourceType": "script",
        "ecmaFeatures": {}
    },
    "rules": {
        "multiline-comment-style": 2
    },
    "env": {}
}

What did you do? Please include the actual source code causing the issue.

//someCommentedOutLineOfCode();

// Useful documentation about the next line
What did you expect to happen?
I expected fixing multiline-comment-style to leave two separate single-line comments.
What actually happened? Please include the actual, raw output from ESLint.
The fixer combines the two comments into:
/*
 *someCommentedOutLineOfCode();
 *Useful documentation about the next line
 */
I believe it would be useful to have an option to have the rule not flag/fix single line comments with an empty line in between them. It seems like the intent behind the rule is to combine "block" comments composed of single line comments into a single real block comment, and I think that this option would more accurately reflect that desire.2J
(2fa64b7a85658e34f634d8cda34b76dd98a935582017-10-23T00:00:09Z13050025:Ñ
2017-10-16T20:50:33ZlIMO, your proposal should be the default behavior. I don't think the current grouping behavior was intended.çÕ´B2017-04-22T08:33:44Z"2017-04-24T08:44:07Z*ÓWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#7621)



What changes did you make? (Give an overview)
Previously, the brace-style autofixer would leave any existing whitespace between tokens when removing newlines. This would result in a large amount of extra whitespace on a line when fixing indented code. Users generally don't expect indentation whitespace to be preserved inline when fixing brace styling, so this commit updates the fixer to always output a single space between tokens when removing newlines.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(aaa1a81e31c6e4db8ef33c27edc0fe1756549f732017-04-24T08:44:07Z11638619:
2017-04-22T08:33:45ZLGTM‡ê¨B2017-04-22T08:52:50Z"2017-04-24T08:59:20Z*ÛWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#7677)



What changes did you make? (Give an overview)
Previously, the no-self-compare rule would only check comparisons between identifiers and did not check comparisons between more complex expressions. (I assume this is because the APIs that would allow comparing complex expressions didn't exist yet at the time the rule was implemented.) The rule is still applicable to non-literals, so this commit updates the rule to check comparisons that aren't between literals.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(d49acc309ad69d99db1e04e971c33a69fdf657da2017-04-24T08:59:20Z11638619:À
2017-04-22T08:52:51Z≤@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @ilyavolodin, @vitorbal and @mysticatea to be potential reviewers.:
2017-04-22T08:52:51ZLGTMà'`Å92016-10-04T04:18:56Z"2016-10-10T23:56:28Z*À	What rule do you want to change?
comma-dangle
Does this change cause the rule to produce more or fewer warnings?
I guess it depends. But probably more warnings.
How will the change be implemented? (New option, new default behavior, etc.)?
New option, something like {forbidAfterRest: true}
Please provide some example code that this change will affect:
const {
  x,
  y,
  ...z
} = foo;
What does the rule currently do for this code?
When using this rule with string option "always-multiline", it will warn about missing trailing comma after ...z.
What will the rule do after it's changed?
No trailing comma after ...z will be correct, and a trailing comma will be incorrect.
Motivation:
Seems like the spec doesn't even allow that kind of trailing comma.
Babel's Babylon v6.11.3 went so far as to consider that as syntax error.

The rationale for this is that the use case for trailing comma is that you can add something at the end without affecting the line above. Since a RestProperty always has to be the last property it doesn't make sense.

Babylon v6.11.4 temporary rolled back that behavior.
So for now I guess is up to the user to choose if that trailing comma is incorrect or not with the new forbidAfterRest option.2J
(52da71e9bfcdb7f13c6077531b992d059af7391a2016-10-10T23:56:25Z11638619:∞
2016-10-04T04:28:28ZóIf having a trailing comma after a spread property is a syntax error, then there would be no point in having a separate option for it, since a parsing error would get thrown before the option had a chance to take effect.
However, we should ensure that the rule doesn't warn the user about missing trailing commas if adding the comma would result in a SyntaxError.
It seems to already do this with array spread elements:
/* eslint comma-dangle: [2, "always"] */

var [
  foo,
  ...bar // No error is reported (correct behavior)
] = baz;:Â
2016-10-04T04:38:05ZÃI was able to reproduce the issue.
Config:
{
  "rules": {
    "comma-dangle": [2, "always"]
  },
  "parserOptions": {
    "ecmaVersion": 8,
    "ecmaFeatures": {
      "experimentalObjectRestSpread": true
    }
  }
}
Code:
var {foo, ...bar} = baz;
Expected no errors, but one error was reported:
1:17  error  Missing trailing comma  comma-dangle

This should not be reported as an error, since a trailing comma after a spread rest property is a SyntaxError according to the spec. (At the moment it seems like acorn parses that successfully, which is probably a separate bug within acorn.):é
2016-10-04T04:43:16Zı@not-an-aardvark yes, this rule change proposal could be rethought as a bug report to Espree. But I was considering the Babylon case, which rolled back that SyntaxError because reported compatibility problems, making the trailing comma optional.:è
2016-10-04T04:52:30Zˆ@not-an-aardvark Understood. So we can conclude that for linting purposes there would be no option about the trailing comma after array or object rest property, it's a matter of syntax. And for now we just found a false-positive for comma-dangle.:˚
2016-10-04T04:53:26Z‚I suppose there are a few things going on here. To summarize for anyone perusing the issue:

At the moment, the spec forbids trailing commas following spread rest properties. We have no reason to believe that the spec will change in this regard before it's finalized, especially since commas are already forbidden after spread rest elements in arrays.
Acorn and Babel have slightly incorrect parsing at the moment; they don't throw errors with trailing commas after spread rest elements.
When engines implement spread rest properties, they will presumably throw a SyntaxError at runtime if they encounter a trailing comma after a spread rest property.

At the moment, the comma-dangle rule requires people to use trailing commas after spread rest properties, and it autofixes by adding commas. I think this is a significant problem, because peoples' code will be syntactically invalid according to the spec, and the code will unexpectedly break if they drop babel when engines implement spread rest properties natively.
So I think the best thing to do would be to fix the false-positive for comma-dangle, as you mentioned.:D
2016-10-04T04:56:18Z,@not-an-aardvark Sure, you're right. Thanks!:í
2016-10-06T04:46:56Z˘some more context: It was pushed out as a patch version in babylon but it "broke" react-native. It was failing on react-native's own code so the user's would have to either change node_modules or wait for react-native to update. Thus we reverted it.:‚
2016-10-06T04:51:52Z…‚Ä¶ just to clarify, trailing commas are always permitted after spreads, they're just never permitted after rests - in both iterable or object destructuring, as well as in function argument signatures.:æ
2016-10-06T04:55:13Z•Whoops, looks like I was a bit careless about that distinction when renaming the issue. (I think the fix does distinguish between rest and spread correctly, though.)¯à82016-09-17T01:25:30Z"2016-09-19T20:17:16Z*’What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
Tell us about your environment

ESLint Version: master
Node Version: 6.6.0
npm Version: 3.10.3

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:
{
  "parserOptions": {
    "ecmaVersion": 8
  }
}
What did you do? Please include the actual source code causing the issue.
/* eslint arrow-parens: [2, "always"] */

async (foo) => bar // expected no error, but an error was reported
/* eslint arrow-parens: [2, "as-needed"] */

async (foo) => bar // expected an error to be reported, but nothing was reported.
What did you expect to happen?
No errors in the first case, since the param is surrounded by parens and the option is always.
One error in the second case, since the parens are unnecessary and the option is as-needed.
What actually happened? Please include the actual, raw output from ESLint.
An error was reported in the first case:
1:1  error  Expected parentheses around arrow function argument arrow-parens

No error was reported in the second case.
Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
 I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
For context, see #7101. This updates arrow-parens to handle async arrow functions correctly.
Previously, the first parameter token (i.e. either the opening paren of the parameters, or the first parameter itself) was assumed to be the first token of the arrow function itself. However, this isn't the case with async arrow functions; the async keyword should be skipped if the function is async.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(16bb8027756859dd72012c140d49c46c7764b4e92016-09-19T20:17:15Z11638619:∆
2016-09-17T01:25:31Z≠@not-an-aardvark, thanks for your PR! By analyzing the annotation information on this pull request, we identified @nfroidure, @mysticatea and @Jxck to be potential reviewers:
2016-09-17T01:25:31ZLGTM:
2016-09-17T01:29:15ZLGTM:
2016-09-17T02:29:12ZLGTMèñá82016-09-17T00:54:48Z"2016-09-19T20:18:33Z*·What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
Tell us about your environment

ESLint Version: master
Node Version: 6.6.0
npm Version: 3.10.3

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:
{
  "parserOptions": {
    "ecmaVersion": 8
  },
  "rules": {
    "no-unused-expressions": 2
  }
}
What did you do? Please include the actual source code causing the issue.
async function foo() {
  await bar;
  return baz;
}
What did you expect to happen?
No errors, since await expressions have side-effects (simlar to yield expressions)
What actually happened? Please include the actual, raw output from ESLint.
2:3  error  Expected an assignment or function call and instead saw an expression  no-unused-expressions


Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
 I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
For context, see #7101. This updates no-unused-expressions to consider AwaitExpression nodes to have side-effects, preventing them from being reported as unused if they are actually used.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(7ea3e4ba09f1ef5857f17dc80313a1fd68dbbea52016-09-19T20:18:33Z11638619:–
2016-09-17T00:54:49Z∑@not-an-aardvark, thanks for your PR! By analyzing the annotation information on this pull request, we identified @vitorbal, @michaelficarra and @ilyavolodin to be potential reviewers:
2016-09-17T00:54:49ZLGTM:
2016-09-17T01:18:57ZLGTM:
2016-09-17T02:28:55ZLGTM‹!œ?2017-02-24T07:58:11Z"2017-02-24T19:58:17Z*What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8142)
What changes did you make? (Give an overview)
This updates RuleTester to correctly handle test cases where code is an empty string. Previously, this would either result in a test called [object Object] or throw an error, depending on the version of Mocha.
This also adds tests to assert the suite/testcase names when using RuleTester.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(1ee5c2730e52e2bad0b5131185e37fc03f29e3622017-02-24T19:58:16Z11638619:
2017-02-24T07:58:12ZLGTM:À
2017-02-24T07:58:13Z≤@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @nzakas, @mysticatea and @platinumazure to be potential reviewers.¸Ñä82016-09-17T16:16:37Z"2016-09-20T22:18:19Z*ﬁWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
Tell us about your environment

ESLint Version: master
Node Version: 6.3.0
npm Version: 3.8.9

What parser (default, Babel-ESLint, etc.) are you using?

default

Please show your full configuration:

nothing

What did you do? Please include the actual source code causing the issue.
A:
$ echo "async function a() { await (a); }" | eslint --stdin --no-eslintrc --parser-options "ecmaVersion:8" --rule "no-extra-parens:error"

B:
$ echo "async function a() { (await a)(); }" | eslint --stdin --no-eslintrc --parser-options "ecmaVersion:8" --rule "no-extra-parens:error"

What did you expect to happen?
In the case A, it should show an error: "Gratuitous parentheses around expression  no-extra-parens".
In the case B, it should not show errors.
What actually happened? Please include the actual, raw output from ESLint.
In the case A, it did not show the error.
In the case B, it showed the following errors:
<text>
  1:22  error  Gratuitous parentheses around expression  no-extra-parens

‚úñ 1 problem (1 error, 0 warnings)

Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
This PR adds the supports of await expressions into no-extra-parens.
The precedence of await expression is same as unary expressions: https://tc39.github.io/ecmascript-asyncawait/#UnaryExpression
Semver-minor: this is a bug fix which increases errors.
Is there anything you'd like reviewers to focus on?
Nothing in particular.
Refs #7101.2I
(745343ff2f2c03db8137b526b5d33b4ecd475c812016-09-20T22:18:19Z1937871:
2016-09-17T16:16:39ZLGTM˘`Ç92016-10-04T05:23:42Z"2016-10-10T23:56:25Z*ëWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7297

Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
(n/a) I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
This fixes comma-dangle to not require trailing commas after rest properties with experimentalObjectRestSpread enabled, since this is a SyntaxError according to the spec.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(52da71e9bfcdb7f13c6077531b992d059af7391a2016-10-10T23:56:25Z11638619:«
2016-10-04T05:23:44ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @alberto and @gimenete to be potential reviewers.:
2016-10-04T05:23:44ZLGTMÈ5ÉJ2017-10-18T18:27:36Z"2017-10-23T00:00:10Z*€‚Ä¶ck comment(fixes #9462)

What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (template)



What changes did you make? (Give an overview)
Is there anything you'd like reviewers to focus on?2J
(2fa64b7a85658e34f634d8cda34b76dd98a935582017-10-23T00:00:09Z13050025:P
2017-10-18T18:29:48Z8I need to add some more tests. add "do not merge" label.:
2017-10-22T23:34:11ZLGTM:
2017-10-22T23:39:55ZLGTMÒìñH2017-09-05T21:47:28Z"2017-09-08T07:43:34Z*©
Tell us about your environment

ESLint Version: 4.6.1
Node Version: 8.4.0
npm Version: 5.3.0

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

Configuration

module.exports = {
    rules: {
        no-undef: "error"
    }
};

What did you do? Please include the actual source code causing the issue.

#! eslint-disable-next-line
foo;
What did you expect to happen?
I expected an error to be reported, because eslint-disable-next-line is only supposed to work when using line comments.
What actually happened? Please include the actual, raw output from ESLint.
No error was reported, because ESLint considered the shebang to be a valid eslint-disable-next-line comment.
It looks like the issue is occurring as part of the inline comment processing here. In a previous version of ESLint, ast.comments did not contain shebangs, so it was safe for that logic to assume that all comments in the array had a type of either Block or Line. However, ast.comments now includes shebang comments (they have type Shebang), so this is no longer a safe assumption.
There are a few different ways that this could be fixed:

Filter out shebangs before doing any processing on them.
Make the logic explicitly check that a comment has type Line before assuming that it's a line comment.2J
(7ba46e6add05d1a6a6f20a45a9b8244092f4849e2017-09-08T07:43:28Z31330116:(
2017-09-06T00:03:10ZWorking on this.:Ì
2017-09-06T02:10:59Z‘I had the logic explicitly check that the comment has type "Line" before checking for a eslint-disable-next-line. Now
#! eslint-disable-next-line
foo;

is giving an error, which is what we want. Perfect, that fixed this issue.
Unfortunately, I discovered another issue with shebangs. The following code should give three errors, for lines (1), (2), and (3).
"foo;",                                          (1)
"#! eslint-disable-next-line",
"foo;",                                          (2)
"foo;"                                           (3)

On the contrary, it results in an error only for the line (2), with lines (1) and (3) not giving any errors.
Just to make sure this isn't an issue that I have introduced with my fix, I tried this test out on the original, unmodified eslint-disable-next-line code, and this bug is also present: with the unmodified eslint-disable-next-line code, this test gives no errors.
It feels like Shebangs aren't being processed properly... ?:Î
2017-09-06T02:12:51Z“Thanks for working on this!

It feels like Shebangs aren't being processed properly... ?

I think shebangs are only allowed at the start of a file -- it's considered a syntax error if they appear anywhere else.:∏
2017-09-06T02:19:04ZüHmm, I wonder why it's inadvertently disabling all errors around it (except for the error on the next line, with my fix)... I'll keep at it, see what comes up!:Œ
2017-09-06T02:20:41ZµIn general, no rules get run when a parsing error occurs, because no AST could be created. So if a file has invalid syntax, the parsing error is always the only error for that file.:∞
2017-09-06T02:23:05ZóAhh, that makes sense - thank you!
EDIT: And I think I must've misunderstood where that error being reported was coming from! Thank you for clarifying!•Yã82016-09-17T18:51:17Z"2016-09-20T22:17:03Z*àWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
Tell us about your environment

ESLint Version: master
Node Version: 6.3.0
npm Version: 3.8.9

What parser (default, Babel-ESLint, etc.) are you using?

default

Please show your full configuration:

nothing

What did you do? Please include the actual source code causing the issue.
$ echo "({async'foo'() { }})" | eslint --stdin --no-eslintrc --parser-options "ecmaVersion:8" --rule "keyword-spacing:error"

What did you expect to happen?

ESLint shows an error since there is no space preceded by the async contextual keyword.

What actually happened? Please include the actual, raw output from ESLint.

No error.

Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
 I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
This PR fixes keyword-spacing rule to handle async/await contextual keywords.
Semver-minor: this is a bug fix which increases errors.
Is there anything you'd like reviewers to focus on?
There is the discussion about which rule should handle the space of between async and function-paren: #7101 (comment)
In this PR, keyword-spacing does not handle the space since I preferred consistency #7101 (comment)2I
(462a3f74189995807c96217c644a64ee64294f8f2016-09-20T22:17:03Z1937871:
2016-09-17T18:51:18ZLGTM¸êúG2017-08-16T11:04:39Z"2017-08-19T02:50:26Z*›What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix

Tell us about your environment

ESLint Version: master
Node Version: 8.4.0
npm Version: 5.3.0

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  indent: error
What did you do? Please include the actual source code causing the issue.
function foo() {
    foo
        .bar;

    new
        .target;
}
What did you expect to happen?
I expected no errors to be reported.
What actually happened? Please include the actual, raw output from ESLint.
<text>
  6:1  error  Expected indentation of 4 spaces but found 8  indent

‚úñ 1 problem (1 error, 0 warnings)
  1 error, 0 warnings potentially fixable with the `--fix` option.



What changes did you make? (Give an overview)
This updates the indent rule to handle MetaProperty nodes in the same manner as MemberExpression nodes.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(79062f3a48fcd161bbbc9f3a5395d6a39f9081742017-08-19T02:50:25Z11638619:
2017-08-16T11:04:40ZLGTM´&H˚82016-10-02T04:34:25Z"2016-10-04T00:07:08Z*¥$Tell us about your environment

ESLint Version: 3.7.0
Node Version: 4.2.2
npm Version: 3.10.7

What parser (default, Babel-ESLint, etc.) are you using?
babel-eslint@7.0.0
Please show your full configuration:

module.exports = {
  "extends": "eslint-config-airbnb",
  "env": {
    "browser": true,
    "node": true,
    "mocha": true
  },
  "parser": "babel-eslint",
  "rules": {
    "no-unused-vars": "warn",
    "no-alert": "warn",
    "no-console": "warn",
    "no-use-before-define": "warn",
    "no-var": "warn",
    "block-scoped-var": "warn",
    "guard-for-in": "off",
    "no-shadow": "off",
    "no-param-reassign": "off",

    "indent": [ "warn", 2, { "SwitchCase": 1 } ],
    "padded-blocks": "off",
    "spaced-comment": "warn",
    "comma-dangle": [ "warn", "always-multiline" ],
    "space-in-parens": "off",
    "curly": [ "off", "all" ],
    "array-bracket-spacing": [ "warn", "always" ],
    "object-curly-spacing": [ "warn", "always" ],
    "computed-property-spacing": "off",
    "brace-style": [ "warn", "stroustrup", { "allowSingleLine": true } ],
    "no-trailing-spaces": [ "warn", { "skipBlankLines": true } ],
    "linebreak-style": [ "warn", "unix" ],
    "no-multiple-empty-lines": [ "warn", { "max": 2, "maxEOF": 1 } ],
    "eol-last": [ "error", "unix" ],
    "id-length": [ "warn", { "min": 2, "exceptions": [ "_", "$", "i", "j", "k", "x", "y", "e" ] } ],
    "camelcase": "warn",
    "func-names": "warn",
    "keyword-spacing": "warn",
    "space-before-blocks": "warn",
    "space-before-function-paren": [ "warn", { "anonymous": "always", "named": "never" } ],
    "quotes": [ "warn", "single", "avoid-escape" ],
    "no-multi-spaces": [ "warn", { "exceptions": { "VariableDeclarator": true, "ImportDeclaration": true } } ],
    "dot-notation": "off",
    "prefer-template": "off",
    "prefer-arrow-callback": "warn",
    "max-len": [ "warn", 250, 4, { "ignoreComments": true } ],
    "arrow-parens": [ "warn", "always" ],
    "arrow-body-style": "off",
    "object-shorthand": "off",
    "no-case-declarations": "warn",
    "no-nested-ternary": "off",
    "global-require": "off",
    "no-underscore-dangle": "off",
    "no-useless-concat": "off",
    "no-mixed-operators": "off",
    "no-bitwise": "off",

    "react/prop-types": "warn",
    "react/forbid-prop-types": "off",
    "react/no-unused-prop-types": "off",
    "react/react-in-jsx-scope": "error",
    "react/jsx-filename-extension": [ "warn", { "extensions": [ ".js", ".jsx" ] } ],
    "react/jsx-uses-react": "error",
    "react/jsx-uses-vars": "error",
    "react/jsx-quotes": "off",
    "react/jsx-closing-bracket-location": "warn",
    "react/jsx-space-before-closing": "warn",
    "react/jsx-curly-spacing": "off",
    "react/jsx-indent": "off",
    "react/self-closing-comp": "warn",
    "react/no-multi-comp": "off",
    "react/sort-comp": "off",
    "react/prefer-stateless-function": "warn",
    "react/no-children-prop": "off",
    "jsx-quotes": "error",
    "jsx-a11y/img-uses-alt": "off",

    "import/default": "off",
    "import/no-duplicates": "off",
    "import/named": "off",
    "import/namespace": "off",
    "import/newline-after-import": "off",
    "import/imports-first": "off",
    "import/no-unresolved": "error",
    "import/no-named-as-default": "error",
    "import/extensions": [ "warn", "always", { "": "never", "js": "never" } ],
  },
  "plugins": [
    "react",
    "import",
  ],
  "settings": {
    "import/ignore": [
      "node_modules",
      "\\.(scss|less|css)$",
    ],
    "import/resolver": {
      "node": {
        "moduleDirectory": [
          "./src",
          "./api",
          "./common",
        ],
      },
      "webpack": {
        "config": "./webpack/configForEslintImportResolver.js",
      },
    },
  },
  "globals": {
    "__SERVER_ENV__": true,
    "__DEVELOPMENT__": true,
    "__SERVER__": true,
    "__SERVER_DEVTOOLS__": true,
    "__SERVER_DISABLE_SERVERSIDE_RENDERING__": true,
    "__CLIENT__": true,
    "__CLIENT_DEVTOOLS__": true,
    "__LOCALHOST__": true,
    "__FAST_DEVELOPMENT__": true,
  },
};

What did you do? Please include the actual source code causing the issue.
Reduced test case:

let xxx; let yyy;
const zzz = [
  (xxx
    ? yyy
    : ''   // <<< reports that the comma is missing here
  )   // <<< should report the missing comma here
];
zzz.toString();  // to prevent unused variable warning in the reduced test case

What did you expect to happen?
Correct positioning of the warning (after the closing paren where the comma-dangle is expected).
What actually happened? Please include the actual, raw output from ESLint.
  5:13  warning  Missing trailing comma  comma-dangle2J
(3dcae13449fe046f1025c9c63c7b5a16b2a845d62016-10-04T00:07:05Z11638619:u
2016-10-02T04:47:51Z]I was able to reproduce this in the demo. This does seem like a bug -- thanks for the report!Ò¬Ñ82016-09-16T22:53:10Z"2016-09-19T20:21:01Z*˜What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:


Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
 I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
See #7101 for context. This is one of the rule fixes that prevents incorrect behavior now that we can support async functions.
This fix updates array-callback-return to not report async callback functions, since async functions implicitly return a Promise value.
/* eslint array-callback-return: 2 */
foo.map(async function () {}) // should not return an error
foo.map(async () => {}) // should not return an error
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(f71937af3046584fdec8cc928ed222e1f0b8f11d2016-09-19T20:21:00Z11638619:À
2016-09-16T22:53:11Z≤@not-an-aardvark, thanks for your PR! By analyzing the annotation information on this pull request, we identified @vitorbal, @mysticatea and @kaicataldo to be potential reviewers:
2016-09-16T22:53:12ZLGTM:à
2016-09-17T02:14:54ZÔThank you!
I was hovering between a bug and an enhancement.
But indeed, async functions and generators have implicit returned values. I think this is like a bug.
@not-an-aardvark in addition, could you add the check for generators as same?:
2016-09-17T02:18:40ZLGTM:>
2016-09-17T02:21:21Z&Added a check for generator functions.:É
2016-09-17T02:26:39ZkI'm going to rebase all my PRs onto master so that the tests pass (sorry about the spammy "LGTM" messages).:
2016-09-17T02:27:54ZLGTM‹ç§èH2017-09-05T05:50:50Z"2017-09-15T02:55:38Z*·ÜTell us about your environment

ESLint Version: 4.6.1
Node Version: 6.9.1
npm Version: 3.9.3

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

Configuration

{
  "env": {
    "browser": true,
    "node": true,
    "amd": true,
    "mocha": true
  },

  "rules": {
    //Possible Errors
    //The following rules point out areas where you might have made mistakes.

    "comma-dangle": [2, "always-multiline"], //disallow or enforce trailing commas (recommended)
    "no-cond-assign": [2], //disallow assignment in conditional expressions (recommended)
    "no-console": [2], //disallow use of console in the node environment (recommended)
    "no-constant-condition": [2], //disallow use of constant expressions in conditions (recommended)
    "no-control-regex": [2], //disallow control characters in regular expressions (recommended)
    "no-debugger": [2], //disallow use of debugger (recommended)
    "no-dupe-args": [2], //disallow duplicate arguments in functions (recommended)
    "no-dupe-keys": [2], //disallow duplicate keys when creating object literals (recommended)
    "no-duplicate-case": [2], //disallow a duplicate case label. (recommended)
    "no-empty-character-class": [2], //disallow the use of empty character classes in regular expressions (recommended)
    "no-empty": [2], //disallow empty statements (recommended)
    "no-ex-assign": [2], //disallow assigning to the exception in a catch block (recommended)
    "no-extra-boolean-cast": [2], //disallow double-negation boolean casts in a boolean context (recommended)
    "no-extra-parens": [2, "all", { "nestedBinaryExpressions": false }], //disallow unnecessary parentheses
    "no-extra-semi": [2], //disallow unnecessary semicolons (recommended)
    "no-func-assign": [2], //disallow overwriting functions written as function declarations (recommended)
    "no-inner-declarations": [2, "functions"], //disallow function or variable declarations in nested blocks (recommended)
    "no-invalid-regexp": [2], //disallow invalid regular expression strings in the RegExp constructor (recommended)
    "no-irregular-whitespace": [2], //disallow irregular whitespace outside of strings and comments (recommended)
    "no-negated-in-lhs": [2], //disallow negation of the left operand of an in expression (recommended)
    "no-obj-calls": [2], //disallow the use of object properties of the global object (Math and JSON) as functions (recommended)
    "no-prototype-builtins": [0], //Disallow use of Object.prototypes builtins directly
    "no-regex-spaces": [2], //disallow multiple spaces in a regular expression literal (recommended)
    "no-sparse-arrays": [2], //disallow sparse arrays (recommended)
    "no-unexpected-multiline": [2], //Avoid code that looks like two expressions but is actually one
    "no-unreachable": [2], //disallow unreachable statements after a return, throw, continue, or break statement (recommended)
    "no-unsafe-finally": [2], //disallow control flow statements in finally blocks
    "use-isnan": [2], //disallow comparisons with the value NaN (recommended)
    "valid-jsdoc": [2], //Ensure JSDoc comments are valid
    "valid-typeof": [2], //Ensure that the results of typeof are compared against a valid string (recommended)

    //Best Practices
    //These are rules designed to prevent you from making mistakes. They either prescribe a better way of doing something or help you avoid footguns.

    "accessor-pairs": [0], //Enforces getter/setter pairs in objects
    "array-callback-return": [0], //Enforces return statements in callbacks of array's methods
    "block-scoped-var": [2], //treat var statements as if they were block scoped
    "complexity": [0], //specify the maximum cyclomatic complexity allowed in a program
    "consistent-return": [2], //require return statements to either always or never specify values
    "curly": [2], //specify curly brace conventions for all control statements
    "default-case": [2], //require default case in switch statements
    "dot-notation": [2], //encourages use of dot notation whenever possible
    "dot-location": [2, "property"], //enforces consistent newlines before or after dots
    "eqeqeq": [2, "smart"], //require the use of === and !== (fixable)
    "guard-for-in": [0], //make sure for-in loops have an if statement
    "no-alert": [2], //disallow the use of alert, confirm, and prompt
    "no-caller": [2], //disallow use of arguments.caller or arguments.callee
    "no-case-declarations": [2], //disallow lexical declarations in case clauses
    "no-div-regex": [2], //disallow division operators explicitly at beginning of regular expression
    "no-else-return": [0], //disallow else after a return in an if
    "no-empty-function": [2], //disallow use of empty functions
    "no-empty-pattern": [2], //disallow use of empty destructuring patterns
    "no-eq-null": [0], //disallow comparisons to null without a type-checking operator
    "no-eval": [2], //disallow use of eval()
    "no-extend-native": [2], //disallow adding to native types
    "no-extra-bind": [2], //disallow unnecessary function binding
    "no-extra-label": [2], //disallow unnecessary labels
    "no-fallthrough": [2], //disallow fallthrough of case statements (recommended)
    "no-floating-decimal": [2], //disallow the use of leading or trailing decimal points in numeric literals
    "no-implicit-coercion": [0], //disallow the type conversions with shorter notations
    "no-implicit-globals": [2], //disallow var and named functions in global scope
    "no-implied-eval": [2], //disallow use of eval()-like methods
    "no-invalid-this": [2], //disallow this keywords outside of classes or class-like objects
    "no-iterator": [2], //disallow usage of __iterator__ property
    "no-labels": [2], //disallow use of labeled statements
    "no-lone-blocks": [2], //disallow unnecessary nested blocks
    "no-loop-func": [2], //disallow creation of functions within loops
    "no-magic-numbers": [0], //disallow the use of magic numbers
    "no-multi-spaces": [0], //disallow use of multiple spaces
    "no-multi-str": [2], //disallow use of multiline strings
    "no-native-reassign": [0], //disallow reassignments of native objects
    "no-new": [0], //disallow use of the new operator when not part of an assignment or comparison
    "no-new-func": [2], //disallow use of new operator for Function object
    "no-new-wrappers": [2], //disallows creating new instances of String,Number, and Boolean
    "no-octal": [2], //disallow use of octal literals (recommended)
    "no-octal-escape": [2], //disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-param-reassign": [2], //disallow reassignment of function parameters
    "no-proto": [2], //disallow usage of __proto__ property
    "no-redeclare": [2], //disallow declaring the same variable more than once (recommended)
    "no-return-assign": [2], //disallow use of assignment in return statement
    "no-script-url": [2], //disallow use of javascript urls.
    "no-self-assign": [2], //disallow assignments where both sides are exactly the same
    "no-self-compare": [1], //disallow comparisons where both sides are exactly the same
    "no-sequences": [2], //disallow use of the comma operator
    "no-throw-literal": [2], //restrict what can be thrown as an exception
    "no-unmodified-loop-condition": [2], //disallow unmodified conditions of loops
    "no-unused-expressions": [2], //disallow usage of expressions in statement position
    "no-unused-labels": [2], //disallow unused labels
    "no-useless-call": [2], //disallow unnecessary .call() and .apply()
    "no-useless-concat": [2], //disallow unnecessary concatenation of literals or template literals
    "no-useless-escape": [2], //disallow unnecessary escape characters
    "no-void": [0], //disallow use of the void operator
    "no-warning-comments": [0], //disallow usage of configurable warning terms in comments //e.g. TODO or FIXME
    "no-with": [0], //disallow use of the with statement
    "radix": [0], //require use of the second argument for parseInt()
    "vars-on-top": [0], //require declaration of all vars at the top of their containing scope
    "wrap-iife": [2, "inside"], //require immediate function invocation to be wrapped in parentheses
    "yoda": [2], //require or disallow Yoda conditions

    //Strict Mode
    //These rules relate to using strict mode.

    "strict": [0], //controls location of Use Strict Directives

    //Variables
    //These rules have to do with variable declarations.

    "init-declarations": [0], //enforce or disallow variable initializations at definition
    "no-catch-shadow": [2], //disallow the catch clause parameter name being the same as a variable in the outer scope
    "no-delete-var": [2], //disallow deletion of variables (recommended)
    "no-label-var": [2], //disallow labels that share a name with a variable
    "no-restricted-globals": [0], //disallow specified global variables
    "no-shadow": [2], //disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": [2], //disallow shadowing of names such as arguments
    "no-undef": [2], //disallow use of undeclared variables unless mentioned in a /*global */ block (recommended)
    "no-undef-init": [2], //disallow use of undefined when initializing variables
    "no-undefined": [0], //disallow use of undefined variable
    "no-unused-vars": [2], //disallow declaration of variables that are not used in the code (recommended)
    "no-use-before-define": [2], //disallow use of variables before they are defined

    //Node.js and CommonJS
    //These rules are specific to JavaScript running on Node.js or using CommonJS in the browser.

    "callback-return": [1], //enforce return after a callback
    "global-require": [1], //disallow require() outside of the top-level module scope
    "handle-callback-err": [1], //enforce error handling in callbacks
    "no-mixed-requires": [1], //disallow mixing regular variable and require declarations
    "no-new-require": [1], //disallow use of new operator with the require function
    "no-path-concat": [1], //disallow string concatenation with __dirname and __filename
    "no-process-env": [2], //disallow use of process.env
    "no-process-exit": [1], //disallow process.exit()
    "no-restricted-modules": [1], //restrict usage of specified node modules
    "no-sync": [1], //disallow use of synchronous methods

    //Stylistic Issues
    //These rules are purely matters of style and are quite subjective.

    "array-bracket-spacing": [2, "never"], //enforce spacing inside array brackets
    "block-spacing": [2, "always"], //disallow or enforce spaces inside of single line blocks
    "brace-style": [2], //enforce one true brace style
    "camelcase": [2], //require camel case names
    "comma-spacing": [2], //enforce spacing before and after comma
    "comma-style": [2], //enforce one true comma style
    "computed-property-spacing": [2], //require or disallow padding inside computed properties
    "consistent-this": [2, "self"], //enforce consistent naming when capturing the current execution context
    "eol-last": [2], //enforce newline at the end of file, with no multiple empty lines
    "func-names": [0], //require function expressions to have a name
    "func-style": [0], //enforce use of function declarations or expressions
    "id-blacklist": [2], //blacklist certain identifiers to prevent them being used
    "id-length": [0], //this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
    "id-match": [0], //require identifiers to match the provided regular expression
    "indent": [2, 2], //specify tab or space width for your code
    "jsx-quotes": [2, "prefer-double"], //specify whether double or single quotes should be used in JSX attributes
    "key-spacing": [2], //enforce spacing between keys and values in object literal properties
    "keyword-spacing": [2], //enforce spacing before and after keywords
    "linebreak-style": [0], //disallow mixed 'LF' and 'CRLF' as linebreaks
    "lines-around-comment": [0], //enforce empty lines around comments
    "max-depth": [0], //enforce a maximum depth that blocks can be nested
    "max-len": [0], //enforce a maximum line length
    "max-lines": [0], //enforce a maximum depth that callbacks can be nested
    "max-nested-callbacks": [0], //enforce a maximum depth that callbacks can be nested
    "max-params": [0], //enforce a maximum number of parameters in function definitions
    "max-statements": [0], //enforce a maximum number of statements allowed in function blocks
    "max-statements-per-line": [0, {
      "max": 2
    }], //enforce a maximum number of statements allowed per line
    "new-cap": [2], //require a capital letter for constructors
    "new-parens": [2], //disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var": [2], //require or disallow an empty newline after variable declarations
    "newline-before-return": [0], //require an empty line before return statements
    "newline-per-chained-call": [0], //enforce newline after each call when chaining the calls
    "no-array-constructor": [2], //disallow use of the Array constructor
    "no-bitwise": [2], //disallow bitwise operators
    "no-continue": [2], //disallow use of the continue statement
    "no-inline-comments": [0], //disallow comments inline after code
    "no-lonely-if": [2], //disallow if as the only statement in an else block
    "no-mixed-operators": [2], //disallow mixes of different operators
    "no-mixed-spaces-and-tabs": [2], //disallow mixed spaces and tabs for indentation (recommended)
    "no-multiple-empty-lines": [2], //disallow multiple empty lines
    "no-nested-ternary": [2], //disallow nested ternary expressions
    "no-negated-condition": [2], //disallow negated conditions
    "no-new-object": [2], //disallow the use of the Object constructor
    "no-plusplus": [0], //disallow the unary operators ++ and --
    "no-restricted-syntax": [2], //disallow use of certain syntax in code
    "no-spaced-func": [2], //disallow space between function identifier and application
    "no-ternary": [0], //disallow the use of ternary operators
    "no-trailing-spaces": [2], //disallow trailing whitespace at the end of lines
    "no-underscore-dangle": [0], //disallow dangling underscores in identifiers
    "no-unneeded-ternary": [2], //disallow the use of ternary operators when a simpler alternative exists
    "no-whitespace-before-property": [2], //disallow whitespace before properties
    "object-curly-newline": [0], //require or disallow line breaks inside braces
    "object-curly-spacing": [0], //require or disallow padding inside curly braces
    "object-property-newline": [2, {
      "allowMultiplePropertiesPerLine": true
    }], //enforce placing object properties on separate lines
    "one-var": [0], //require or disallow one variable declaration per function
    "one-var-declaration-per-line": [2, "always"], //require or disallow an newline around variable declarations
    "operator-assignment": [0], //require assignment operator shorthand where possible or prohibit it entirely
    "operator-linebreak": [2, "after"], //enforce operators to be placed before or after line breaks
    "padded-blocks": [0], //enforce padding within blocks
    "quote-props": [0], //require quotes around object literal property names
    "quotes": [2, "single"], //specify whether backticks, double or single quotes should be used (fixable)
    "require-jsdoc": [0], //Require JSDoc comment
    "semi-spacing": [2], //enforce spacing before and after semicolons
    "sort-imports": [0], //sort import declarations within module
    "semi": [2, "always"], //require or disallow use of semicolons instead of ASI (fixable)
    "sort-vars": [0], //sort variables within the same declaration block
    "space-before-blocks": [2], //require or disallow a space before blocks
    "space-before-function-paren": [0], //require or disallow a space before function opening parenthesis
    "space-in-parens": [0], //require or disallow spaces inside parentheses
    "space-infix-ops": [2], //require spaces around operators
    "space-unary-ops": [2], //require or disallow spaces before/after unary operators
    "spaced-comment": [0], //require or disallow a space immediately following the // or /* in a comment
    "wrap-regex": [2], //require regex literals to be wrapped in parentheses

  }

}




What did you do? Please include the actual source code causing the issue.
Auto fix no-undef-init which changes behavior of code

function fun() {
  for (var p in [0, 1, 2]) {
    var selected = undefined; // auto fix will remove `= undefined`

    for (var i in [0, 1, 2]) {
      if (!selected) {
        console.log('selected');
      }
      selected = i;
    }
  }
}

fun();

What did you expect to happen?
Auto fix should not fix this part as it changes behavior of code.
What actually happened? Please include the actual, raw output from ESLint.
Before fix, the code logs 3 times 'selected'; after fix, the code only logs 1 time.2I
(e220687fa58a09a51eaa09815788638f94babea62017-09-15T02:55:28Z3211873:≥
2017-09-05T06:15:13ZöI think I see the problem- the declaration is in a loop, so there is actually a reinitializion going on which the autofix removes.
Simple fix is to just remove the autofix functionality. Less simple is to avoid autofixing when the variable declaration is in a loop of any kind. Honestly, we've removed autofix for less in other rules, so I would be okay with removing it here.
@eslint/eslint-team Any thoughts?:¡
2017-09-05T06:22:15Z®Would it work to remove the autofix for var declarations, but keep it for let? I don't think let variables can be redeclared like that.
One solution would be to use code path analysis to check whether a declaration can ever be reached twice, but that might not be worth the implementation effort.Ω!Œ?2017-02-24T07:21:42Z"2017-02-24T19:58:21Z*ΩTell us about your environment

ESLint Version: master
Node Version: 7.6.0
npm Version: 4.1.2

What did you do? Please include the actual source code causing the issue.

new RuleTester().run('foo', someRule, {
  valid: [
    {
      code: ''
    }
  ],
  invalid: []
});
What did you expect to happen?
I expected the tests to run as usual, with an empty string as the test name.
What actually happened? Please include the actual, raw output from ESLint.
When using mocha 3, an error is thrown:
/path/to/node_modules/mocha/lib/test.js:26
    throw new Error('Test `title` should be a "string" but "' + typeof title + '" was given instead.');
    ^

Error: Test `title` should be a "string" but "object" was given instead.
    at new Test (/path/to/node_modules/mocha/lib/test.js:26:11)
    at Function.context.it.context.specify (/path/to/node_modules/mocha/lib/interfaces/bdd.js:86:18)
    at test.valid.forEach.valid (path/to/node_modules/eslint/lib/testers/rule-tester.js:492:32)
    at Array.forEach (native)
    at Suite.RuleTester.describe (path/to/node_modules/eslint/lib/testers/rule-tester.js:491:28)
    at Object.create (/path/to/node_modules/mocha/lib/interfaces/common.js:114:19)
    at Function.context.describe.context.context (/path/to/node_modules/mocha/lib/interfaces/bdd.js:44:27)
    at Suite.RuleTester.describe (path/to/node_modules/eslint/lib/testers/rule-tester.js:490:24)
    at Object.create (/path/to/node_modules/mocha/lib/interfaces/common.js:114:19)
    at Function.context.describe.context.context (/path/to/node_modules/mocha/lib/interfaces/bdd.js:44:27)
    at RuleTester.run (path/to/node_modules/eslint/lib/testers/rule-tester.js:489:20)
    at Object.<anonymous> (path/to/tests/lib/rules/consistent-output.js:22:12)
    at Module._compile (module.js:571:32)
    at Object.Module._extensions..js (module.js:580:10)
    at Module.load (module.js:488:32)
    at tryModuleLoad (module.js:447:12)
    at Function.Module._load (module.js:439:3)
    at Module.require (module.js:498:17)
    at require (internal/module.js:20:19)
    at /path/to/node_modules/mocha/lib/mocha.js:222:27
    at Array.forEach (native)
    at Mocha.loadFiles (/path/to/node_modules/mocha/lib/mocha.js:219:14)
    at Mocha.run (/path/to/node_modules/mocha/lib/mocha.js:487:10)
    at Object.<anonymous> (/path/to/node_modules/mocha/bin/_mocha:459:18)
    at Module._compile (module.js:571:32)
    at Object.Module._extensions..js (module.js:580:10)
    at Module.load (module.js:488:32)
    at tryModuleLoad (module.js:447:12)
    at Function.Module._load (module.js:439:3)
    at Module.runMain (module.js:605:10)
    at run (bootstrap_node.js:422:7)
    at startup (bootstrap_node.js:143:9)
    at bootstrap_node.js:537:3

When using mocha 2, no error is thrown, but the test case is called [object Object].
  foo
    valid
      ‚úì [object Object]


  1 passing (11ms)2J
(1ee5c2730e52e2bad0b5131185e37fc03f29e3622017-02-24T19:58:16Z11638619˝H¸82016-10-02T05:15:29Z"2016-10-04T00:07:05Z*ØWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
See #7291

Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
(n/a) I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
Previously, comma-dangle would report the location of the last node in an array/object if a trailing comma was missing. As a result, the error would sometimes be reported on the wrong line if the node was parenthesized.
This PR fixes the error location; now it always reports the location of the token before the closing ] or }.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(3dcae13449fe046f1025c9c63c7b5a16b2a845d62016-10-04T00:07:05Z11638619:
2016-10-02T05:15:30ZLGTM:ƒ
2016-10-02T05:15:30Z´@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @nzakas, @keithamus and @alberto to be potential reviewers.:C
2016-10-02T15:51:46Z+What will this do to auto-fix, if anything?:É
2016-10-02T17:35:35ZkI don't think it will have any effect on auto-fixing, since the same fixer function is returned either way.:∞
2016-10-02T19:04:32ZóCould you add some regression test cases for the examples that would trigger the bug? Here is a couple that come to mind:
        {
            code: "var zzz = [\n(xxx\n? yyy\n: ''\n)\n];",
            output: "var zzz = [\n(xxx\n? yyy\n: ''\n),\n];",
            options: [ "always" ],
            errors: [
                {
                    message: "Missing trailing comma.",
                    type: "ConditionalExpression",
                    line: 5,
                    column: 2
                }
            ]
        },
        {
            code: "var zzz = [\n(\n'zzz'\n)\n];",
            output: "var zzz = [\n(\n'zzz'\n),\n];",
            options: [ "always" ],
            errors: [
                {
                    message: "Missing trailing comma.",
                    type: "Literal",
                    line: 4,
                    column: 2
                }
            ]
        },:
2016-10-02T19:20:28ZLGTM:¢
2016-10-02T19:21:54ZâI updated the PR to avoid modifying the location for existing test cases, and added some new ones with penultimateToken.loc.end reported.:
2016-10-03T04:25:48ZLGTM:c
2016-10-04T00:07:34ZKSorry, didn't mean to delete your branch - habit from merging my own PRs...:#
2016-10-04T00:53:22ZYay thanks!„B¬/2016-05-04T16:12:32Z"2016-05-04T17:09:49Z*Â
In short:
It is not possible to apply no-sequences rule in return part of arrow function in form
 =>  where  is  because this object literal must be enclosed in parentheses.
Example:
I have this bad piece of code and want no-sequences rule to warn me about:
export default injectIntl(connect(state => ({
  auth: state.auth,
}, { // <-- BAD
  login,
}))(LoginForm));
no-sequences rule is not designed for this situation.
Correct code should be:
export default injectIntl(connect(state => ({
  auth: state.auth,
}), {
  login,
})(LoginForm));
Sadly, both samples executes and both without lint warnings.
Rule no-sequences is not applied if comma expression is explicitly enclosed in parentheses.
But it is also impossible to write arrow function returning object without enclosing it into parenthese so no-sequences rule is not usable in this case.
Proposed Solution
If there is arrow (e.g. (arg) => ({result: arg})), no-sequences rule can be enabled in result expression (this is {result: arg} inside parentheses)
So it can report if it spot (arg) => ({result: arg}, {foo: 123})
The rule is not fired because of this on line 95 of the no-sequences rule:
if (isParenthesised(node)) {
    return;
}
Should be changed to something similar to:
if (isParenthesised(node) && !isArrowFunctionReturnExpression(node)) {
    return;
}
Thanks to @pedrottimark and @vitorbal for help on Gitter.2I
(388d6f812d46f8ea255020d466d57c3c59b32cf22016-05-04T17:09:49Z1937871:ù
2016-05-04T16:14:48ZÑFWIW, here's another simplified example where I would expect a warning, but don't get one:
state => ({ foo: 'foo' }, { bar: 'bar' }):E
2016-05-04T16:16:10Z-@vitorbal Thanks, I don't write this? lol :-):]
2016-05-04T16:22:00ZEah, you did :) missed it in the Proposed Solution section, sorry üòÑ:b
2016-05-04T16:22:00ZJThank you for this issue.
I confirmed it on the online demo.

I'll fix it.:¥
2016-05-04T16:24:35ZõOops, I selected "enhancement" when I meant "evaluating". Sorry about that. Thanks @mysticatea for confirming the bug and for getting the labels right üòÑ:Y
2016-05-04T16:32:52ZA@platinumazure labels were added at the same time completely üòÑ:€
2016-05-04T16:36:24Z¬I'm expecting this behavior:
state => ({ foo: 'foo' },  { bar: 'bar' }); // bad
state => (({ foo: 'foo' },  { bar: 'bar' })); // good, but useless :-)
state => (bar,  foo); // good
state => { foo: 'foo' }; // foo is label in function body, function returns undefined...
state => { foo: 'foo', bar: 'bar' }; // syntax error:
2016-05-04T16:41:05Z◊state => ({ foo: 'foo' },  { bar: 'bar' }); // bad
state => (({ foo: 'foo' },  { bar: 'bar' })); // good
state => (bar,  foo); // bad
state => ((bar,  foo)); // good

state => bar, foo // this is (state => bar), foo:7
2016-05-04T16:42:34ZOk @mysticatea makes sense üëç:7
2016-05-04T16:44:08ZYou are blazingly fast! Thanks!ê£≈/2016-05-04T23:05:48Z"2016-05-13T15:31:58Z*π
What version of ESLint are you using?
2.3.0 or later (any version including 13c7c19).
What parser (default, Babel-ESLint, etc.) are you using?
Default
Please show your full configuration:
rules:
  consistent-return: 2
What did you do? Please include the actual source code causing the issue.
function _doSomething(condition) {
    if (condition) {
        return true;
    }
}
What did you expect to happen?
  1:10  error  Expected to return a value at the end of this function  consistent-return

What actually happened? Please include the actual, raw output from ESLint.
No output is produced.
This is an unintended result of my change in #5398 which excludes functions which pass isES5Constructor.  The logic in isES5Constructor checks that the first character of the function name is invariant under .toLocaleUpperCase, which includes both upper-case and caseless characters (including punctuation).  This is especially unfortunate since _ is commonly used to indicate semi-private methods.
I suggest excluding _ (and maybe $) from isES5Constructor.  In the cases where a constructor begins with these characters, the user can add inline config to disable consistent-return and no-invalid-this as needed.  If that sounds agreeable, I'll work up a PR.
Thoughts?
CC: @ilyavolodin, @mysticatea, @nzakas since you guys helped with #5398.2H
(e13e6961b9ff6b2847f9a8753154e28ccfeda37b2016-05-13T15:31:58Z336433:õ
2016-05-04T23:26:30ZÇThat definitely sounds like a bug, I just wonder if the better fix is upstream to the esutil package rather than fixing in ESLint.:Ò
2016-05-04T23:44:09ZÿThat's a good thought.  It seems like most of the current functions in esutils are objective while isES5Constructor is a bit more subjective and convention-based.  If that's ok, it sounds like a good place to fix it.:û
2016-05-04T23:51:02ZÖYeah, I'd say start there and see where you get. We can leave this open to track it on our side until we know what's going to happen.:ú
2016-05-05T16:58:56ZÉSorry, I misunderstood the code. isES5Constructor doesn't come from another package, it comes from us, so we should just update it.:O
2016-05-05T17:52:24Z7No worries.  That sounds good.  I'll send a PR shortly.:3
2016-05-05T19:41:41ZWow, good catch!
Thank you!’XÖ82016-09-16T23:13:02Z"2016-09-19T20:20:49Z*»What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
 I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
See #7101 for context. This allows the fixer for prefer-arrow-callback to emit async arrow functions. At the moment the fixer always emits regular arrow functions, which can lead to incorrect code now that the parser supports async functions.
/* eslint prefer-arrow-callback: 2 */

foo(async function (bar, baz) { return qux; });

// should get fixed to:

foo(async (bar, baz) => { return qux; });

// but at the moment it just gets fixed to this (incorrect):

foo((bar, baz) => { return qux; });
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(461b015ea8e4109b22be77d271b1c96f341693102016-09-19T20:20:49Z11638619:
2016-09-16T23:13:03ZLGTM:Œ
2016-09-16T23:13:03Zµ@not-an-aardvark, thanks for your PR! By analyzing the annotation information on this pull request, we identified @mysticatea, @vitorbal and @platinumazure to be potential reviewers:
2016-09-17T02:28:19ZLGTMÑ≤—/2016-05-06T09:53:39Z"2016-05-14T17:17:56Z*÷What version of ESLint are you using?
master branch.
What parser (default, Babel-ESLint, etc.) are you using?
default.
Please show your full configuration:
nothing.
What did you do? Please include the actual source code causing the issue.
/**
 * @param {string} a - a.
 * @param {object} [obj] - obj.
 * @param {string} obj.b - b.
 * @param {string} obj.c - c.
 * @returns {void}
 */
function foo(a, {b, c} = {}) {
    // empty
}
> eslint test.js --env es6 --rule valid-jsdoc:2 --no-ignore --no-eslintrc

C:\Users\starc\Documents\GitHub\eslint\test.js
  1:1  error  Expected JSDoc for 'undefined' but found 'obj'  valid-jsdoc

‚úñ 1 problem (1 error, 0 warnings)


What did you expect to happen?
No error.
What actually happened? Please include the actual, raw output from ESLint.
  1:1  error  Expected JSDoc for 'undefined' but found 'obj'  valid-jsdoc2I
(9397135f07a8f0aa6329a9e9b952d28614d0645b2016-05-14T17:17:56Z1937871:,
2016-05-14T12:07:02ZI'm working on this.±˘¨F2017-07-25T18:59:31Z"2017-08-01T09:54:43Z*ÊWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (template)



What changes did you make? (Give an overview)
fixes #8919 #8919 (comment)
Is there anything you'd like reviewers to focus on?
the currently fix is not decent. I think there should be an easier way to check the AST node structure that I didn't know (like selector).2J
(c794f86ee9c83cb08c18e093c00af1debf7e69532017-08-01T09:54:43Z13050025:±
2017-07-25T18:59:35Zò@Aladdin-ADD, thanks for your PR! By analyzing the history of the files in this pull request, we identified @not-an-aardvark to be a potential reviewer.:
2017-07-25T18:59:35ZLGTM:
2017-07-25T19:04:22ZLGTM:
2017-07-25T19:09:39ZLGTM:
2017-07-26T11:59:36ZLGTM:
2017-07-27T00:24:29ZLGTMÖ
º·>2017-02-07T01:11:58Z"2017-02-07T07:16:27Z*ÅWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 7.5.0
npm Version: 4.1.2

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  semi-spacing: error
parserOptions:
  sourceType: module
What did you do? Please include the actual source code causing the issue.
import foo from 'bar' ;
export {foo} ;
What did you expect to happen?
I expected errors to be reported because there is space before the semicolons.
What actually happened? Please include the actual, raw output from ESLint.
No errors were reported.
What changes did you make? (Give an overview)
This updates semi-spacing to check the semicolon spacing for ImportDeclaration and ExportNamedDeclaration nodes.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(f47fb9827746940808c47a7374826ff3a4f57c912017-02-07T07:16:27Z11638619:ƒ
2017-02-07T01:11:59Z´@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @lo1tuma, @vitorbal and @alberto to be potential reviewers.:
2017-02-07T01:11:59ZLGTM:
2017-02-07T06:37:51ZLGTMì_üH2017-09-07T02:46:53Z"2017-09-09T05:55:06Z*≈What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:



What changes did you make? (Give an overview)
For codeframe.js and stylish.js, I checked if the reported messages end with a " ." - if they do, the " ." is kept in the output. For "."s that aren't preceded by a space, the "." is removed in the output (how all "."s were handled by codeframe.js and stylish.js originally). I also added tests for the new behaviour.
Is there anything you'd like reviewers to focus on?
N/A2J
(51132d6a0729b8e54326e9b8f5c8c1f487c8bd312017-09-09T05:55:05Z31330116:
2017-09-07T02:46:55ZLGTM:…
2017-09-07T02:46:55Z∞@i-ron-y, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @sindresorhus and @not-an-aardvark to be potential reviewers.:Ï
2017-09-07T06:45:16Z”Hmm... I just tried it out and message.message.replace(/[^ ]\.$/, "") seems to be replacing both the character that precedes the full stop and the full stop with "". So "Unexpected foo." becomes "Unexpected fo".:ﬁ
2017-09-07T06:49:09Z≈Oops, you're right. I think something like this would work:
message.message.replace(/([^ ])\.$/, "$1")
Alternatively, instead of using .search you could use endsWith:
message.message.endsWith(" ."):ñ
2017-09-07T07:05:14Z~That regex works perfectly, thank you so much!
Is it okay if I commit again with the sleeker code incorporating your solution?:)
2017-09-07T07:10:58ZSure, fine by me.:
2017-09-07T07:54:06ZLGTM:0
2017-09-09T05:55:12ZThanks for contributing!Ûã¶G2017-08-18T17:26:20Z"2017-09-10T20:03:46Z*ÃESLint Version: 4.4.1
Node Version: 8.2.1
npm Version: 5.3.0

What parser (default, Babel-ESLint, etc.) are you using? default
What did you do? Please include the actual source code causing the issue.
../node_modules/.bin/eslint --no-eslintrc no-invalid-this-test.js 

no-invalid-this-test.js file contents:
/*eslint no-invalid-this: "error"*/
/*eslint-env es6*/

let o = {
    name: "O name",
    f: function() {
        console.log(this.name)
    }
};

o.f = ((func, arg) => function() {
    console.log('Executing wrapper with arg ' + arg);
    func.call(this);
})(o.f, 'blah');

o.f();
What did you expect to happen?
No error.
What actually happened? Please include the actual, raw output from ESLint.
/Users/vitaly/Work/n/build/no-invalid-this-test.js
  13:15  error  Unexpected 'this'  no-invalid-this

‚úñ 1 problem (1 error, 0 warnings)2I
(7685fed33b15763ee3cf7dbe1facfc5ba85173f32017-09-10T20:03:45Z1937871:“
2017-08-18T18:47:17ZπThanks for the report. However, this is working as intended -- the rule documentation defines what it means for a use of this to be "valid", and your code does not meet that definition.:Ë
2017-08-18T18:55:58ZœBut this doesn't give an error:
/*eslint no-invalid-this: "error"*/
/*eslint-env es6*/

let o = {
    name: "O name",
    f: function() {
        console.log(this.name)
    }
};

o.f = ((func, arg) => {return function() {
    console.log('Executing wrapper with arg ' + arg);
    func.call(this);
}})(o.f, 'blah');

o.f();
diff lines:
--- o.f = ((func, arg) => function() {
+++ o.f = ((func, arg) => {return function() {
--- })(o.f, 'blah');
+++ }})(o.f, 'blah');:‰
2017-08-23T06:43:06ZÀHmm, it looks like there's some special logic being used for return statements to check for method assignments (relevant code). We should probably update that to check for arrow function returns as well.“Â>2017-02-07T18:11:41Z"2017-02-09T23:03:24Z*øWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:



What changes did you make? (Give an overview)
As outlined in #7977, autofixing is not performed when:

Boolean is called with more than one argument.
Boolean is called with a spread element as the first argument.

And !Boolean() now autofixed to true.
Is there anything you'd like reviewers to focus on?
I'm a bit unsure if the autofixing logic for !Boolean() is solid enough, an extra set of eyes is appreciated!2H
(16248e2aff3d0a706c955f1fa811a2aefba696972017-02-09T23:03:24Z567607:¬
2017-02-07T18:11:42Z©@jwilsson, thanks for your PR! By analyzing the history of the files in this pull request, we identified @btmills, @Met48 and @not-an-aardvark to be potential reviewers.:
2017-02-07T18:11:43ZLGTM:0
2017-02-09T23:03:36ZThanks for contributing!–ú◊@2017-03-18T02:56:46Z"2017-03-20T15:11:50Z*≤Tell us about your environment

ESLint Version: 3.18
Node Version: 7.7.3

What parser (default, Babel-ESLint, etc.) are you using? default
What did you do? Please include the actual source code causing the issue.

/* eslint no-param-reassign: ["error", {"props": true}] */

const { hasOwnProperty: has } = Object.prototype;
module.exports.hasDeepProperty = (obj, propertyPath) => {
  if (!obj) return false;

  const properties = propertyPath.split('.');
  let o = obj;
  return !properties.some((propertyName) => {
    if (!has.call(o, propertyName)) return true;
    ({ [propertyName]: o } = o);
    return false;
  });
};
What did you expect to happen?
Nothing, no errors
What actually happened? Please include the actual, raw output from ESLint.
no-param-reassign thinks I'm reassigning propertyName at destruction2J
(ddc6350a932a8dfb8a6d6fff8a652c15d295f1582017-03-20T15:11:44Z11638619:ö
2017-03-18T03:03:08ZÅI can reproduce this, thanks for the report.
I've edited the issue to include the configuration that causes this issue to appear.øßôI2017-09-29T02:39:56Z"2017-10-06T06:23:50Z*†Fixes #9211
What is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix



What changes did you make? (Give an overview)
Added another case for requiring line breaks. This is when an array contains only a comment and spans multiple lines. Before it failed on this as it did not recognise the new lines as it was empty according to the check.
Is there anything you'd like reviewers to focus on?
No2J
(8da525f052efa72499e45af3892453ef98a348c52017-10-06T06:23:50Z17152391:
2017-09-29T02:39:57ZLGTM»Ω«A2017-04-02T23:08:32Z"2017-04-06T05:25:26Z*„What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix
Tell us about your environment

ESLint Version: master
Node Version: 7.8.0
npm Version: 4.2.0

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  space-unary-ops: error
What did you do? Please include the actual source code causing the issue.
foo.bar ++;
What did you expect to happen?
I expected an error to be reported.
What actually happened? Please include the actual, raw output from ESLint.
No error was reported.



What changes did you make? (Give an overview)
Previously, space-unary-ops would always evaluate the spacing between the first and second tokens of an UpdateExpression (e.g. foo++). This worked fine when the argument had one token, but it led to the wrong behavior if the argument had multiple tokens (e.g. in foo.bar++, the space between foo and . would be checked, rather than between bar and ++). This commit updates the rule to check the last two tokens of postfix UpdateExpressions.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(f560c0660d9ab47c5592b0dd019404ba55f7b6ec2017-04-06T05:25:25Z11638619:√
2017-04-02T23:08:33Z™@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @qmmr, @gyandeeps and @vitorbal to be potential reviewers.:
2017-04-02T23:08:33ZLGTMº«Œ@2017-03-17T03:03:17Z"2017-03-17T22:35:56Z*‡What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
What changes did you make? (Give an overview)
This is a performance improvement, but should not be a change to linting functionality.  This is similar to avoiding glob resolution within node_modules.  With this change, node-glob will not attempt to  find all files within .dotfolder folders.  Similar to node_modules, this can be overridden in a user‚Äôs ignore file or in an ignore-pattern, and is also prevented if the dotfiles option is true.
Is there anything you'd like reviewers to focus on?
It would be good to double-check our tests around hidden files and folders, as well as perhaps manually trying a few situations.  From everything I tested, this works exactly like before, except faster. üêé2I
(a61c35994ae4f37e6c71f73f592ba5ea22a9ead02017-03-17T22:35:55Z4616705:
2017-03-17T03:03:18ZLGTM:∆
2017-03-17T03:03:18Z≠@IanVS, thanks for your PR! By analyzing the history of the files in this pull request, we identified @not-an-aardvark, @gyandeeps and @mysticatea to be potential reviewers.:
2017-03-17T03:15:11ZLGTM:U
2017-03-17T12:26:03Z=It might be good for @kaelzhang to double-check this as well.èü“@2017-03-17T11:23:25Z"2017-03-17T22:36:15Z*á
What is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix (template)
Fixes #8248.
What changes did you make? (Give an overview)
This PR fixes the broken code path about the direct nest of same kind loops.
The fix is below. Other diffs are for tests.
@@ -512,13 +512,8 @@ function processCodePathToExit(analyzer, node) {
             break;
     }
 
-    /*
-     * Skip updating the current segment to avoid creating useless segments if
-     * the node type is the same as the parent node type.
-     */
-    if (!dontForward && (!node.parent || node.type !== node.parent.type)) {
-
-        // Emits onCodePathSegmentStart events if updated.
+    // Emits onCodePathSegmentStart events if updated.
+    if (!dontForward) {
         forwardCurrentToHead(analyzer, node);
     }
     debug.dumpState(node, state, true);
I had been trying to optimize the code path, but it has been breaking.
I just removed the broken optimizing code.
As a result, the code path about the direct nest of same kind loops is recovered.
For example:
while (a)
    while (b)
        foo()
Before: outer loop's looping path is lacking.


After: OK.



Is there anything you'd like reviewers to focus on?
http://www.webgraphviz.com/ is useful to confirm test's code path with DOT diagrams.2I
(85f74ca3f21ca2cccc52979d60856fe5d8b71e042017-03-17T22:36:15Z1937871:…
2017-03-17T11:23:26Z∞@mysticatea, thanks for your PR! By analyzing the history of the files in this pull request, we identified @kaicataldo, @platinumazure and @gyandeeps to be potential reviewers.:
2017-03-17T11:23:26ZLGTM:
2017-03-17T11:27:25ZLGTMç+©ë82016-09-17T23:39:03Z"2016-09-20T22:17:58Z*êWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
Tell us about your environment

ESLint Version: master
Node Version: 6.6.0
npm Version: 3.10.3

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
none
What did you do? Please include the actual source code causing the issue.
/* eslint no-whitespace-before-property: 2 */

5      .toExponential();
5 .toExponential();
What did you expect to happen?
I expected an error to be reported on the first line, since there is extraneous whitespace before the property. I expected an error to not be reported on the second line, since that whitespace is necessary and causes a SyntaxError if removed.
What actually happened? Please include the actual, raw output from ESLint.
ESLint reported an error on both lines:
  3:1  error  Unexpected whitespace before property toExponential  no-whitespace-before-property
  4:1  error  Unexpected whitespace before property toExponential  no-whitespace-before-property

In addition, when I ran eslint --fix on the file, ESLint removed spaces from both lines and caused a SyntaxError. The resulting file looked like this:
/* eslint no-whitespace-before-property: 2 */

5.toExponential();
5.toExponential();
This is a SyntaxError because the . after the 5 is parsed as a decimal point rather than a property accessor.

Please check each item to ensure your pull request is ready:

 I've read the pull request guide
 I've included tests for my change
(n/a) I've updated documentation for my change (if appropriate)

What changes did you make? (Give an overview)
This fixes the no-whitespace-before-property rule's behavior with number literals:

The rule no longer warns 5 .toExponential() (a single space after a number literal)
The autofixer now inserts a space after number literals to avoid causing SyntaxErrors.

edit: The behavior of this PR changed a bit; now no-whitespace-before-property still reports number literals, but the fixer doesn't fix anything in those cases.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2J
(8e1fee1986b38f3686a1f42bdb01f8dc51ed4a982016-09-20T22:17:58Z11638619:»
2016-09-17T23:39:04ZØ@not-an-aardvark, thanks for your PR! By analyzing the annotation information on this pull request, we identified @vitorbal, @kaicataldo and @alberto to be potential reviewers:
2016-09-17T23:39:04ZLGTM:ã
2016-09-18T00:05:03ZsSeems like there was an npm install build failure on Travis. I don't think it was caused by the changes in this PR.:è
2016-09-18T00:44:19ZˆHmm... Why not fix as 5..toExponential()? Given the ability to use double-dot, I think some users might actually consider a space-dot to be extraneous whitespace. I think ideally, this would be an option and users would be able to choose whether to favor space-dot or dot-dot. (Or maybe putting the number in parentheses, but that would be way beyond the scope of the rule!):™
2016-09-18T00:54:08ZëConceptually, fixing to 5..toExponential() would be modifying the 5 token itself (it would change the value of the token from 5 to 5.). On the other hand, fixing to 5 .toExponential() doesn't modify the 5; it just modifies the whitespace after 5, which is more directly within the scope of this rule.
This doesn't make difference with how the code runs, but it might affect the behavior of other fixers. For example, if this fixer outputs 5..toExponential(), no-floating-decimal will fix it to 5.0.toExponential(). It seems like it would be better for the rule to just not touch the token if it doesn't have to.
edit: I changed my mind about this, see here.:ﬁ
2016-09-18T01:06:42Z≈Okay, I will buy that. Seems that perhaps there should be a separate rule
for how number literal properties should be represented, which would be
responsible for handling my previous objection. I can deal with that
separately.
On Sep 17, 2016 5:54 PM, "Teddy Katz" notifications@github.com wrote:

Conceptually, fixing to 5..toExponential() would be modifying the 5 token
itself (it would change the value of the token from 5 to 5.). On the
other hand, fixing to 5 .toExponential() doesn't modify the 5; it just
modifies the whitespace after 5, which is more directly within the scope
of this rule.
‚Äî
You are receiving this because you commented.
Reply to this email directly, view it on GitHub
#7185 (comment), or mute
the thread
https://github.com/notifications/unsubscribe-auth/AARWelajCw65-HW7-DjXWlwGD6od6YgUks5qrG-RgaJpZM4J_uKW
.:±
2016-09-18T01:42:43ZòSince 5, 5.0, (5), and 5. are all conceptually identical, I think changing to any of those options is a much much better option than ignoring that case.:
2016-09-18T06:26:27ZLGTM:
2016-09-18T19:16:56ZLGTM:
2016-09-19T01:02:02ZLGTM:¥
2016-09-19T01:03:07ZõUpdated to simply not fix cases where the object is a number literal, since we can't be sure whether the user would prefer 5..toString() or (5).toString().:ç
2016-09-19T02:27:18ZuThis is a fair compromise, but I still think we should be picking one, and leaving the actual choice to another rule.:ç
2016-09-19T02:28:27ZuI would agree if that other rule existed, but it doesn't at the moment so we probably shouldn't be guessing about it.≈@…A2017-04-03T00:01:00Z"2017-06-07T06:26:15Z*·Tell us about your environment

ESLint Version: master
Node Version: 7.8.0
npm Version: 4.2.0

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
rules:
  no-extra-parens: error
parserOptions:
  ecmaVersion: 2015
What did you do? Please include the actual source code causing the issue.
for ((foo) in bar);
for ((foo) of bar);
What did you expect to happen?
I expected errors to be reported for both cases.
What actually happened? Please include the actual, raw output from ESLint.
No errors were reported.
The fix for this should make sure to handle spacing correctly. For example, a space needs to be inserted after foo here when autofixing to avoid a syntax error:
for ((foo)in bar);2I
(34c4020cb1c522177f962661412d549e3eaa33e22017-06-07T06:26:06Z3211873:B
2017-05-27T22:51:02Z*@not-an-aardvark can I help out with this?:(
2017-05-27T23:11:15ZSure, feel free!:u
2017-06-02T04:52:09Z]@not-an-aardvark I have a pr for this issue: #8679
When you have some time, could you review?°	ìòH2017-09-06T07:18:33Z"2017-09-08T07:43:28Z*∏What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:



What changes did you make? (Give an overview)
I filtered out shebang comments before comments are processed for the function modifyConfigsFromComments in linter.js. I also added additional tests to the linter.js test file.
Is there anything you'd like reviewers to focus on?
N/A2J
(7ba46e6add05d1a6a6f20a45a9b8244092f4849e2017-09-08T07:43:28Z31330116:
2017-09-06T07:18:35ZLGTM:ƒ
2017-09-06T07:18:39Z´@i-ron-y, thanks for your PR! By analyzing the history of the files in this pull request, we identified @jrajav, @not-an-aardvark and @gyandeeps to be potential reviewers.:Ä
2017-09-06T20:21:10ZÁJust to keep you in the loop: we generally leave bugfix PRs open for at least 48 hours to give people enough time to review the PR or notice issues. So assuming no one requests changes, this should be merged in the next day or two.Àºê82016-09-17T22:13:35Z"2016-09-19T20:05:56Z*Ô	Tell us about your environment

ESLint Version: master
Node Version: 6.6.0
npm Version: 3.10.3

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
{
  "rules": {
    "valid-jsdoc": [2, {"preferType": {"foo": "bar"}}]
  }
}
What did you do? Please include the actual source code causing the issue.
/**
* @param {{gibberish}} bar - the parameter
*/
function foo(bar) { }
What did you expect to happen?
I expected ESLint to either report a JSDoc issue or exit without reporting an error.
What actually happened? Please include the actual, raw output from ESLint.
ESLint threw a TypeError:
TypeError: Cannot read property 'name' of null
    at getCurrentExpectedTypes (path/to/eslint/lib/rules/valid-jsdoc.js:153:21)
    at validateType (path/to/eslint/lib/rules/valid-jsdoc.js:195:39)
    at Array.forEach (native)
    at validateType (path/to/eslint/lib/rules/valid-jsdoc.js:201:22)
    at path/to/eslint/lib/rules/valid-jsdoc.js:330:25
    at Array.forEach (native)
    at EventEmitter.checkJSDoc (path/to/eslint/lib/rules/valid-jsdoc.js:255:28)
    at emitOne (events.js:96:13)
    at EventEmitter.emit (events.js:188:7)
    at NodeEventGenerator.leaveNode (path/to/eslint/lib/util/node-event-generator.js:49:22)2I
(9e0b06802f1c0174a980a9ea8a3c7d9abfa88aad2016-09-19T20:05:52Z7041728:Z
2016-09-18T04:05:23ZBRules should definitely never throw an error. I'll look into this!‘4Î2015-09-16T11:12:12Z"2015-09-18T22:13:00Z*±If it's using this keyword in an arrow function, the arrow function cannot be replaced with FunctionDeclaration.
But currently, the func-style rule is warning the arrow function.
Code:
/* eslint-env es6 */
/* eslint func-style: [2, "declaration"] */

const foo = function() { this; }.bind(this); // using lexical `this`.
const bar = () => this; // using lexical `this`.
Actual:

Expected:
No errors.

I will work on this if accepted.2I
(2f4aa261f08e6f2b7931d48948ab07e5e3131ee62015-09-18T20:57:05Z1937871:"
2015-09-16T19:08:11Z
Nice catchÉπ®H2017-09-08T06:28:51Z"2017-09-10T08:32:45Z*¡What is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix (template)
Tell us about your environment

ESLint Version: master
Node Version: 8.4.0
npm Version: 5.4.1

What parser (default, Babel-ESLint, etc.) are you using?

default

Please show your full configuration:

nothing

What did you do? Please include the actual source code causing the issue.
Gave a SourceCode object to linter.verify().
In more accurate, I resolved conflictions between #8755 and master, then this test got broken.
What did you expect to happen?
It reuses the AST of the SourceCode object.
What actually happened? Please include the actual, raw output from ESLint.
It re-parsed the source code text.
What changes did you make? (Give an overview)
This PR moved the statement this.sourceCode = textOrSourceCode; to the next of this.reset() because this.reset() set null to this.sourceCode.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2I
(981f933d5ca6cad310d9e81cb409f2605ac2bc222017-09-10T08:32:44Z1937871:
2017-09-08T06:28:52ZLGTM:«
2017-09-08T06:28:56ZÆ@mysticatea, thanks for your PR! By analyzing the history of the files in this pull request, we identified @not-an-aardvark, @gyandeeps and @nzakas to be potential reviewers.:X
2017-09-08T06:31:19Z@Oops, thanks for fixing. I think this was introduced in 4b94c6c.Êß72016-09-08T13:04:29Z"2016-09-09T21:05:14Z*ÁWhat version of ESLint are you using?

master

What parser (default, Babel-ESLint, etc.) are you using?

default

Please show your full configuration:

nothing

What did you do? Please include the actual source code causing the issue.
$ echo "(a = () => 0)=>1" | eslint --stdin --no-eslintrc --env es6 --rule arrow-spacing:error

What did you expect to happen?

arrow-spacing should warn the 2nd =>.

What actually happened? Please include the actual, raw output from ESLint.

No errors.2I
(08fa538bbc130937635dd32cc85d9a26b3b90f0c2016-09-09T21:05:14Z1937871Àx¶72016-09-08T10:57:11Z"2016-09-12T03:48:10Z*œWhat version of ESLint are you using?
v3.4.0
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
just 'valid-typeof': ['error', { requireStringLiterals: true }]
What did you do? Please include the actual source code causing the issue.
echo 'typeof foo === typeof bar' | eslint --stdin --no-eslintrc --rule valid-typeof:'[2,{requireStringLiterals: true}]'
What did you expect to happen?
No error.
What actually happened? Please include the actual, raw output from ESLint.
text>
  1:1   error  Typeof comparisons should be to string literals  valid-typeof
  1:16  error  Typeof comparisons should be to string literals  valid-typeof

‚úñ 2 problems (2 errors, 0 warnings)2J
(6ae660b97abac5761c0f93cc25173e48e356bbc32016-09-12T03:48:07Z11638619:Ü
2016-09-08T14:40:16ZnCripes. On the one hand the option name seems fairly explicit, on the other hand I can see why this is a pain.:ò
2016-09-08T17:55:10ZˇJudging by the examples in the docs, this was intentional, but looking back at #6698, it might have been an oversight.
@not-an-aardvark @btmills tagging you two as you were champion/implementer of the option. Any thoughts? Should this be considered a bug?:ö
2016-09-08T18:11:21ZÅAt the moment, the option explicitly only allows comparisons to string literals, and it was implemented with that in mind (typeof a === typeof b is reported as an error in the docs and the tests).
However, I think the original goal of the option in #6698 was to be able to statically prove that a typeof comparison is valid, regardless of whether it actually uses string literals.
The regular valid-typeof rule doesn't accomplish this, since the following is not reported:
const foo = 'not a valid typeof string';
typeof myValue === foo; // invalid, but not reported
On the other hand, the requireStringLiterals option is too strict for this goal, since typeof a === typeof b is always valid, but is reported as an error.
I don't think changing the behavior of the requireStringLiterals option is a good idea, since the name requireStringLiterals clearly implies that string literals should be required. Maybe we should add a new option (strictValidation?) to allow typeof a === typeof b, and deprecate requireStringLiterals.:–
2016-09-08T19:00:36Z∑The spirit behind "requireStringLiterals" imo is as you said - to statically prove that a comparison is valid. Comparing to string literals or to another typeof comparison achieves that.
Perhaps the option name isn't correct, but the behavior imo should be that typeof a === typeof b is always considered valid.:Û
2016-09-08T19:12:29Z⁄How bad would it be if requireStringLiterals permitted typeof a === typeof b, adding the exception without changing the name? That's the easiest route. It's compatible with the spirit of the option albeit not the name.:∆
2016-09-08T19:13:47Z≠I'm going to do one better (slash crazier): Given that we haven't released, can we fix behavior and name before tomorrow's minor release?
EDIT: Never mind, this is released.:ü
2016-09-08T19:16:12ZÜGiven that we haven't released

The new option was included in 3.4.0. If it hadn't been released yet, I'd actually like that idea üòà:Å
2016-09-08T19:17:22ZiOh damnit, I thought we had just put it in this week. Sorry, I'm tracking (trying to track) too many PRs.:a
2016-09-08T19:18:38ZI#7078 (comment) Is exactly what I'm suggesting, and it'd be semver-patch.:t
2016-09-08T19:19:07Z\I can live with that for now. Maybe in a major (5.0?) we can rename the option or something.:(
2016-09-08T20:15:04ZWorking on this.»ã™H2017-09-08T12:42:43Z"2017-09-10T20:03:46Z*™What is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix
Fixes #9126.
What changes did you make? (Give an overview)
This PR adds the IIFE of arrow functions into the assignment target detection logic.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2I
(7685fed33b15763ee3cf7dbe1facfc5ba85173f32017-09-10T20:03:45Z1937871:
2017-09-08T12:42:44ZLGTM¬úŸ@2017-03-18T03:50:04Z"2017-03-20T15:11:45Z*ÖWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8279)



What changes did you make? (Give an overview)
This updates no-param-reassign to stop traversing up the AST if it encounters a Property node where the variable reference is part of the key.
This fix keeps the general strategy of the rule in place. However, while I haven't investigated it in depth, the rule strategy seems a bit fragile -- it reports any reference to a variable on the left side of an assignment, excluding some specific cases such as computed properties. It's possible there are more cases like this that cause false positives -- if so, we might want to rethink how this rule is implemented.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(ddc6350a932a8dfb8a6d6fff8a652c15d295f1582017-03-20T15:11:44Z11638619:
2017-03-18T03:50:05ZLGTM:
2017-03-18T17:50:58ZLGTMïÖ˜>2017-02-09T10:47:13Z"2017-02-17T04:08:11Z*Ë	What is the purpose of this pull request? (put an "X" next to item)
[X] Bug fix (template)
Tell us about your environment

ESLint Version: master
Node Version: 7.3.0
npm Version: 3.8.9

What parser (default, Babel-ESLint, etc.) are you using?

default

Please show your full configuration:

nothing

What did you do? Please include the actual source code causing the issue.
I traversed tokens and comments by token = sourceCode.getTokenAfter(token, { includeComments: true }).
(function(a, /*b,*/ c){})
What did you expect to happen?

It traverses 11 tokens.

What actually happened? Please include the actual, raw output from ESLint.

It traverses 10 tokens (c is lost).

What changes did you make? (Give an overview)
This PR makes correct usage of indexMap (the map from locations to indices).
The map includes 2 kind of mapping; "token's locations to token's indices" and "comment's locations to token's indices". In the former case, it points itself index of each token. In the latter case, it points the next token's index of each comment. So it required additional checks in utils.getFirstIndex and utils.getLastIndex.
This PR fixes those, and adds tests for some edge cases.
Is there anything you'd like reviewers to focus on?
Nothing in particular.2I
(75163037f397bd37f49e0ebd60e43a47a327d3a22017-02-17T04:08:10Z1937871:≈
2017-02-09T10:47:15Z¨@mysticatea, thanks for your PR! By analyzing the history of the files in this pull request, we identified @btmills, @not-an-aardvark and @nzakas to be potential reviewers.:
2017-02-09T10:47:15ZLGTM:
2017-02-13T07:00:23ZLGTM:Z
2017-02-13T07:12:00ZBI updated this PR and this PR's description.
It's ready to review.:“
2017-02-17T03:56:33ZπI think we should land this before our next release - it would be nice not to release this in a patch afterwards since we know there's a bug and it hasn't been used out in the wild yet.:—
2017-02-17T04:02:12Z∏I agree the commit message needs to be a bit more detailed. I don't mind if some of the details are in the commit message body (i.e., not in the first line shown in our release notes).:°
2017-02-17T04:06:02ZàI just ran into this issue. üòï
I'm blocked by this issue at the moment, so I'm going to merge it and update the commit message myself.¥(?2017-03-02T07:44:26Z"2017-03-03T23:09:09Z*íWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
Tell us about your environment

ESLint Version: 3.16.1
Node Version: 6.9.4
npm Version: 3.10.10

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:
module.exports = {
  rules: {
    "space-unary-ops": ['error'],
  }
};

What did you do? Please include the actual source code causing the issue.
I ran eslint --fix on this code:
console.log(+ +1);

What did you expect to happen?
I expected it to result in correct code.
What actually happened? Please include the actual, raw output from ESLint.
It changed the code to console.log(++1); and there was a parse error in eslint.
‚ûú  eslint_test_4 git:(master) ./node_modules/.bin/eslint --fix test.js

/Users/alanpierce/code/eslint_test_4/test.js
  1:15  error  Parsing error: Assigning to rvalue

‚úñ 1 problem (1 error, 0 warnings)

What changes did you make? (Give an overview)
I changed space-unary-ops autofixing to be more defensive and skip the
autofix in some cases where it was incorrect.
Most of the time, it's legal to remove spacing between adjacent operator tokens,
but in a case like + +a it changes the behavior, so we should skip autofixing.
Another example is + ++a, and the - versions of all of these. Since there
are relatively few unary operators and ++ and -- are only allowed in limited
contexts, there aren't a ton of cases to think through here, so hopefully this
is all of them.
Is there anything you'd like reviewers to focus on?
Might be good to think through any other correctness issues like this.2H
(25e5817f157890288da70e623f032587dce478d12017-03-03T23:09:08Z211605:
2017-03-02T07:44:37ZLGTM:f
2017-03-02T07:54:15ZNNot sure why the node 7 build is failing, but it looks unrelated to my change.:
2017-03-02T08:04:06ZLGTM“,È@2017-03-20T21:07:16Z"2017-03-30T12:15:25Z*ßWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:
This fixes a false-positive with prefer-const and the destructuring: "all" option. Essentially, the option was not taking into account destructurings that contained a rest operator.
The original bug-report is here: #8187 (comment)
What changes did you make? (Give an overview)
I've added a couple of test cases that reproduce the bug, then modified the prefer-const rule accordingly to fix the bug.
Is there anything you'd like reviewers to focus on?
I'm not sure, but I think not. Maybe suggestions for more test cases?2H
(27616a81ff0636f94e2ea15c977b56e7c7e23a192017-03-30T12:15:24Z626038:
2017-03-20T21:07:17ZLGTM: 
2017-03-20T21:07:20Z±@vitorbal, thanks for your PR! By analyzing the history of the files in this pull request, we identified @mysticatea, @not-an-aardvark and @NickHeiner to be potential reviewers.:Ö
2017-03-20T21:30:46ZmActually, ESTree ended up switching to RestElement. I think babel-eslint might still use RestProperty though.:à
2017-03-20T21:35:49ZÔActually, ESTree ended up switching to RestElement. I think babel-eslint might still use RestProperty though.

That's a good point. This issue leads me to believe babel-eslint indeed is still using RestProperty. ping @hzoo can you confirm?:ﬁ
2017-03-24T14:09:42Z≈I reached out to @hzoo and it looks like babel-eslint still uses RestProperty, so I'm gonna update the PR to add a check for it as well.
As far as I understand, the RestProperty usage will be cleaned up after babel/babel-eslint#440, so we could do a sweeping change and clean up the occurences in eslint too once that's done.:˚
2017-03-24T14:15:03Z‚@vitorbal Thanks for checking! I think removing RestProperty from every rule should probably be considered a semver-major change since we don't know what other parsers might use it and rely on ESLint supporting that node type.:`
2017-03-24T14:15:57ZH@platinumazure Hmm that's a very good point, thanks for pointing it out!:
2017-03-26T23:21:13ZLGTM:é
2017-03-26T23:21:48ZıOk so I did a bit more investigating and I found out that babel-eslint already outputs ExperimentalRestProperty since v6.x (babel/babel-eslint@31dd811).
On previous versions of babel-eslint, the node type was being set to SpreadProperty  (instead of RestProperty, like we previously believed).
I added SpreadProperty to the regexp pattern, since I assume babel-eslint 5.x still sees some usage (it only supports ESLint 1.x, though...).
I also wrote a stub parser fixture for the ast output from babel-eslint 5.x, and a couple of tests.
If folks think the tests are not necessary I can remove them, but I figured it wouldn't hurt.:º
2017-03-29T17:38:16Z£ping @not-an-aardvark @platinumazure. Any chance you guys could take another look at this? Would like to get it merged before the release this Friday, if possible.›√F2017-07-28T08:03:38Z"2017-07-30T11:22:48Z*ıWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8990)



What changes did you make? (Give an overview)
This updates the indent rule to select tokens in destructuring patterns more precisely, which makes it more robust when handling custom syntax.
Is there anything you'd like reviewers to focus on?
Nothing in particular.
As a separate note, I think we should really address #8991 soon -- having to copy-paste ASTs when dealing with custom parsers is kind of tedious.2J
(7247b6cff70ad5d5aeea27ec893e675238cb8e8d2017-07-30T11:22:47Z11638619:
2017-07-28T08:03:39ZLGTM:«
2017-07-28T08:03:50ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @gyandeeps and @valorkin to be potential reviewers.òòÔ?2017-03-02T01:59:37Z"2017-03-09T19:34:52Z*òTell us about your environment

ESLint Version: 3.16.1
Node Version: 7.6.0
npm Version: 4.2.0

What parser (default, Babel-ESLint, etc.) are you using?

default

Please show your full configuration:

nothing

What did you do? Please include the actual source code causing the issue.
I checked the following code:
/*eslint no-extra-parens: [error, all] */

let a = [...(b)]
let c = {...(d)}
$ eslint test.js --parser-options "ecmaVersion:2015,ecmaFeatures:{experimentalObjectRestSpread:true}" --no-eslintrc --no-ignore
What did you expect to happen?
ESLint warns the parentheses.
What actually happened? Please include the actual, raw output from ESLint.
No errors.2I
(7f8afe627f25c87b5a9481772a322eec9153025a2017-03-09T19:34:51Z1937871‚2Â@2017-03-20T15:24:25Z"2017-03-20T22:27:21Z*äTell us about your environment

ESLint Version: v3.18.0
Node Version: v7.7.2
npm Version: v4.1.2

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
module.exports = {
    root: true,
    parserOptions: {
        ecmaVersion: 8,
    },
    rules: {
        'operator-assignment': [2, 'always'],
    },
};
What did you do? Please include the actual source code causing the issue.
test.js
tmp = tmp + (2 * options.x[y]);
$ eslint test.js --fix
What did you expect to happen?
I expected the fix function to fix the code.
What actually happened? Please include the actual, raw output from ESLint.
Instead, it broke the code.
$ eslint test.js --fix > output.txt
c:\nodejs\test\test.js
  1:25  error  Parsing error: Unexpected token ;

‚úñ 1 problem (1 error, 0 warnings)
test.js
tmp += (2 * options.x[y];
It seems, that the rule doesn't handle braces properly.2J
(2f144cad2a38e5d3048f90cd6d3cd699166ca3ae2017-03-20T22:27:16Z11638619:V
2017-03-20T15:34:25Z>Thanks for the bug report. I was able to reproduce this issue.—/Æ72016-09-08T22:53:25Z"2016-09-09T21:03:35Z*ãWhat version of ESLint are you using?
eslint@3.4.0
What parser (default, Babel-ESLint, etc.) are you using?
The default parser
Please show your full configuration:
.eslintrc.json:
{
  "rules": {
    "no-multiple-empty-lines": 2
  }
}
What did you do? Please include the actual source code causing the issue.
Ran ESLint on the following code:
'use strict';




Note, files used in this test are available here: linter-eslint_GH687.zip
What did you expect to happen?
An error reported on line 4 (5?), column 1.
What actually happened? Please include the actual, raw output from ESLint.
PS C:\Temp\github\linter-eslint_GH687> .\node_modules\.bin\eslint .\foo.js

C:\Temp\github\linter-eslint_GH687\foo.js
  4:2  error  More than 2 blank lines not allowed  no-multiple-empty-lines

‚úñ 1 problem (1 error, 0 warnings)
Note the column of 2, which doesn't exist.
I tested this on eslint@1.10.3, eslint@2.0.0, and eslint@2.13.1 as well as the reported eslint@3.4.0 with identical results.
Moving all the way down to eslint@0.9.0, where this rule was introduced, results in the following:
PS C:\Temp\github\linter-eslint_GH687> .\node_modules\.bin\eslint .\foo.js

.\foo.js
  1:0  error  Use the function form of "use strict"  global-strict
  1:0  error  Strings must use doublequote           quotes
  4:1  error  Unexpected blank line at end of file   eol-last
  5:0  error  Multiple blank lines not allowed       no-multiple-empty-lines

‚úñ 4 problems
So I'm guessing that something broke when updating this rule for the 1-based indexing for eslint@1.
If there is any further information necessary please let me know! Originally reported by several people over in AtomLinter/linter-eslint#687, although I'm not sure why it didn't show up earlier as this should have been breaking for a very long time there.2I
(2a3f69984e468fb67ac69052e2e96c8048ede9332016-09-09T21:03:33Z4616705:ƒ
2016-09-08T23:02:36Z´Looks like the column location changed in 13fd818#diff-0f6472c36e2e4d88a28a92f9b5148206R85.  It seems that it should be 0 instead of 1 there, since context.report() expects a 0-based column location (http://eslint.org/docs/developer-guide/working-with-rules#contextreport).  Seems to be a bug to me.˙2Ê@2017-03-20T15:40:32Z"2017-03-20T22:27:17Z*ñWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (#8293)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:



What changes did you make? (Give an overview)
This updates the operator-assignment autofixer to handle parenthesized values correctly. The fix in 41e3d9c handles cases where expressions like x = (x + y) are parenthesized, but it handles cases like x = x + (y) incorrectly (it omits the closing paren).
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(2f144cad2a38e5d3048f90cd6d3cd699166ca3ae2017-03-20T22:27:16Z11638619:√
2017-03-20T15:40:33Z™@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @btmills, @vitorbal and @nzakas to be potential reviewers.:
2017-03-20T15:40:34ZLGTM’√≥2015-06-28T13:12:46Z"2015-06-29T18:59:41Z*¶With this code:
console.log(1 < 2)
And this rule:
{
  "yoda": [2, "never"]
}
I get this error:
t.js:1:12: Expected literal to be on the right side of <.

I think the solution to this is for the yoda rule to ignore situations where both sides of a comparison are constant. yoda is supposed to check for situations where a literal value of a condition is first and a variable comes second, not when both sides are constants.2I
(a188f58d7f216a9d5a6f894338daf919b46dd5562015-06-28T19:51:14Z2512748:ú
2015-06-28T21:01:58ZÉWhy would we make a special exception for a case that should never exist in your code anyway? Why are you writing things like this?:¥
2015-06-28T23:26:34ZõWe should make a special case because the rule is behaving differently than the documentation. If you want to make a separate rule no-constant-expressions that prevents 1 < 2 as well as non-comparison constant expressions like 1 + 2, then go for it. But it shouldn't be part of yoda.:v
2015-06-29T00:06:57Z^Not if we define yoda as "a comparison with a literal must always have a literal on the left".:æ
2015-06-29T01:17:47Z•But that's not how the documentation defines it:

Yoda conditions are so named because the literal value of the condition comes first while the variable comes second:¢
2015-06-29T01:21:28ZâThen maybe the proper solution is to correct the documentation. My definition would still follow the spirit of the initial rule proposal.:ó
2015-06-29T01:28:28Z˛Nice try, but that's not a real solution. If someone writes 1 < 2, they're not expecting to get the message:
Expected literal to be on the right side of <

This message is just wrong ‚Äì¬†there is a literal on the right side of 2 in this code.
yoda is the wrong rule for preventing the use of constant comparisons. It should be removed from yoda and if people miss the old behavior we can add a new rule like collapse-constant-expressions that forces 1 < 2 to be written as false, and 1 + 2 to be written as 3.:h
2015-06-29T18:58:18ZPAgree with @feross , we should just skip expressions like this in the Yoda rule.:<
2015-06-30T02:14:51Z$Thanks @nzakas and @feross for this.:X
2015-06-30T02:23:26Z@Don't forget @cjihrig who sent the PR that fixed the issue! üëç:∂
2015-07-01T22:44:40Zùjust want to say it's an interesting debate between @feross and @michaelficarra here, props on you guys for keeping things civil and the arguments logical :):£
2015-07-02T12:00:32Zä@michaelficarra

My definition would still follow the spirit of the initial rule proposal.

I'd argue that was a mistake in the initial proposal then,  yoda conditions IMHO almost always referred to a non-constant expression,  where the risk was mistaken assignment.…æˇ2014-12-01T01:10:04Z"2014-12-05T21:51:32Z*“I've got a series of tests, and one of them does set.has(NaN + 1). This isn't a NaN comparison - if anything, it's some sort of unsafe arithmetic operation - and it shouldn't trigger this rule.
(eslint v0.10.0)2G
(f5679a94b22fbfd1e11f7659b0e6471fc7c51eca2014-12-05T06:26:55Z45469:R
2014-12-01T05:10:19Z:Yeah, that's a bug. Looks like a how in our test coverage.:#
2014-12-05T23:03:21ZThanks! :-)æ‚Û2015-09-28T08:34:55Z"2015-09-30T16:58:32Z*æThe rule should show the method name instead of "anonymous".
Plus, the position should be at the head of each method name.
Code:
/* eslint-env es6 */
/* eslint complexity: [2, 1] */
var obj = {
    foo(a) {
        return a ? 0 : 1;
    }
};
Actual:
ESLint v1.5.1

Expected:
4:5 - Function 'foo' has a complexity of 2.2I
(b8301041a9fc484d57f96f873512bf07e617ef782015-09-30T15:39:38Z1859305ŒÒÇ2015-09-10T01:51:18Z"2015-09-10T19:26:13Z*ˇ
Found this issue with the latest code added 5 days and not released yet). The following code:
/* global angular: true,
  $LocalProvider,
  $SomeOtherCrap
*/

var a = $LocalProvider;
will crash no-unused-vars with the following message:
c:\Users\Ilya\Documents\github\eslint\lib\rules\no-unused-vars.js:248
        var column = namePattern.exec(content).index;
                                              ^
TypeError: Cannot read property 'index' of null
    at getLocation (c:\Users\Ilya\Documents\github\eslint\lib\rules\no-unused-vars.js:248:47)
    at EventEmitter.Program:exit (c:\Users\Ilya\Documents\github\eslint\lib\rules\no-unused-vars.js:281:49)
    at EventEmitter.emit (events.js:117:20)
    at Controller.controller.traverse.leave (c:\Users\Ilya\Documents\github\eslint\lib\eslint.js:835:25)
    at Controller.__execute (c:\Users\Ilya\Documents\github\eslint\node_modules\estraverse\estraverse.js:397:31)
    at Controller.traverse (c:\Users\Ilya\Documents\github\eslint\node_modules\estraverse\estraverse.js:485:28)
    at EventEmitter.module.exports.api.verify (c:\Users\Ilya\Documents\github\eslint\lib\eslint.js:820:24)
    at processText (c:\Users\Ilya\Documents\github\eslint\lib\cli-engine.js:206:27)
    at processFile (c:\Users\Ilya\Documents\github\eslint\lib\cli-engine.js:231:12)
    at executeOnFile (c:\Users\Ilya\Documents\github\eslint\lib\cli-engine.js:499:23)
CC @mysticatea2I
(c4660d3ede4b53ff2c200b30109ab4c337deba402015-09-10T05:33:40Z1937871:M
2015-09-10T02:19:10Z5Thank you for the report, I will invest and fix this.¶g≈G2017-08-26T00:55:49Z"2017-08-29T09:28:52Z*ÃTell us about your environment

ESLint Version: 4.5.0 (tested various versions back to 4.0.0 and saw same issue)
Node Version: 6.9.1
npm Version: 3.10.8

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

Configuration
{
  "env": {
    "browser": true,
    "commonjs": true,
    "es6": true
  },
  "extends": "eslint:recommended",
  "parserOptions": {
    "ecmaFeatures": {
      "experimentalObjectRestSpread": true,
      "jsx": true
    },
    "sourceType": "module"
  },
  "plugins": [
    "react",
    "json"
  ],
  "rules": {
    // want to add "ArrayExpression": "first" but eslint has a bug
    "indent": [ "error", 2, { "SwitchCase": 1, "flatTernaryExpressions": true, "ArrayExpression": "off", "ObjectExpression": "off" } ],
    "linebreak-style": [ "error", "unix" ],
    "quotes": [ "error", "single" ],
    "semi": [ "error", "always" ],
    "react/jsx-uses-vars": 1,
    "no-unused-vars": [ "warn", { "vars": "all" } ],
    "brace-style": [ "error", "stroustrup", { "allowSingleLine": true } ]
  }
}

What did you do? Please include the actual source code causing the issue.
I'm just running eslint on my small/medium sized node/react/es6 codebase. I can't tell exactly what part of my code is causing the problem because an error is happening in eslint itself.
What did you expect to happen?
The linter to run normally
What actually happened? Please include the actual, raw output from ESLint.
Cannot read property 'range' of null
TypeError: Cannot read property 'range' of null
at SourceCode.getTokenBefore (/home/git/myproject/node_modules/eslint/lib/token-store/index.js:303:17)
at getFirstToken (/home/git/myproject/node_modules/eslint/lib/rules/indent.js:784:40)
at elements.forEach (/home/git/myproject/node_modules/eslint/lib/rules/indent.js:806:41)
at Array.forEach (native)
at addElementListIndent (/home/git/myproject/node_modules/eslint/lib/rules/indent.js:804:22)
at Object.ArrayExpression, ArrayPattern [as listener] (/home/git/myproject/node_modules/eslint/lib/rules/indent.js:965:17)
at Program:exit.listenerCallQueue.filter.forEach.nodeInfo (/home/git/myproject/node_modules/eslint/lib/rules/indent.js:1444:55)
at Array.forEach (native)
at Linter.Program:exit (/home/git/myproject/node_modules/eslint/lib/rules/indent.js:1444:26)
at emitOne (events.js:101:20)
at Linter.emit (events.js:188:7)
NOTE:
The culprit here seems to be setting "ArrayExpression": "off". If I omit it or set it to "first", the linter runs as expected.2J
(5ab043491b7ca54f2feeb479ca5638dbb1a811842017-08-29T09:28:45Z11638619:µ
2017-08-26T01:15:15ZúThanks for the report. This seems like it might be a bug, but it's hard to tell without having an example of code that causes the issue. The ArrayExpression: off option certainly works for some code, so I can't reproduce the problem based on the information you've provided.
If you add the --debug flag when running ESLint, it will print out some messages when it lints each file. If you look at the last few messages that get printed before the crash, it should be possible to determine which file was being linted when the crash occurred.:⁄
2017-08-26T23:21:56Z¡Thanks for the tip. Using --debug I was able to find the file where it was crashing and ultimately narrow it down to a single line. I verified that running eslint on a file containing nothing but this line will trigger the error.
const [, ...myArrayMinusOne] = myArray;

It's possible (read: probable) that I don't have eslint properly configured for all my babel/eswhatever nonsense, but regardless, it would of course be better if it didn't crash.:C
2017-08-27T03:46:17Z+Thanks, I was able to reproduce this issue.¨,˚?2017-03-03T00:03:58Z"2017-03-30T12:15:31Z*ôTell us about your environment

ESLint Version: 3.16.1
Node Version: v6.6.0
npm Version: 3.10.3

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:
module.exports = {
  "env": {
    "browser": true,
    "es6": true
  },
  "extends": "eslint:recommended",
  "parserOptions": {
    "sourceType": "module",
    "ecmaFeatures": {
      "experimentalObjectRestSpread": true
    }
  },
  "rules": {
    "prefer-const": ["error", {
      "destructuring": "any",
      "ignoreReadBeforeAssign": false
    }],
    "no-console": "off"
  }
};
What did you do? Please include the actual source code causing the issue.
I have a basic test case of the problem in this code:

const props = {
  name: "Eric",
  age: 30,
  occupation: "Artist"
}

let { name, age } = props;
age = 3;

console.log(name);
console.log(age);
ESLint says that let { name, age } = props; is a problem and should use const.
Here, two variables are created via destructuring syntax, and one is later reassigned but the other is not.
Fixing the code as the rule suggests means using const, which creates a syntax error.
What did you expect to happen?
I'm not sure :)
What actually happened? Please include the actual, raw output from ESLint.
$ ./node_modules/.bin/eslint app.js

/Users/eric/Desktop/eslint/app.js
  7:7  error  'name' is never reassigned. Use 'const' instead  prefer-const

‚úñ 1 problem (1 error, 0 warnings)2H
(27616a81ff0636f94e2ea15c977b56e7c7e23a192017-03-30T12:15:24Z626038:c
2017-03-03T00:06:49ZKThe proper way to fix this is:
const { name } = props;
let { age } = props;:N
2017-03-03T00:09:22Z6Does the destructuring: "all" option solve your issue?:¡
2017-03-03T01:03:22Z®Sorry, I made an over-simplified example that missed my problem.
In the case of using a rest operator, where you want to get an object that is only some properties of an object.
const props = {
  name: "Eric",
  age: 30,
  occupation: "Artist"
}

let { name, ...otherProps } = props;
otherProps = 3;

console.log(name);
console.log(otherProps);

I just tried destructuring: "all" with this example but I still get the error.:˚
2017-03-20T20:32:28Z‚@ericandrewlewis apologies for the delay. Thank you for clarifying your example. I tried it locally and it does indeed report an error, even with the destructuring: "all" option set. I believe this is a bug. I'll work on this.:
2017-03-30T18:40:16ZüéäÖ ±∂I2017-10-07T14:56:28Z"2017-10-17T21:59:17Z*¸Tell us about your environment

ESLint Version: 4.8.0
Node Version: 8.3.0
npm Version: 5.3.0

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:

Configuration

{
  "rules": {
    "no-constant-condition": "error"
  }
}

What did you do? Please include the actual source code causing the issue.

if (true) {
  something();
}

something(true ? 1 : 0);
What did you expect to happen?
The reported error ranges should only include the constant conditions themselves. In the above cases, the words "true".
What actually happened? Please include the actual, raw output from ESLint.
The reported error ranges include the entire statement/expression that the constant condition is part of.
$ eslint test.js --format json | jq
[
  {
    "filePath": "/home/lydell/bugs/eslint/test.js",
    "messages": [
      {
        "ruleId": "no-constant-condition",
        "severity": 2,
        "message": "Unexpected constant condition.",
        "line": 1,
        "column": 1,
        "nodeType": "IfStatement",
        "source": "if (true) {",
        "endLine": 3,
        "endColumn": 2
      },
      {
        "ruleId": "no-constant-condition",
        "severity": 2,
        "message": "Unexpected constant condition.",
        "line": 5,
        "column": 11,
        "nodeType": "ConditionalExpression",
        "source": "something(true ? 1 : 0);",
        "endLine": 5,
        "endColumn": 23
      }
    ],
    "errorCount": 2,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "if (true) {\n  something();\n}\n\nsomething(true ? 1 : 0);\n"
  }
]
Expected:
@@ -7,11 +7,11 @@
         "severity": 2,
         "message": "Unexpected constant condition.",
         "line": 1,
-        "column": 1,
+        "column": 5,
         "nodeType": "IfStatement",
         "source": "if (true) {",
-        "endLine": 3,
-        "endColumn": 2
+        "endLine": 1,
+        "endColumn": 9
       },
       {
         "ruleId": "no-constant-condition",
@@ -22,7 +22,7 @@
         "nodeType": "ConditionalExpression",
         "source": "something(true ? 1 : 0);",
         "endLine": 5,
-        "endColumn": 23
+        "endColumn": 15
       }
     ],
     "errorCount": 2,
Note: I don't know how the reported "source" properties are supposed to work, so I can't tell whether they are correct or not.
Visual representation of the problem:

Notice how much more than the constant conditions are underlined.
See also: steelbrain/linter-ui-default#398 (comment) and onwards.2I
(eb8cfb1cc738753a1e8175926f5ea240fcf51b072017-10-17T21:59:10Z3211873:q
2017-10-12T02:09:42ZYThanks for the report. I agree that it would be better to only report the condition here.:ß
2017-10-12T06:40:14ZéIt sounds like line, column, endLine, and endColumn show the location of the node in which the error is found. In the first example, the nodeType is IfStatement, and the location listed is the entire if-statement where the first true is found. In the second example, the nodeType is ConditionalExpression, and the location listed is the entire conditional expression where the second true is found.:∏
2017-10-12T06:43:16ZüThat's correct. I think this issue is occurring because the rule reports the entire IfStatement node when it should really just report the condition in the if statement. (The line, column, endLine, and endColumn are automatically added to the report based on the node that was reported.):û
2017-10-12T15:17:23ZÖwould the ideal case be: just reporting the position of the constant condition (so the true)?
so for the IfStatement, can we report with the loc: {start: {line:nodestartPosition, column:node.test.range[0]}, end: {line:nodestartPosition, column:node.test.range[1]}}?
haven't checked if there is a case that catches the correct position across the board, but I imagine they might be similar.:ç
2017-10-12T16:18:13ZuWe can just report node.test as the node, and then all of that information will be automatically added to the report.˘èÀF2017-07-29T17:22:17Z"2017-08-01T22:28:06Z*Œ(fixes #9019)

What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (template)



What changes did you make? (Give an overview)
Is there anything you'd like reviewers to focus on?2J
(78a85e0a255ec93ecf71c20afa53facb992f82022017-08-01T22:28:05Z13050025:
2017-07-29T17:22:18ZLGTM:«
2017-07-29T17:22:20ZÆ@Aladdin-ADD, thanks for your PR! By analyzing the history of the files in this pull request, we identified @nzakas, @not-an-aardvark and @vitorbal to be potential reviewers.:
2017-07-29T17:24:05ZLGTM:
2017-07-30T13:17:35ZLGTM:
2017-07-30T13:26:06ZLGTM:
2017-07-30T13:37:51ZLGTM:
2017-07-30T13:39:49ZLGTM:
2017-07-30T17:16:45ZLGTM:
2017-07-30T17:22:06ZLGTM:
2017-07-30T17:23:15ZLGTM:
2017-07-31T00:02:15ZLGTM:
2017-07-31T00:06:05ZLGTM:
2017-07-31T00:08:11ZLGTM:
2017-07-31T02:06:23ZLGTM:T
2017-08-01T09:48:30Z<Looks like there are some merge conflicts here from 7ecfe6a.:
2017-08-01T11:24:04ZLGTM:2
2017-08-01T12:37:17Z@not-an-aardvark resolved.:0
2017-08-01T22:28:12ZThanks for contributing!Å_¬G2017-08-25T10:04:18Z"2017-09-09T05:55:12Z*∫Tell us about your environment

ESLint Version: master
Node Version: 8.4.0
npm Version: 5.3.0

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
(no configuration)
What did you do? Please include the actual source code causing the issue.
I linted an invalid piece of JavaScript text which only consists of a single dot: .
$ echo '.' | eslint --stdin --no-eslintrc
What did you expect to happen?
I expected a parser error including the message Unexpected token .
What actually happened? Please include the actual, raw output from ESLint.
<text>
  1:1  error  Parsing error: Unexpected token

The stylish and codeframe formatters strip trailing . characters from report messages, presumably for stylistic reasons. However, this leads to confusing messages when the . is actually an important component of the message, rather than a period at the end of the sentence.
One way to address this would be to avoid removing the trailing . for fatal messages. Another solution would be to just stop removing trailing . characters entirely.2J
(51132d6a0729b8e54326e9b8f5c8c1f487c8bd312017-09-09T05:55:05Z31330116:•
2017-09-06T20:17:05ZåHow about keeping " ." but removing "." when there is no space in front of it? Seeing as that error message should've said "Unexpected token .", and the "." used as a punctuation in report messages would have some character that isn't a space immediately preceding it.:
2017-09-07T02:47:53ZPR'd.éá˛>2017-02-11T00:13:10Z"2017-02-18T11:24:49Z*ÉWhat is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#8047)



What changes did you make? (Give an overview)
This updates no-lone-blocks to report block statements in SwitchCase nodes. As described in #8047, it does not report blocks if they are the only statement in SwitchCase nodes.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(cfb65c5ce3810ddba9455000712ef812589e28602017-02-18T11:24:48Z11638619:ƒ
2017-02-11T00:13:11Z´@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @jrvidal and @btmills to be potential reviewers.:
2017-02-11T00:13:11ZLGTM:e
2017-02-11T00:37:31ZMI think this is the same case as #7879 so it should be a breaking change too.:Â
2017-02-11T00:44:29ZÃThis is a slightly different case from #7879. #7879 concerns the curly braces containing switch statement bodies, which can optionally be handled by the padded-blocks rule even though they're not actually block statements. Since a user might expect padded-blocks to only handle statements that are actually blocks by default, #7879 is a breaking change. On the other hand, this PR concerns curly braces inside switch cases, which are actually block statements. In my opinion, this is a bugfix (so it's semver-minor), in contrast to #7879 which is changing previously-intentional behavior.:$
2017-02-11T01:05:04ZFair enough.:
2017-02-13T21:56:14ZLGTM:µ
2017-02-14T11:50:26ZúI'm not confident, but maybe it should ignore the following case.
Sometimes I have seen the style which puts breaks on the same level as cases.
(if my memory is correct, there was a such issue in indent issues.)
switch (a) {
    case 1:
    {
        doSomething();
    }
    break; // SwitchCase has 2 statements and the last one is a BreakStatement.

    case 2:
    {
        doSomething();
    }
    break;
}:X
2017-02-18T11:23:04Z@@mysticatea I think we could add an exception if it's requested.¡;…2015-05-29T14:08:46Z"2015-05-29T19:54:16Z*Dconst {a, b, c} = this;
Triggers consistent-this, but it should not.2H
(32b0cde5a10867230d22862584ca4612210492182015-05-29T14:51:35Z158859Äm¿2015-06-11T16:20:23Z"2015-06-22T17:29:49Z*äI forgot to add the arraysInObjects exceptions to object-curly-spacing.
Here is how it should work:
When "arraysInObjects" is set to false, the following patterns are considered warnings:
var obj = { "foo": [ 1, 2 ] };
var obj = { "foo": [ "baz", "bar" ] };
The following patterns are not warnings:
var obj = { "foo": [ 1, 2 ]};
var obj = { "foo": [ "baz", "bar" ]};
It's also missing a schema.2@
(5e019531febbff7ef1508c0331d0621d2f3cc6012015-06-16T17:19:37ZÔ˘2015-09-28T15:52:44Z"2015-10-02T18:06:37Z*ﬁThe version of ESLint you are using (run eslint -v)
1.5.1
What you did (the source code and ESLint configuration)
source code
// some Node.js module's code
'use strict';

this.a = 3;
eslint config
{
    "extends": "eslint:recommended",
    "env": { "node": true },
    "rules": {
        "no-invalid-this": 2
    }
}
The actual ESLint output complete with numbers
nothing
What you expected to happen instead
Expected ESLint to report no-invalid-this error, but instead got nothing.
this refers to the module object itself in a context of a Node module, so it won't be undefined in any case.
However I would not encourage developers to use this.a = 3; in Node modules instead of exports.a = 3;  as the latter one is more explicit, however it might be just my personal preference?
Node modules are cached after loading, which actually advocating the "singleton pattern" in a way, and again it might be my own preference, but I would not encourage developers to do that as a habit.
See https://nodejs.org/api/modules.html#modules_caching
Proposal: an option to warn developers not to use this in Node modules' root scope.2I
(1355e0b0f73369420d0158f58cb1b75c0fde09832015-10-02T15:39:40Z1937871:Ó
2015-09-28T15:52:51Z’Thanks for the issue! If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead

Requesting a new rule? Please see Proposing a New Rule for instructions.:¿
2015-09-28T17:49:12ZßThis is simply a bug in no-invalid-this. It should report top-level this, but is likely getting tripped up by the implicit top-level function wrapper in node programs.:\
2015-09-29T03:04:02ZDThanks for the report.
It's a bug of no-invalid-this.
I will fix it.® â2015-09-10T19:26:27Z"2015-09-14T17:31:17Z*∞With the following rules, there is no way to have a function in one line without a conflict between the 2.
// eslint v1.3.1
/*eslint "semi-spacing":2*/
/*eslint "block-spacing":[2, "never"]*/
var fnArr = [
  function foo(){return 2;}, //4:26  error  Missing whitespace after semicolon  semi-spacing
  function foo2(){return 2; }, //5:29  error  Unexpected space(s) before "}"      block-spacing
  function foo3(){
    return 2; // No errors, but this is not what I am trying to do
  }
]
Is there a way to have both rule and a function declaration in one line ?2I
(fb21b37e8caf5df9bc441a2e929980e1acaf38002015-09-12T20:01:24Z1937871:‹
2015-09-10T19:26:27Z√Thanks for the issue! We get a lot of issues, so this message is automatically posted to each one to help you check that you've included all of the information we need to help you.
Reporting a bug? Please be sure to include:

The version of ESLint you are using (run eslint -v)
The source code that caused the problem
The configuration you're using (for the rule or your entire config file)
The actual ESLint output complete with line numbers

Requesting a new rule? Please be sure to include:

The use case for the rule - what is it trying to prevent or flag?
Whether the rule is trying to prevent an error or is purely stylistic
Why you believe this rule is generic enough to be included

Requesting a feature? Please be sure to include:

The problem you want to solve (don't mention the solution)
Your take on the correct solution to problem

Including this information in your issue helps us to triage it and get you a response as quickly as possible.
Thanks!:h
2015-09-10T19:44:49ZPHmm, we need to figure out how to clean that up. I'm not sure how at the moment.:ß
2015-09-10T19:56:20ZéI just saw a similar issue with space-in-parens
where
for(let i = 0; i < results.length;) { is invalid because of semi-spacing and
for(let i = 0; i < results.length; ) { is invalid because of space-in-parens
The only valid case is
for(let i = 0; i < results.length; 
) {:j
2015-09-11T16:16:42ZRSo, should semi-spacing be skipped if the next token is a closing paren (), }, ])?:i
2015-09-11T19:46:53ZQThat might be the solution. We'd have to update the docs to reflect that as well.:,
2015-09-12T18:58:33ZI will work on this.ˆéŒ%2015-12-27T09:26:28Z"2015-12-30T19:28:23Z*ˆI got an error under the following conditions:

I'm using v2.0.0-alpha-2
A test has env: {node: true}
A test has parserOptions: {sourceType: "module"}

The cause is this assign() and this assignment
I will fix the assign() with ConfigOps.merge().2I
(d3e8179b0de73e3275978d3d30089f8a6d5c23202015-12-30T16:45:41Z1937871∏
∏ì2014-11-02T17:10:49Z"2014-11-05T23:43:54Z*œI noticed while working on a plugin (#1344) that calling getSource(node, beforeCount, afterCount), the behavior is undefined for when the beforeCount or afterCount might overrun the length of the original source.
A simple example is I match on LineComment and I call getSource(node, 2, 2) to determine if the comment is proceeded or followed by a blank line. If the comment I match happens to be on the first line, then a beforeCount of 2 causes the first slice parameter to be negative. This causes an empty string to be returned from getSource in some cases and just odd/unexpected values in others.
This behavior was pretty surprising to me as a plugin developer. The behavior I had expected or hoped for was that getSource might clamp the bounds to the source size, so beforeCount can never take you less 0 and afterCount can never take you past the sourceLength. This would make the API more predictable and possibly prevent a lot of bounds checks in plugins.
This is on Master, I will add a test case soon and I would be happy to look into this further if there is agreement that this is an issue.2H
(97aa0f50b4b23fdac35a2e0d2521da58f8f6b9902014-11-04T03:57:53Z107471:h
2014-11-02T18:17:24ZPYeah, that's definitely a bug. I agree that we should clamp the available range.™gŒG2017-08-27T04:02:35Z"2017-08-29T09:28:46Z*¬What is the purpose of this pull request? (put an "X" next to item)
[x] Bug fix (#9157)



What changes did you make? (Give an overview)
This updates indent to add a missing null check for sparse arrays when using the ArrayExpression: "off" option.
Is there anything you'd like reviewers to focus on?
Nothing in particular2J
(5ab043491b7ca54f2feeb479ca5638dbb1a811842017-08-29T09:28:45Z11638619:
2017-08-27T04:02:36ZLGTM:«
2017-08-27T04:02:47ZÆ@not-an-aardvark, thanks for your PR! By analyzing the history of the files in this pull request, we identified @vitorbal, @gyandeeps and @valorkin to be potential reviewers.ı§»H2017-09-12T03:57:12Z"2017-09-15T02:55:29Z*ÃWhat is the purpose of this pull request? (put an "X" next to item)
[X ] Other, please explain: Remove autofixing to no-undef-init rule, particularly for var declarations
What changes did you make? (Give an overview)
Is there anything you'd like reviewers to focus on?

To the point in #9231 about not using let: Using let looks like it still works, so I want to make sure I understand.

function fun() {
  for (var p in [0, 1, 2]) {
    let selected = undefined;// auto fix will remove `= undefined`

    for (var i in [0, 1, 2]) {
      if (!selected) {
        console.log('selected');
      }
      selected = i;
    }
  }
}

fun();


Is it okay to keep as separate if? I didn't include in the same if as line 50 since the inner comment wouldn't make sense.
I am checking node.parent.kind because it looks to distinguish between var and let2I
(e220687fa58a09a51eaa09815788638f94babea62017-09-15T02:55:28Z3211873:
2017-09-12T03:57:13ZLGTM: 
2017-09-12T03:57:13Z±@VictorHom, thanks for your PR! By analyzing the history of the files in this pull request, we identified @not-an-aardvark, @ilyavolodin and @vitorbal to be potential reviewers.:Ü
2017-09-12T04:25:48Znwe need to avoid var fix only if its inside a loop. I think currently you are completely removing fix for var.:¨
2017-09-12T04:28:59Zì@gyandeeps While that might be a better fix, note that completely removing the autofix for var was the solution that I proposed in #9231 (comment).:ƒ
2017-09-12T04:33:00Z´Also, I don't think checking if the variable is in a loop fully solves the issue:
var foo = 5;
var foo = undefined;
foo; // => undefined
var foo = 5;
var foo;
foo; // => 5:Ä
2017-09-12T04:45:56Zhyou are right @not-an-aardvark ... forgot about that weird case of var... so current plan sounds good...:
2017-09-12T15:49:20ZLGTM:
2017-09-12T16:17:17ZLGTMéiÄ@2017-03-03T18:48:49Z"2017-03-08T05:49:20Z*©Tell us about your environment

ESLint Version: 3.16.1
Node Version: 7.6.0
yarn Version: 0.20.3

What parser (default, Babel-ESLint, etc.) are you using? babel-eslint
Please show your full configuration:
module.exports = {
  extends: ['airbnb', 'plugin:flowtype/recommended'],
  plugins: ['flowtype'],
  rules: {
    'flowtype/define-flow-type': 1,
    'flowtype/use-flow-type': 1,
    'flowtype/delimiter-dangle': [2, 'always'],
    'flowtype/semi': [2, 'always'],
  },
  settings: {
    flowtype: {
      onlyFilesWithFlowAnnotation: true,
    },
  },
};
package.json:
...
"eslint-plugin-flowtype": "2.30.0",
...
What did you expect to happen?
My code would be linted with 'flowtype' rules.
What actually happened? Please include the actual, raw output from ESLint.
I get:
Oops! Something went wrong! :(

ESLint couldn't find the config "plugin:flowtype/recommended" to extend from. Please check that the name of the config is correct.2G
(5b5c2361d5c35feddece4e866ddcae25b964ee7f2017-03-08T05:49:11Z72561:n
2017-03-03T18:49:28ZVNote: when I rollback to ~3.15.0, this works. It appears to be a regression in 3.16.x.:æ
2017-03-03T19:23:05Z•Does it work if you rollback 360dbe4? That's the only commit in the release notes that I can find that seems to relate to config extension. (PR: #8100, issue: #6115):G
2017-03-03T19:31:55Z/Yep, that's the offending commit. Nice hunting!:Î
2017-03-04T00:30:49Z“@danny-andrews What do you mean by "it works"?
The report is complaining about the config, when the actual error I get if I revert the commit is "Error: Cannot find module 'babel-eslint'"
Is that what you mean?:Ñ
2017-03-06T16:30:55ZÎ@alberto

@danny-andrews What do you mean by "it works"?
The report is complaining about the config, when the actual error I get if I revert the commit is "Error: Cannot find module 'babel-eslint'"
Is that what you mean?

You must have eslint-plugin-flowtype installed and use it in your eslintrc config in order to see the error message I'm reporting.
To clarify:
On 360dbe4:
without babel-eslint installed: ESLint couldn't find the config "plugin:flowtype/recommended" to extend from. Please check that the name of the config is correct.
with babel-eslint installed: Works as expected with no errors.
On Pre-360dbe4:
without babel-eslint installed: Cannot find module 'babel-eslint'
with babel-eslint installed: Works as expected with no errors.:w
2017-03-07T09:01:35Z_Thanks @danny-andrews for confirming, that's what I was experiencing. It will be fixed in #8196ÚãÅ@2017-03-03T21:24:03Z"2017-05-24T02:31:10Z*ãTell us about your environment
macOS Sierra

ESLint Version:
3.16.1
Node Version:
6.9.2
npm Version:
yarn@0.21.3

What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:

{
  "root": true,
  "extends": [
    "simenb-base",
    "simenb-node",
    "simenb-jsdoc"
  ]
}

What did you do? Please include the actual source code causing the issue.
Source code not applicable, but I've created a repo reproducing the error: https://github.com/SimenB/eslint-extends-issue
What did you expect to happen?
That all extends, recursively, are resolved.
What actually happened? Please include the actual, raw output from ESLint.
"Only" 7 extends are resolved.
This might be by design, but if so, why only 7, and it's not mentioned in the docs http://eslint.org/docs/developer-guide/shareable-configs.
For output from eslint, see https://github.com/SimenB/eslint-extends-issue2I
(d0e9fd2d7c5f7ae1b9a1b2b0d04b9764dd782bd42017-05-24T02:31:01Z5554486:e
2017-05-22T05:57:11ZMI was able to confirm this using current master. Thanks for reporting @SimenBÔS˛?2017-03-03T17:05:16Z"2017-03-06T23:41:38Z*œTell us about your environment

ESLint Version: 3.16.1
Node Version: 6.6.0
npm Version: 3.10.3

What parser (default, Babel-ESLint, etc.) are you using? default
Please show your full configuration:

module.exports = {
  "env": {
    "browser": true,
    "es6": true
  },
  "extends": "eslint:recommended",
  "parserOptions": {
    "sourceType": "module",
    "ecmaFeatures": {
      "experimentalObjectRestSpread": true
    }
  },
  "rules": {
    "operator-assignment": ["error", "always"],
    "no-console": "off"
  }
};

What did you do? Please include the actual source code causing the issue.
Using this code

let x = 0;

x = (x + 5);

console.log(x);
I ran ESLint's fixer.
What did you expect to happen?
Change x = (x + 5); to x += 5
What actually happened? Please include the actual, raw output from ESLint.
Changed x = (x + 5); to x += 5);2G
(41e3d9ce08b1a7f1f97d878a439b0143d19c70842017-03-06T23:41:33Z72561:!
2017-03-07T00:37:43Z	Nice üéäÛiÑ@2017-03-04T02:55:23Z"2017-03-08T05:49:13Z*õWhat is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:



What changes did you make? (Give an overview)
PR #8100 modified the message when there was an error loading a plugin or config, but didn't account for other possible errors. In this case, babel-eslint was not present, and the error was misleading.
Is there anything you'd like reviewers to focus on?
Is there a cleaner way to check for this rather than using the error message?2G
(5b5c2361d5c35feddece4e866ddcae25b964ee7f2017-03-08T05:49:11Z72561:
2017-03-04T02:55:24ZLGTM:ø
2017-03-04T02:55:24Z¶@alberto, thanks for your PR! By analyzing the history of the files in this pull request, we identified @nzakas, @gyandeeps and @mysticatea to be potential reviewers.:Í
2017-03-04T03:04:25Z—Is there a cleaner way to check for this rather than using the error message?

You can detect module-loading errors by checking err.code === "MODULE_NOT_FOUND".
Could you clarify what errors this logic is checking for? Intuitively, it seems like we should be able to avoid throwing TypeErrors, so I'm confused what the effect of catching them is. Also, I'm not sure I understand why this logic is only catching missing-module errors related to eslint-config-eslint.:
2017-03-04T12:26:29ZLGTM:–
2017-03-04T12:36:02Z∑I have updated the PR, I hope the intention is clearer now. I tried to provide a better error for people trying to load an inexistent config from a shared config, a plugin or one of the eslint core configs. Main use case is someone has a typo in his config (e.g. eslint:recommend instead of eslint:recommended).:
2017-03-04T13:35:55ZLGTM:
2017-03-05T19:29:02ZLGTM:
2017-03-05T20:56:04ZLGTM:
2017-03-05T20:57:28ZLGTM:
2017-03-05T20:58:46ZLGTM:Ñ
2017-03-07T08:57:14Zl@not-an-aardvark let me know if it LGTY now. Thanks for your feedback, I'm much happier with the code now :)úSÖ@2017-03-04T03:22:54Z"2017-03-06T23:41:33Z*∫What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[X] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:



What changes did you make? (Give an overview)
Correct autofix when the expression has parenthesis
Is there anything you'd like reviewers to focus on?
No2G
(41e3d9ce08b1a7f1f97d878a439b0143d19c70842017-03-06T23:41:33Z72561:ƒ
2017-03-04T03:22:54Z´@alberto, thanks for your PR! By analyzing the history of the files in this pull request, we identified @btmills, @not-an-aardvark and @vitorbal to be potential reviewers.:
2017-03-04T03:22:55ZLGTMÄh—F2017-07-29T22:05:20Z"2017-08-01T09:52:13Z*®[ X] Bug fix (template)
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
eslint: v4.3.0
node: v8.2.1
npm: 3.10.10
What changes did you make? (Give an overview)
Add back err.message to bin/eslint
It provides clearer error messaging. It undoes changes here to reduce duplicate error messaging in err.message and err.stack
Is there anything you'd like reviewers to focus on?2I
(5ab282fabf48776ad4f6779629592039dbb5fb202017-08-01T09:52:12Z3211873: 
2017-07-29T22:05:21Z±@VictorHom, thanks for your PR! By analyzing the history of the files in this pull request, we identified @not-an-aardvark, @nzakas and @platinumazure to be potential reviewers.:
2017-07-29T22:05:21ZLGTM:
2017-07-30T18:34:00ZLGTM:
2017-07-30T18:34:55ZLGTM:0
2017-08-01T09:52:21ZThanks for contributing!ˇ‡î2014-12-07T09:59:58Z"2014-12-08T18:54:42Z*˚The following:
var a = 'foo';
a = 'bar' + a;
var b = 123;
b = 'baz' + b;
var c = 'qux';
c = 123 + c;
results in:
  2:0  error  Assignment can be replaced with operator assignment  operator-assignment
  4:0  error  Assignment can be replaced with operator assignment  operator-assignment
  6:0  error  Assignment can be replaced with operator assignment  operator-assignment

Unless I've completely forgotten of a way to do this with an assignment operator, it is not possible to do what the rule encourages.2G
(b769763b7b4e7542f3e2bc8aeaff8c802ae91cbf2014-12-08T18:54:39Z38546:U
2014-12-07T17:36:47Z=Yeah, looks like a bug. What version of ESLint are you using?:∂
2014-12-07T17:36:48Zùüòè
a += a;
Is this only the case when a is the same as what your adding to it on the next line?
Nvm  b = 'test' + b results in the same error. Worth a shot:
2014-12-08T01:40:32Z◊Heh, true, the example a I gave happens to be commutative so I have updated the strings to reflect my original intention.
I am using the version of ESLint that was installed as a dependency of the latest grunt-eslint module which I installed via npm yesterday. The package.json states "version": "0.10.0". I looked at the rule source code via the GitHub link in the documentation before submitting this issue and didn't see any obvious exception for string concatenation.:Ä
2014-12-08T02:04:08ZÁLooking at your third example, it wouldn't even be possible just to special-case string concatenation. Looks like we need to remove commutative checks entirely and only report cases of the form a = a + b, always allowing a = b + a.—	DŒ2015-06-15T08:43:10Z"2015-06-19T20:33:58Z*≈The common usage for jsdoc is to start it with /**, here is an example:
/**
 * Window
 */
export default class Window extends eventEmitter { 

Result for lint with "spaced-comment": 2:
1:0  error  Expected space or tab after /* in comment  spaced-comment

It will be great no to trigger the error in this case. /cc @gyandeeps2I
(39a908d7ffd574871d3648862ae50c1a94245bdc2015-06-19T03:31:57Z5554486:©
2015-06-15T15:33:52ZêI agree we need to make sure the rule doesn't fire on  jsDoc comment but I am not sure how to manage it yet. I am open for opinions/suggestions?:Y
2015-06-15T19:03:14ZAWe should just omit JSDoc start markers from the rule by default.:
2015-06-16T23:31:47Zg@nzakas what u r saying is basically ignore whenever a block comment is in this form:
/**
 *  jsdoc
 */:?
2015-06-17T18:52:05Z'When a block begins with /**, ignore it:D
2015-06-17T19:34:29Z,I will work on this once I get #2783 merged.:"
2015-06-20T09:25:17Z
Thank you!:k
2015-07-07T17:29:31ZSDoes the documentation need updating? - http://eslint.org/docs/rules/spaced-comment:k
2015-07-07T17:30:50ZSUnder the no warning section, we have show examples which talk about jsdoc comment.ï#ƒÉ2015-09-29T15:40:33Z"2015-10-03T19:01:24Z*€What version are you using?
v1.5.1
What did you do?
We recently upgraded to Node 4.0.0 which includes Promises by default. As we have been using Bluebird Promises before, we want to remove this dependency where possible, and rename the variables we assign Bluebird to (e.g. to something like BBPromise to easily see the difference with native Promises).
JSHint always reported about the Redefinition of Promise when using var Promise = require("bluebird"); However, I can't seem to get the same from ESLint.
The following shows the problem:
/*eslint-env node, es6 */
/*eslint no-undef: 2*/
/*no-shadow: [2, {"builtinGlobals": true}]*/

// removing this line does not trigger the `no-undef` rule
// so Promise is correctly defined as a global
const Promise = require("bluebird");

Promise.resolve()
.then(() => { console.log("Done"); });
What happened?
Running ESLint on the piece of code returns without errors or warnings. Explicitly adding /*global Promise:false*/ does not change the results.
What did you expect to happen?
I expect ESLint to return an error about the fact that I'm redefining a global variable.2I
(f885e0f0bbbbeb41f07d6c05945ce2dd998339522015-10-03T09:42:11Z1937871:Ó
2015-09-29T15:40:41Z’Thanks for the issue! If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead

Requesting a new rule? Please see Proposing a New Rule for instructions.:u
2015-09-29T15:49:09Z]I think this is the rule you are looking for: http://eslint.org/docs/rules/no-native-reassign:î
2015-09-29T16:03:31Z˚Damn, have been looking through the docs forever.
Looks like only no-redeclare with {"builtinGlobals": true} does the trick, which is a bit weird because the docs make me think that this should behave the same as no-native-reassign in this case.
So thanks for pointing me in the right direction! My problem is solved for now, but this might still be a bug for no-native-reassign?:X
2015-09-29T16:05:39Z@I will furthur investigate this.
@ilyavolodin any feedback here?:ò
2015-09-29T16:10:20ZˇI think this is correct behavior for all rules involved. This should not be flagged by no-shadow since, it's not really shadowing anything (same scope as built-in Promise). This should not be flagged by no-native-reassign because you are not assigning new value to an existing variable, you are creating a new variable with the same name as an existing variable - hence no-redeclare.:÷
2015-09-29T16:14:57ZΩ@ilyavolodin Makes sense. Trying to Promise = require("bluebird"); triggered no-native-reassign (and also no-undef for that matter) indeed. I guess I didn't read correctly, thanks anyway :):C
2015-09-29T16:21:02Z+Alright thanks everyone for the discussion.:æ
2015-09-29T17:29:48Z•@ilyavolodin

it's not really shadowing anything (same scope as built-in Promise)

That's not true. Top-level lexical declarations in modules shadow bindings in the global scope (see ES2015 ¬ß15.2.1.16.4 step 6). no-shadow should catch those. Top-level vars are just redeclarations of globals.:ÿ
2015-09-29T18:34:56Zø@michaelficarra I was thinking about it as I was writing my response. However, those are mechanics of the language itself. I'm not really sure it would be obvious to anyone outside of a few people who really know how global scope works in modules. And since this error is correctly reported by no-reassign already, I think it achieves expected result. We want to avoid situations where the same error is reported multiple times by different rules.:°
2015-09-29T19:22:58ZàRemember, node environment adds an extra scope, so const Promise is a shadow and not a redeclare. no-shadow should be able to flag that.:F
2015-09-29T19:25:56Z.In that case, should no-redeclare not mark it?:`
2015-09-30T18:34:25ZHCorrect. In the node environment, it's not a redeclaration, it's shadow.:Ò
2015-10-02T16:54:32ZÿI will try to fix this.
Is this a breaking change?

@michaelficarra

Top-level vars are just redeclarations of globals.

VarScopedDeclarations and LexicallyScopedDeclarations look creating bindings into the same environment record to me. (14.a.i and 16.a.ii.1)
What is a difference between VarScopedDeclarations and LexicallyScopedDeclarations?:H
2015-10-03T18:39:53Z0I don't think this is breaking, it's just a bug.Û€é2015-09-19T16:00:25Z"2015-09-21T22:50:24Z*ßAfter updating from ESLint 1.4.3 to 1.5.0 I noticed the space-before-keywords rule with configuration always matches getters and setters.
return {
  get prop() {  <-- reports: Missing space before keyword "(".
    return prop;
  }
};
This conflicts with space-before-function-paren set to never.2I
(b1a68933cb43f4efe1692e8b2ac5a6a8d7c0bbb72015-09-21T21:34:55Z1937871:Ó
2015-09-19T16:00:38Z’Thanks for the issue! If you're reporting a bug, please be sure to include:

The version of ESLint you are using (run eslint -v)
What you did (the source code and ESLint configuration)
The actual ESLint output complete with numbers
What you expected to happen instead

Requesting a new rule? Please see Proposing a New Rule for instructions.:≤
2015-09-20T02:04:05ZôThanks for reporting this @remcohaszing. Unfortunately I won't have time look into this until after next week. Should be a relatively easy fix however :):o
2015-09-20T17:19:09ZWThanks for the report.
I can reproduce this in the online demo.
I will try to fix this.:˚
2015-09-20T17:22:49Z‚@mysticatea Can you share on how you are going to solve this?
This would help everyone to understand what the change is going to be so that everyone can weigh in on it. Situation like these some times produce breaking changes.:˜
2015-09-20T17:38:56Zﬁ@gyandeeps Oh, OK. I realized that get is a keyword right now.
I had been making space-before-keywords ignoring getters and setters. But actually, spacing which is between } and get (or set) should be handled by this rule.:∫
2015-09-20T18:36:33Z°In fact, get and set are not keywords: http://www.ecma-international.org/ecma-262/6.0/#sec-keywords
Hmm, class A { foo(){} bar(){} } spacing which is between foo(){} and bar is not handled by this rules. I rethought space-before-keywords should ignore getters, setters, and methods merely.ß#n£2015-09-01T05:58:37Z"2015-09-15T19:52:42Z*ÃIf you try to set no-warning-comments with "location": "anywhere" in a configuration comment, it itself is flagged as an error:
/*eslint no-warning-comments: [2, { "terms": ["todo", "fixme", "any other term"], "location": "anywhere" }]*/

var x = 10;
Results:
1:1  error  Unexpected todo comment            no-warning-comments
1:1  error  Unexpected fixme comment           no-warning-comments
1:1  error  Unexpected any other term comment  no-warning-comments2H
(5ebe123ebfae92019f1e8922961d19313b3bfa0e2015-09-15T16:00:57Z126780:‹
2015-09-01T05:58:37Z√Thanks for the issue! We get a lot of issues, so this message is automatically posted to each one to help you check that you've included all of the information we need to help you.
Reporting a bug? Please be sure to include:

The version of ESLint you are using (run eslint -v)
The source code that caused the problem
The configuration you're using (for the rule or your entire config file)
The actual ESLint output complete with line numbers

Requesting a new rule? Please be sure to include:

The use case for the rule - what is it trying to prevent or flag?
Whether the rule is trying to prevent an error or is purely stylistic
Why you believe this rule is generic enough to be included

Requesting a feature? Please be sure to include:

The problem you want to solve (don't mention the solution)
Your take on the correct solution to problem

Including this information in your issue helps us to triage it and get you a response as quickly as possible.
Thanks!:
2015-09-01T10:48:24ZüòÜ:º
2015-09-01T10:54:46Z£Any ideas how to fix this issue? Just ignoring all eslint comments in the rule would be a breaking change for me, because I use the rule to forbid eslint comments.:§
2015-09-01T11:12:37Zã@lo1tuma uh oh, I didn't think that in my PR. That said how can you forbid eslint directives with this? You use eslint as the warning term?:µ
2015-09-01T11:51:20ZúYou use eslint as the warning term?

Exactly. I know it doesn‚Äôt work for all eslint comments (e.g. /* eslint-disable */ or /* eslint-disable no-warning-comments */ would disable the rule so those comments can‚Äôt be detected anymore, see #1298), but it is still better than nothing.:¿
2015-09-01T11:53:49Zß@lo1tuma I see two options:

Convince @nzakas to add an option/rule to disable ESLint overrides
Add an option to this rule saying includeDirectives

What do you think?:µ
2015-09-01T11:58:02ZúI also thought about a CLI option, but actually I like the ability to make this only a warning instead of an error.
This option would work for me. But I think it would be still a breaking change because you have to change the rule configuration to make it work the same way as before.:‹
2015-09-01T12:01:21Z√I'm unsure about this being a breaking change since it really is a bug if you ask me. I'll let others decide tho. We can easily make that option true by default to keep this backwards compatible.:`
2015-09-01T18:26:04ZH@lo1tuma when to use this rule, are you using it inline out in a config?:8
2015-09-01T18:26:25Z Oops, should be "or", not " out":2
2015-09-01T18:34:19ZI use it in a config file.:«
2015-09-02T01:03:51ZÆOkay, so in that case, it seems like we should be able to make a special case where the rule says "if I see a comment that's configuring me, don't warn." Would that work?
Also, @lo1tuma, I think your use case is probably not correct for this rule. I'd suggest looking at creating a no-eslint-comments rule for that use case. Our configuration comments are special cases, and I think we need to treat them as such across the board.:ë
2015-09-02T01:13:17ZyPerhaps @lo1tuma's use case calls for a separate rule no-inline-config?  Not sure if it would belong in core or a plugin.:Â
2015-09-02T10:25:29ZÃ@nzakas So you are proposing that no-warning-comments should ignore /* eslint [...]no-warning-coments[...] */ but not e.g. /* eslint on-var: 2 */? That would work for me.
I agree that it would make sense as a separate rule (it was already rejected to be a core rule, see #1298). But I think that the discussion of a separate rule for this use-case shouldn‚Äôt influence the discussion how we want to solve the current issue: with a breaking change, or without?:œ
2015-09-03T19:46:43Z∂@lo1tuma yup, that's my proposal.
Ah yeah, I remember that issue, comments are hard. Maybe what we really need is a command line flag that disables the use of configuration comments?§Ûì?2017-02-15T18:46:50Z"2017-02-16T17:08:39Z*ÂTell us about your environment
Win 10, 64bit

ESLint Version: v.3.15.0
Node Version: v.7.5.0
npm Version: v.4.1.2
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:


"unicode-bom" :  "error"

What did you do? Please include the actual source code causing the issue.
I called eslint --fix some.js.

// Some comments.
function someFunction() {
    // some code...
}
What did you expect to happen?
<U+FEFF>// Some comments.
function someFunction() {
    // some code...
}
What actually happened? Please include the actual, raw output from ESLint.
// Some comments.
<U+FEFF><U+FEFF><U+FEFF><U+FEFF><U+FEFF><U+FEFF><U+FEFF><U+FEFF><U+FEFF><U+FEFF>function someFunction() {
    // some code...
}2I
(c53e03417a9710f6be69937b328585b90e1c16b32017-02-16T17:08:33Z1799798:º
2017-02-15T19:00:03Z£@pantosha Looks like this is happening due to multipass autofix (and not detecting that the BOM was already inserted in a previous run). Thanks for reporting this!∞Ûî?2017-02-15T20:09:58Z"2017-02-16T17:08:34Z*°What is the purpose of this pull request? (put an "X" next to item)
[ ] Documentation update
[x] Bug fix (template)
[ ] New rule (template)
[ ] Changes an existing rule (template)
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

See issue #8083


What changes did you make? (Give an overview)
Insert BOM at specific location using fixer.insertTextBeforeRange() instead before node. Because node range doesn't include comments.
Is there anything you'd like reviewers to focus on?
nothing2I
(c53e03417a9710f6be69937b328585b90e1c16b32017-02-16T17:08:33Z1799798:¬
2017-02-15T20:09:59Z©@pantosha, thanks for your PR! By analyzing the history of the files in this pull request, we identified @ehjay, @kaicataldo and @pedrottimark to be potential reviewers.:;
2017-02-15T20:09:59Z#All committers have signed the CLA.:
2017-02-15T20:10:00ZLGTM:
2017-02-15T20:54:24ZLGTM:O
2017-02-15T21:09:17Z7@mysticatea, please review again.¬†I've added the test.ˆBÀ§2015-09-11T17:39:35Z"2015-09-11T21:02:07Z*˙Running version 1.4.0 with valid-jsdoc set to 2. We don't have any jsdoc comments in the codebase being linted.
/home/ubuntu/smart-rain-barrel/barrel-web/node_modules/eslint/lib/rules/valid-jsdoc.js:124
                        } else if (tag.name.indexOf(".") === -1) {
                                           ^
TypeError: Cannot read property 'indexOf' of undefined
    at /home/ubuntu/smart-rain-barrel/barrel-web/node_modules/eslint/lib/rules/valid-jsdoc.js:124:44
    at Array.forEach (native)
    at EventEmitter.checkJSDoc (/home/ubuntu/smart-rain-barrel/barrel-web/node_modules/eslint/lib/rules/valid-jsdoc.js:107:24)
    at EventEmitter.emit (events.js:129:20)
    at Controller.controller.traverse.leave (/home/ubuntu/smart-rain-barrel/barrel-web/node_modules/eslint/lib/eslint.js:834:25)
    at Controller.__execute (/home/ubuntu/smart-rain-barrel/barrel-web/node_modules/eslint/node_modules/estraverse/estraverse.js:397:31)
    at Controller.traverse (/home/ubuntu/smart-rain-barrel/barrel-web/node_modules/eslint/node_modules/estraverse/estraverse.js:485:28)
    at EventEmitter.module.exports.api.verify (/home/ubuntu/smart-rain-barrel/barrel-web/node_modules/eslint/lib/eslint.js:819:24)
    at processText (/home/ubuntu/smart-rain-barrel/barrel-web/node_modules/eslint/lib/cli-engine.js:217:27)
    at processFile (/home/ubuntu/smart-rain-barrel/barrel-web/node_modules/eslint/lib/cli-engine.js:254:18)
    at executeOnFile (/home/ubuntu/smart-rain-barrel/barrel-web/node_modules/eslint/lib/cli-engine.js:539:23)2H
(a8f09566eeebdc913ccfef458d6e8d1691c235832015-09-11T20:18:33Z126780:‹
2015-09-11T17:39:36Z√Thanks for the issue! We get a lot of issues, so this message is automatically posted to each one to help you check that you've included all of the information we need to help you.
Reporting a bug? Please be sure to include:

The version of ESLint you are using (run eslint -v)
The source code that caused the problem
The configuration you're using (for the rule or your entire config file)
The actual ESLint output complete with line numbers

Requesting a new rule? Please be sure to include:

The use case for the rule - what is it trying to prevent or flag?
Whether the rule is trying to prevent an error or is purely stylistic
Why you believe this rule is generic enough to be included

Requesting a feature? Please be sure to include:

The problem you want to solve (don't mention the solution)
Your take on the correct solution to problem

Including this information in your issue helps us to triage it and get you a response as quickly as possible.
Thanks!:=
2015-09-11T17:46:53Z%Can you please share the source code?:Ç
2015-09-11T17:53:19ZÈSorry, it's a proprietary project and I can't tell from the error output where in the project it's barfing. I'm fine with providing the snippet if I can locate what snippet it's throwing on. Any tips on how to see what file is being inspected? I've got a work deadline I need to hit so I don't really have time to learn the internals of eslint in the next week.:6
2015-09-11T17:54:01Z$ DEBUG=eslint:* eslint foo.js:W
2015-09-11T17:54:11Z?Yup, I actually want the snippet or a reproducible code.
Thanks:‰
2015-09-11T18:10:53ZÀMuch appreciated @nzakas
When I run eslint on my project I get:
eslint:cli-engine Processing /Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/node_modules/eslint/node_modules/inquirer/node_modules/rx-lite/rx.lite.js +6ms
  eslint:cli-engine Linting /Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/node_modules/eslint/node_modules/inquirer/node_modules/rx-lite/rx.lite.js +0ms
  eslint:config Constructing config for /Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/node_modules/eslint/node_modules/inquirer/node_modules/rx-lite/rx.lite.js +0ms
  eslint:config Using .eslintrc and package.json files +0ms
  eslint:config Loading /Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/node_modules/eslint/node_modules/inquirer/node_modules/rx-lite/package.json +1ms
  eslint:config Loading /Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/node_modules/eslint/node_modules/inquirer/package.json +0ms
  eslint:config Loading /Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/node_modules/eslint/package.json +1ms
  eslint:config Loading /Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/.eslintrc +0ms
  eslint:config Using /Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/.eslintrc +1ms
  eslint:config Loading /Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/package.json +0ms
  eslint:config Merging command line environment settings +1ms
/Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/node_modules/eslint/lib/rules/valid-jsdoc.js:124
                        } else if (tag.name.indexOf(".") === -1) {
                                           ^
TypeError: Cannot read property 'indexOf' of undefined
    at /Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/node_modules/eslint/lib/rules/valid-jsdoc.js:124:44
    at Array.forEach (native)
    at EventEmitter.checkJSDoc (/Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/node_modules/eslint/lib/rules/valid-jsdoc.js:107:24)
    at EventEmitter.emit (events.js:129:20)
    at Controller.controller.traverse.leave (/Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/node_modules/eslint/lib/eslint.js:834:25)
    at Controller.__execute (/Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/node_modules/eslint/node_modules/estraverse/estraverse.js:397:31)
    at Controller.traverse (/Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/node_modules/eslint/node_modules/estraverse/estraverse.js:485:28)
    at EventEmitter.module.exports.api.verify (/Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/node_modules/eslint/lib/eslint.js:819:24)
    at processText (/Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/node_modules/eslint/lib/cli-engine.js:217:27)
    at processFile (/Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/node_modules/eslint/lib/cli-engine.js:254:18)
    at executeOnFile (/Users/jeffrey.charles/projects/smart-rain-barrel/barrel-web/node_modules/eslint/lib/cli-engine.js:539:23)

which is kind of weird since I thought eslint ignores node_modules.
Interestingly when I run eslint node_modules/eslint/node_modules/inquirer/node_modules/rx-lite/rx.lite.js I get the same stack trace.
Downloading https://raw.githubusercontent.com/Reactive-Extensions/RxJS/master/dist/rx.lite.js and running it against my ruleset also yields the same stack trace. So yeah, https://raw.githubusercontent.com/Reactive-Extensions/RxJS/master/dist/rx.lite.js seems to repro the problem.:-
2015-09-11T18:27:01ZAre you using node 4?:#
2015-09-11T18:46:43ZNode 0.12.4:W
2015-09-11T18:54:40Z?Related to #3746, which is .eslintignore not working correctly.:*
2015-09-11T18:54:55ZLooking into this.:•
2015-09-11T19:08:35ZåOkay, so #3746 is the reason this file is being linted when it shouldn't be. That's being addressed.
The code has this block:
/**
 * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
 * This operator is a specialization of Multicast using a AsyncSubject.
 *
 * @example
 * var res = source.publishLast();
 * var res = source.publishLast(function (x) { return x; });
 *
 * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will only receive the last notification of the source.
 * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
 */
This actually looks like a bug in doctrine because the selector parameter is missing a name:
{ title: 'param',
  description: '[Optional] Selector function which can use the multicasted sourc
e sequence as many times as needed, without causing multiple subscriptions to th
e source sequence. Subscribers to the given source will only receive the last no
tification of the source.',
  type: undefined,
  name: undefined }

Issue filed: eslint/doctrine#120:3
2015-09-11T19:13:14ZAwesome, thank you @nzakas!:*
2015-09-11T19:27:05ZDuplicate of #2270Ã'õ¶.2016-04-22T14:07:51Z"2016-05-03T02:22:06Z*‘What version of ESLint are you using?
2.8.0
What parser (default, Babel-ESLint, etc.) are you using?
default
Please show your full configuration:
{
    "rules": {
        "max-statements-per-line": ["error", { "max": 1 }]
    }
}
What did you do? Please include the actual source code causing the issue.
When running eslint on the following file:
var a = 1;

if (a) a *= 1; else b *= 1;

if (a) { a *= 1; } else { b *= 1; }
What did you expect to happen?
I would have expected both of these if statements to be flagged as having two many statements.
What actually happened? Please include the actual, raw output from ESLint.
I get this:
/private/tmp/blah/temp.js
  5:10  error  This line has too many statements. Maximum allowed is 1  max-statements-per-line

Is this intentional, or an oversight? If the latter, I can probably look at sending in a PR.2H
(dd8bf93fbba878e57ef7cd56f18132c2b7e92e132016-05-03T02:22:03Z151272:é
2016-04-23T05:13:21ZıThe rule ignores the bodies of the if and the else if they are not block statements, so that's why the first line isn't caught. The intent was to allow lone if statements with a single statement as the body be on the same line, however, I think there should be an exception made for the case you present so that it catches, since that is definitely more than one statement.:°
2016-04-24T05:37:58ZàWas able to replicate locally with the master branch - seems like a bug to me.
Edit: Marked as evaluating to get some more eyes on it :):Ü
2016-04-24T13:02:43ZÌI've got a branch ready for this, not opened a PR yet as I'm not sure on the procedure for stuff before it's accepted. https://github.com/glenjamin/eslint/tree/count-else-as-a-statement
The fix is a little weird, because the existing rule wants to treat if (x) var y = 1 as a single statement, when technically it's two. But I think I get the general feeling behind this.
On a similar note, the current tests don't have any examples of return, but I was thinking it might be nice to treat a function body that only has 1 statement as an expression, so the following would be allowed:
return function(x) { return x * 1; };:÷
2016-04-24T18:11:21ZΩ@glenjamin Awesome, thanks for looking into this! Generally we recommend waiting until it's accepted so that we're all in agreement on what needs to change before someone spends time working on a fix. I just want to make sure we get another pair of eyes from @eslint/eslint-team on this before marking it as accepted.:†
2016-04-28T03:10:05ZáThank you for this issue. I'm sorry for late response.
I also think this is a bug. I added accepted label.
/cc @btmills @michaelficarra:°
2016-04-28T23:02:15ZàPR is now open, is it worth me raising another issue for the return function(x) { return x * 1; }; suggestion in #5926 (comment) ?
#5993:≥
2016-04-29T03:46:21ZöUnrelated issues belong in their own issue.
To me it doesn't make sense to count that as 1 statement, but you can create the issue to get other opinions.
The reason we allow if (condition) statement; (and not if (condition) { statement; }) as a single statement is that keeping it on a single line is a very common practice (guard clauses, etc.). What you're proposing clearly breaks the rule to me, and should be counted as separate statements in my mind. I don't think a user would expect that kind of behavior by default (as opposed to my previous example). Plus, it raises the question of what other exceptions would we allow to make sure the rule is consistent.:Ú
2016-05-02T05:19:44ZŸTo summarize and confirm my understanding, given "max-statements-per-line": ["error", { "max": 1 }]:

var x = 1; This is clearly fine.
if (x) x *= 1; To support single-line ifs, we allow this right now. Everyone agrees that this case should remain valid?
if (x) x *= 1; else x /= 1; This case currently passes, but everyone thinks it should be a warning?
if (x) { x *= 1; } Currently not allowed, and that's the correct behavior.
if (x) { x *= 1; } else { x /= 1; } Currently not allowed, and that's the correct behavior.

If my understanding is correct, then I agree that (3) should fail. Though #5993 is currently labeled as Breaking:, I think we can consider this an oversight in the implementation and treat it as a Fix: instead.  The issue is labeled as a "bug" right now, which seems right to me. @nzakas or @ilyavolodin am I on the right track there?:á
2016-05-02T05:39:24ZoI think I agree. This seems more like an oversight. if and else should cont as two statements on the same line.:;
2016-05-02T11:40:27Z#Ah ok, so I should re-label as fix?:Ë
2016-05-02T16:49:36Zœ@glenjamin Let's wait to hear from @nzakas first, if he agrees, then it's a non-breaking change and changing commit message would allow us to merge it in now, if not - then this has to wait till 3.0 release.:ª
2016-05-03T02:19:10Z¢It seems like the consensus is that this is a bug in that the current behavior was unexpected, so I would consider this a bug and not a breakdown breaking change.û
*ï2015-01-20T03:16:21Z"2015-01-20T20:34:32Z*ÕI've noticed an issue where files I intended to ignore are being included. This only happens when my file path or ignore pattern has the "current directory" prefix (./). Here are the conditions under which it can be reproduced:

Ignore pattern has ./ prefix and file name does not. For example, an .eslintignore of ./source.js, will lint the file targeted by eslint source.js.
Ignore pattern does not have ./ prefix and file name does. For example, an .eslintignore of source.js, will lint the file targeted by eslint ./source.js.

Everything works if both the pattern and file name have the prefix or if neither do.
The problem occurs during the comparison between ignore patterns and file names in lib/ignored-files.js. Ideally, this "current directory" prefix shouldn't matter, since the logical file paths are the same. It would be nice if eslint were less strict about this detail.
I'm happy to work on this. I have a working fix, but I need to review and write tests.2G
(269f811ffaed47d776304c6dd6f53d0f02caa3342015-01-20T20:34:32Z38546:—
2015-01-20T03:30:04Z∏Sounds good. Please take a moment to read over our contribution guidelines: http://eslint.org/docs/developer-guide/contributing.html
Also, take a look at our CLA: http://eslint.org/claﬂ!≥2015-08-24T23:04:00Z"2015-08-25T20:43:17Z*üSometimes we break string in mulitple lines for lisibility like
const a = "that string can get very" +
  `long ${someVar} and we don't want it on one line`
The rule warns us to use template string when this is not needing and defeats the purpose.
Right now, there is a work around to add 2 template strings like
const a = `string1` +
  `string2`;
But I don't know if this is something we want/should keep. see #35062I
(03c25bb9c8927a016ea5803dfe3e39b51ceddfa82015-08-25T13:16:54Z1937871:‹
2015-08-24T23:04:01Z√Thanks for the issue! We get a lot of issues, so this message is automatically posted to each one to help you check that you've included all of the information we need to help you.
Reporting a bug? Please be sure to include:

The version of ESLint you are using (run eslint -v)
The source code that caused the problem
The configuration you're using (for the rule or your entire config file)
The actual ESLint output complete with line numbers

Requesting a new rule? Please be sure to include:

The use case for the rule - what is it trying to prevent or flag?
Whether the rule is trying to prevent an error or is purely stylistic
Why you believe this rule is generic enough to be included

Requesting a feature? Please be sure to include:

The problem you want to solve (don't mention the solution)
Your take on the correct solution to problem

Including this information in your issue helps us to triage it and get you a response as quickly as possible.
Thanks!:X
2015-08-25T02:55:36Z@@Cellule Could you paste ESLint output for the code that errors?:¡
2015-08-25T02:56:36Z®Thank you for the report.
I confirmed that.
/* eslint-env es6 */
/* eslint prefer-template:2 */
const a = "that string can get very" +
  `long ${someVar} and we don't want it on one line`;
> eslint -v
v1.2.1
> eslint test.js --no-eslintrc

test.js
  3:11  error  Unexpected string concatenation  prefer-template

‚úñ 1 problem (1 error, 0 warnings)

I thought this is a false positive.
Two or more string (and template literal) concatenation should be usable to make data without line breaks as keeping readability.
And we should rethink should the next pattern be warned?
let a = "this is a long string" +
    list.map(item => item.name).join(", ") +
    "and more long strings";:†
2015-08-25T03:16:27ZáAh, I could write that like:
let a = `this is a long string ${
    list.map(item => item.name).join(", ")
    } and more long strings`;:Ê
2015-08-25T03:57:22ZÕFor multi-line concatenation, perhaps the rule should check that the string contains a \n at the end?  Because we would still want the rule to flag:
const a = "This is a multi line string.\n" +
    "It continues onto another line"
Which can be replaced by:
const a = `This is a multi line string.
    It continues onto another line.`:ß
2015-08-25T04:01:25Zé@IanVS I imagine the whitespace on the second line of the second example is accidental, because the two versions are not currently equivalent.:û
2015-08-25T04:03:35ZÖYes, you're right.  You can tell I've not used them much yet.  üò≥
Should be?
const a = "This is a multi line string.\n" +
    "It continues onto another line"
const a = `This is a multi line string.
It continues onto another line.`
Hm, that's kinda ugly.  :-/:≠
2015-08-25T06:38:33ZîIn my opinion, if the 2 strings are not on the same line, we should not warn to use template string since it is not always preferable for lisibility:∑
2016-01-28T14:26:02ZûHey, what about this
        loader: ExtractText.extract('style',
            'css?sourceMap!sass?sourceMap&outputStyle=expanded&' +
            'includePaths[]=' +
            encodeURIComponent(path.resolve(__dirname, './src')) + '&' +
            'includePaths[]=' +
            encodeURIComponent(path.resolve(__dirname,
              './src/vendor/97f4b8a9aef3-with-fixes-for-node-sass/scss')) + '&' +
            'includePaths[]=' +
            encodeURIComponent(path.resolve(__dirname, './node_modules/compass-mixins/lib'))),
      },:Ä
2016-01-28T14:43:47ZÁIt seems @Cellule 's concern in #3507 (comment) wasn't addressed. I'll go on a bit of self-promotion and link you to https://github.com/mathieumg/tempura#nowhitespace which I use to build long URIs and URLs using template literals.ÏÀ¢2015-09-11T17:38:15Z"2015-09-11T21:02:07Z*÷ESLint just upgraded and now our Travis builds are failing because it's linting an ignored file.
Travis build: https://travis-ci.org/discourse/discourse/jobs/79870981
It runs eslint app/assets/javascripts from the project directory.
The .eslintignore file is in the project directory: https://github.com/discourse/discourse/blob/22844b9e4663a1dd06040cd5913f02f571f9672f/.eslintignore and contains:
...
app/assets/javascripts/locales/i18n.js
app/assets/javascripts/defer/html-sanitizer-bundle.js
app/assets/javascripts/discourse/lib/Markdown.Editor.js
...

But the build outputs:
/home/travis/build/discourse/discourse/app/assets/javascripts/defer/html-sanitizer-bundle.js
  1243:14  error  Octal literal in strict mode

This happens on my local machine too.
$ eslint --version
v1.4.0

This just started happening with the new release (a few minutes ago).2H
(a8f09566eeebdc913ccfef458d6e8d1691c235832015-09-11T20:18:33Z126780:‹
2015-09-11T17:38:16Z√Thanks for the issue! We get a lot of issues, so this message is automatically posted to each one to help you check that you've included all of the information we need to help you.
Reporting a bug? Please be sure to include:

The version of ESLint you are using (run eslint -v)
The source code that caused the problem
The configuration you're using (for the rule or your entire config file)
The actual ESLint output complete with line numbers

Requesting a new rule? Please be sure to include:

The use case for the rule - what is it trying to prevent or flag?
Whether the rule is trying to prevent an error or is purely stylistic
Why you believe this rule is generic enough to be included

Requesting a feature? Please be sure to include:

The problem you want to solve (don't mention the solution)
Your take on the correct solution to problem

Including this information in your issue helps us to triage it and get you a response as quickly as possible.
Thanks!:ˇ
2015-09-11T17:44:51ZÊAdding --ignore-path does not help.
$ eslint --ignore-path ./.eslintignore app/assets/javascripts/

/home/kane/projects/discourse/app/assets/javascripts/defer/html-sanitizer-bundle.js
  1243:14  error  Octal literal in strict mode:≈
2015-09-11T17:52:26Z¨Sorry about that. I'm guessing this is related to using glob. We did run into something similar during development, but we must have missed a case. We'll look into it!
@BYK:0
2015-09-11T18:01:38ZInvestigating right now.:5
2015-09-11T18:27:13Z@riking Are you using Node 4?:F
2015-09-11T18:38:08Z.I'm having the same issue with NodeJS v0.12.7.:∆
2015-09-11T18:45:28Z≠@BYK Locally I have node v0.10.25 and Travis has whatever version they have. https://github.com/discourse/discourse/blob/7e50af75473658e83a00697f85e2e855c960646a/.travis.yml:r
2015-09-11T18:47:11ZZWe've identified a fix and are working on getting some automated tests in place to verify.